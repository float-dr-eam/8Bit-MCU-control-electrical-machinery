---- H:\MyDownloads\说明书&测试报告\开发包\SC8F072开发包\SC8F072_DEMO_C\SC8F072_Sleep_Demo\SC8F072_Sleep_Demo.c ----------------------------------------------------------------------
1:                /*-------------------------------------------
2:                
3:                程序名称：休眠模式及唤醒程序
4:                日期版本：2023/09/20 <V1.0>
5:                
6:                备注：WDT已被禁止，休眠模式下利用PORTA,PORTB电平变化唤醒 
7:                
8:                *本程序由 &应用支持部& 编写整理
9:                -------------------------------------------*/
10:               
11:               
12:               #include <sc.h>
13:               
14:               void DelayXms(unsigned char x);
15:               void Init_System();
16:               void Sleep_Mode();
17:               
18:               /***********************************************************
19:               函数名称：DelayXms
20:               函数功能：毫秒级非精准延时
21:               入口参数：x - 延时时间
22:               出口参数：
23:               备    注：
24:               ***********************************************************/
25:               void DelayXms(unsigned char x)
26:               {
27:               	unsigned char i,j;
28:               	for(i=x;i>0;i--)
  07A0    00F1    LD	0x71,A
  07A1    0871    LD	A,0x71
  07A2    1903    SZB	0x3,2
  07A3    0008    RET
  07A4    0064    CLRWDT
29:               	{
30:               		asm("clrwdt");
31:               		for(j=153;j>0;j--);
  07A5    3099    LDIA	0x99
  07A6    00F2    LD	0x72,A
  07A7    0BF2    SZDECR	0x72
  07A8    2FA7    JP	0x7A7
  07A9    03F1    DECR	0x71
  07AA    2FA1    JP	0x7A1
32:               	}
33:               }
34:               /***********************************************************
35:               main主函数
36:               ***********************************************************/
37:               void main()
38:               {
39:               	Init_System();
  07AB    27B9    CALL	0x7B9
40:               	while(1)
41:               	{
42:               		RB6=1;
  07AC    1706    SETB	0x6,6
43:               		DelayXms(100);
  07AD    3064    LDIA	0x64
  07AE    279F    CALL	0x79F
44:               		RB6 = 0;
  07AF    1283    CLRB	0x3,5
  07B0    1306    CLRB	0x6,6
45:               		DelayXms(100);
  07B1    3064    LDIA	0x64
  07B2    279F    CALL	0x79F
46:               		RB6=1;
  07B3    1283    CLRB	0x3,5
  07B4    1706    SETB	0x6,6
47:               		DelayXms(100);
  07B5    3064    LDIA	0x64
  07B6    279F    CALL	0x79F
48:               		Sleep_Mode();
  07B7    27CE    CALL	0x7CE
  07B8    2FAC    JP	0x7AC
49:               	}
50:               }
51:               
52:               
53:               /***********************************************
54:               函数名称：Sleep_Mode
55:               函数功能：进入休眠模式
56:               入口参数：无
57:               出口参数：无
58:               备注：
59:               ************************************************/
60:               void Sleep_Mode()
61:               {
62:               	INTCON = 0;		
  07CE    018B    CLR	0xB
63:               	
64:               	OPTION_REG = 0;
  07CF    1283    CLRB	0x3,5
  07D0    0181    CLR	0x1
65:               
66:               	TRISA = 0B00000001; 		//关闭所有输出，RA0口做唤醒输入
  07D1    3001    LDIA	0x1
  07D2    1683    SETB	0x3,5
  07D3    0085    LD	0x5,A
67:               	WPUA  = 0B00000001;			//RA0 开上拉电阻
  07D4    0088    LD	0x8,A
68:               	
69:               	TRISB = 0B00001000;			//关闭所有输出，RB3口做唤醒输入
  07D5    3008    LDIA	0x8
  07D6    1283    CLRB	0x3,5
  07D7    0085    LD	0x5,A
70:               	PORTB = 0B00000000;
  07D8    0186    CLR	0x6
71:               	WPUB  = 0B00001000;			//RB3 开上拉电阻
  07D9    0088    LD	0x8,A
72:                  			
73:                  	ADCON0 = 0;					//关闭所有模块
  07DA    1683    SETB	0x3,5
  07DB    0195    CLR	0x15
74:               	ADCON1 = 0;
  07DC    0196    CLR	0x16
75:               	
76:               	PWMCON0 = 0;
  07DD    1283    CLRB	0x3,5
  07DE    0195    CLR	0x15
77:               		
78:               	OSCCON = 0X70;				//配置振荡为8M,关闭WDT，需注意芯片工程选项里WDT必须选为DISABLE,否则无法软件关掉WDT
  07DF    3070    LDIA	0x70
  07E0    0094    LD	0x14,A
79:               	
80:               	IOCA = 0B00000001;			//允许RA0的IO电平变化中断
  07E1    3001    LDIA	0x1
  07E2    1683    SETB	0x3,5
  07E3    0089    LD	0x9,A
81:               	IOCB = 0B00001000;			//允许RB3的IO口电平变化中断
  07E4    3008    LDIA	0x8
  07E5    1283    CLRB	0x3,5
  07E6    0089    LD	0x9,A
82:               	
83:               	RAIE = 1;					//允许PORTA的IO电平变化中断
  07E7    158E    SETB	0xE,3
84:               	PEIE = 1;					//要用RORTA中断唤醒，则PEIE必须设为1
  07E8    170B    SETB	0xB,6
85:               	RBIE = 1;					//允许PORTB电平变化中断
  07E9    158B    SETB	0xB,3
86:               	GIE = 0;					//唤醒后执行SLEEP后程序;
  07EA    138B    CLRB	0xB,7
87:               	
88:               
89:               	PORTA;						//读PORTA值并锁存,用电平变化中断必须执行这一步
  07EB    1683    SETB	0x3,5
  07EC    0806    LD	A,0x6
90:               	RAIF = 0;					//清PORTA中断标志位
  07ED    1283    CLRB	0x3,5
  07EE    118D    CLRB	0xD,3
91:               	PORTB;						//读PORTB值并锁存	
  07EF    0806    LD	A,0x6
92:               	RBIF = 0;					//清PORTB中断标志位		
  07F0    100B    CLRB	0xB,0
  07F1    0064    CLRWDT
  07F2    0063    STOP
  07F3    0000    NOP
  07F4    0064    CLRWDT
93:               	asm("clrwdt");
94:               
95:               	asm("sleep");				//进入休眠模式
96:               	
97:               	asm("nop");
98:               	asm("clrwdt");
99:               	if(RAIF)  RAIF = 0;			//清中断标志
  07F5    1283    CLRB	0x3,5
  07F6    198D    SZB	0xD,3
  07F7    118D    CLRB	0xD,3
100:              	if(RBIF)  RBIF = 0;			//清中断标志
  07F8    180B    SZB	0xB,0
  07F9    100B    CLRB	0xB,0
101:              	PORTA ^= 0X08;
  07FA    3008    LDIA	0x8
  07FB    1683    SETB	0x3,5
  07FC    0686    XORR	0x6
102:              	Init_System();
  07FD    2FB9    JP	0x7B9
103:              }
104:              
105:              /***********************************************
106:              函数名称：Init_System
107:              函数功能：系统初始化
108:              入口参数：无
109:              出口参数：无
110:              备注：
111:              ************************************************/
112:              void Init_System()
113:              {
114:              	asm("nop");
115:              	asm("clrwdt");
116:              	INTCON = 0;					//系统初始化
  07BB    018B    CLR	0xB
117:              	OSCCON = 0X72;				//配置振荡为8M,开 WDT
  07BC    3072    LDIA	0x72
  07BD    1283    CLRB	0x3,5
  07BE    0094    LD	0x14,A
118:              	OPTION_REG = 0;
  07BF    0181    CLR	0x1
119:              	
120:                  WPUA  = 0B00000001;			//初始化上拉
  07C0    3001    LDIA	0x1
  07C1    1683    SETB	0x3,5
  07C2    0088    LD	0x8,A
121:                  WPUB  = 0B00001000;			
  07C3    3008    LDIA	0x8
  07C4    1283    CLRB	0x3,5
  07C5    0088    LD	0x8,A
122:                
123:               
124:              	TRISA = 0B00000001;			//初始化IO状态
  07C6    3001    LDIA	0x1
  07C7    1683    SETB	0x3,5
  07C8    0085    LD	0x5,A
125:              	TRISB = 0B00001000;
  07C9    3008    LDIA	0x8
  07CA    1283    CLRB	0x3,5
  07CB    0085    LD	0x5,A
126:              
127:              //	PORTA = 0B00000000;
128:              	PORTB = 0B00000000;			//初始化输出
  07CC    0186    CLR	0x6
  07CD    0008    RET
129:              
130:              }
131:              
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    2FFE    JP	0x7FE
---- start_initialization ------------------------------------------------------------------
---- interrupt_function_enter ----------------------------------------------------------
---- common_function ------------------------------------------------------------------
  079F    00F0    LD	0x70,A
  07B9    0000    NOP
  07BA    0064    CLRWDT
  07FE    0183    CLR	0x3



Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sun Dec 22 15:23:10 2024

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F072
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	swtext1,local,class=CONST,delta=2
    23                           	psect	swtext2,local,class=CONST,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	swtext3,local,class=CONST,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	swtext4,local,class=CONST,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	pa_nodes0,global,class=CODE,delta=2
    52                           	dabs	1,0x7E,2
    53  0000                     
    54                           ; Version 1.45
    55                           ; Generated 16/11/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC16F887 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	idataCOMMON
    90  0000                     __pidataCOMMON:	
    91                           
    92                           	psect	idataBANK0
    93  0000                     __pidataBANK0:	
    94                           
    95                           	psect	idataBANK1
    96  0000                     __pidataBANK1:	
    97                           
    98                           	psect	strings
    99  0700                     __pstrings:	
   100  0700                     stringtab:	
   101  0700                     __stringtab:	
   102  0700                     stringcode:	
   103                           ;	String table - string pointers are 1 byte each
   104                           
   105  0700                     stringdir:	
   106  0700  3007               	movlw	high stringdir
   107  0701  008A               	movwf	10
   108  0702  0804               	movf	4,w
   109  0703  0A84               	incf	4,f
   110  0704  0782               	addwf	2,f
   111  0705                     __stringbase:	
   112  0705  3400               	retlw	0
   113  0706                     __end_of__stringtab:	
   114  0706                     _duty_steps:	
   115  0706  3432               	retlw	50
   116  0707  343C               	retlw	60
   117  0708  3446               	retlw	70
   118  0709  3450               	retlw	80
   119  070A  345A               	retlw	90
   120  070B  3400               	retlw	0
   121  070C                     __end_of_duty_steps:	
   122  001E                     _PWMD01H	set	30
   123  001D                     _PWMCON2	set	29
   124  001C                     _PWMT4L	set	28
   125  001B                     _PWMD4L	set	27
   126  001A                     _PWMD1L	set	26
   127  0019                     _PWMD0L	set	25
   128  0018                     _PWMTH	set	24
   129  0017                     _PWMTL	set	23
   130  0016                     _PWMCON1	set	22
   131  0015                     _PWMCON0	set	21
   132  0014                     _OSCCON	set	20
   133  0013                     _T2CON	set	19
   134  0011                     _PR2	set	17
   135  000B                     _INTCON	set	11
   136  0009                     _IOCB	set	9
   137  0008                     _WPUB	set	8
   138  0007                     _WPDB	set	7
   139  0006                     _PORTB	set	6
   140  0005                     _TRISB	set	5
   141  0001                     _OPTION_REG	set	1
   142  0071                     _TMR2IE	set	113
   143  0073                     _RAIE	set	115
   144  0069                     _TMR2IF	set	105
   145  006B                     _RAIF	set	107
   146  0058                     _RBIF	set	88
   147  005A                     _T0IF	set	90
   148  005B                     _RBIE	set	91
   149  005D                     _T0IE	set	93
   150  005F                     _GIE	set	95
   151  0030                     _RB0	set	48
   152  0031                     _RB1	set	49
   153  0032                     _RB2	set	50
   154  0033                     _RB3	set	51
   155  0034                     _RB4	set	52
   156  0028                     _TRISB0	set	40
   157  0029                     _TRISB1	set	41
   158  002A                     _TRISB2	set	42
   159  002B                     _TRISB3	set	43
   160  002C                     _TRISB4	set	44
   161  009E                     _PWMD23H	set	158
   162  009C                     _PWMD3L	set	156
   163  009B                     _PWMD2L	set	155
   164  0099                     _ADRESH	set	153
   165  0098                     _ADRESL	set	152
   166  0096                     _ADCON1	set	150
   167  0095                     _ADCON0	set	149
   168  0089                     _IOCA	set	137
   169  0088                     _WPUA	set	136
   170  0087                     _WPDA	set	135
   171  0086                     _PORTA	set	134
   172  0085                     _TRISA	set	133
   173  0081                     _TMR0	set	129
   174  04B2                     _LDO_EN	set	1202
   175  04B6                     _CHS4	set	1206
   176  04A9                     _GODONE	set	1193
   177  0428                     _TRISA0	set	1064
   178  0429                     _TRISA1	set	1065
   179  042A                     _TRISA2	set	1066
   180  042C                     _TRISA4	set	1068
   181                           
   182                           	psect	cinit
   183  000D                     start_initialization:	
   184                           ; #config settings
   185                           
   186  000D                     __initialization:	
   187  000D  307E               	movlw	126
   188                           
   189                           ; Initialize objects allocated to BANK1
   190  000E  1683               	bsf	3,5	;RP0=1, select bank1
   191                           
   192                           ;initializer for _nums
   193  000F  00A0               	movwf	__pdataBANK1& (0+127)
   194  0010  3030               	movlw	48
   195  0011  00A1               	movwf	(__pdataBANK1+1)& (0+127)
   196  0012  306D               	movlw	109
   197  0013  00A2               	movwf	(__pdataBANK1+2)& (0+127)
   198  0014  3079               	movlw	121
   199  0015  00A3               	movwf	(__pdataBANK1+3)& (0+127)
   200  0016  3033               	movlw	51
   201  0017  00A4               	movwf	(__pdataBANK1+4)& (0+127)
   202  0018  305B               	movlw	91
   203  0019  00A5               	movwf	(__pdataBANK1+5)& (0+127)
   204  001A  305F               	movlw	95
   205  001B  00A6               	movwf	(__pdataBANK1+6)& (0+127)
   206  001C  3070               	movlw	112
   207  001D  00A7               	movwf	(__pdataBANK1+7)& (0+127)
   208  001E  307F               	movlw	127
   209  001F  00A8               	movwf	(__pdataBANK1+8)& (0+127)
   210  0020  307B               	movlw	123
   211  0021  00A9               	movwf	(__pdataBANK1+9)& (0+127)
   212  0022  3047               	movlw	71
   213  0023  00AA               	movwf	(__pdataBANK1+10)& (0+127)
   214  0024  3001               	movlw	1
   215  0025  01AB               	clrf	(__pdataBANK1+11)& (0+127)
   216                           
   217                           ;initializer for _num_hund
   218  0026  01AC               	clrf	(__pdataBANK1+12)& (0+127)
   219  0027  00AD               	movwf	(__pdataBANK1+13)& (0+127)
   220  0028  3003               	movlw	3
   221  0029  00AE               	movwf	(__pdataBANK1+14)& (0+127)
   222  002A  300D               	movlw	13
   223  002B  00AF               	movwf	(__pdataBANK1+15)& (0+127)
   224  002C  300F               	movlw	15
   225  002D  00B0               	movwf	(__pdataBANK1+16)& (0+127)
   226  002E  3002               	movlw	2
   227                           
   228                           ; Initialize objects allocated to BANK0
   229  002F  1283               	bcf	3,5	;RP0=0, select bank0
   230                           
   231                           ;initializer for _unit
   232  0030  00ED               	movwf	__pdataBANK0& (0+127)
   233                           
   234                           ;initializer for _hundreds
   235  0031  3004               	movlw	4
   236  0032  00EE               	movwf	(__pdataBANK0+1)& (0+127)
   237                           
   238                           ;initializer for _tens
   239  0033  00FD               	movwf	__pdataCOMMON& (0+127)
   240  0034  3058               	movlw	low __pbssBANK0
   241                           
   242                           ; Clear objects allocated to BANK1
   243  0035  1683               	bsf	3,5	;RP0=1, select bank1
   244  0036  01B1               	clrf	__pbssBANK1& (0+127)
   245  0037  01B2               	clrf	(__pbssBANK1+1)& (0+127)
   246                           
   247                           ; Clear objects allocated to BANK0
   248  0038  1383               	bcf	3,7	;select IRP bank0
   249  0039  0084               	movwf	4
   250  003A  306D               	movlw	low (__pbssBANK0+21)
   251  003B  2718               	fcall	clear_ram0
   252  003C                     end_of_initialization:	
   253                           ;End of C runtime variable initialization code
   254                           
   255  003C                     __end_of__initialization:	
   256  003C  0183               	clrf	3
   257  003D  2F0C               	ljmp	_main	;jump to C main() function
   258                           
   259                           	psect	dataCOMMON
   260  007D                     __pdataCOMMON:	
   261  007D                     _tens:	
   262  007D                     	ds	1
   263                           
   264                           	psect	bssBANK0
   265  0058                     __pbssBANK0:	
   266  0058                     _LED_Key_counter:	
   267  0058                     	ds	2
   268  005A                     _long_press_counter:	
   269  005A                     	ds	2
   270  005C                     _ADC_delay:	
   271  005C                     	ds	2
   272  005E                     _power_ad:	
   273  005E                     	ds	2
   274  0060                     Display@scan_cnt:	
   275  0060                     	ds	1
   276  0061                     _LED_sflag:	
   277  0061                     	ds	1
   278  0062                     _LED_lflag:	
   279  0062                     	ds	1
   280  0063                     _T_flag:	
   281  0063                     	ds	1
   282  0064                     _button_lflag:	
   283  0064                     	ds	1
   284  0065                     _button_sflag:	
   285  0065                     	ds	1
   286  0066                     _ADC_Flag:	
   287  0066                     	ds	1
   288  0067                     _power_percent:	
   289  0067                     	ds	1
   290  0068                     _test_adc:	
   291  0068                     	ds	1
   292  0069                     _LED_num:	
   293  0069                     	ds	1
   294  006A                     _pwm_duty:	
   295  006A                     	ds	1
   296  006B                     _adresult:	
   297  006B                     	ds	2
   298                           
   299                           	psect	dataBANK0
   300  006D                     __pdataBANK0:	
   301  006D                     _unit:	
   302  006D                     	ds	1
   303  006E                     _hundreds:	
   304  006E                     	ds	1
   305                           
   306                           	psect	bssBANK1
   307  00B1                     __pbssBANK1:	
   308  00B1                     _Time_delay:	
   309  00B1                     	ds	2
   310                           
   311                           	psect	dataBANK1
   312  00A0                     __pdataBANK1:	
   313  00A0                     _nums:	
   314  00A0                     	ds	12
   315  00AC                     _num_hund:	
   316  00AC                     	ds	5
   317                           
   318                           	psect	clrtext
   319  0718                     clear_ram0:	
   320                           ;	Called with FSR containing the base address, and
   321                           ;	W with the last address+1
   322                           
   323  0718  0064               	clrwdt	;clear the watchdog before getting into this loop
   324  0719                     clrloop0:	
   325  0719  0180               	clrf	0	;clear RAM location pointed to by FSR
   326  071A  0A84               	incf	4,f	;increment pointer
   327  071B  0604               	xorwf	4,w	;XOR with final address
   328  071C  1903               	btfsc	3,2	;have we reached the end yet?
   329  071D  3400               	retlw	0	;all done for this memory range, return
   330  071E  0604               	xorwf	4,w	;XOR again to restore value
   331  071F  2F19               	goto	clrloop0	;do the next byte
   332                           
   333                           	psect	cstackCOMMON
   334  0070                     __pcstackCOMMON:	
   335  0070                     ?_Init_System:	
   336  0070                     ?_Led_Gpio_Init:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     ?_PWM_Init:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     ?_Button_response:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0070                     ?_ADC_read:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ?_Charge_num:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ?_Uncharge_num:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?_Display:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ??_Display:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?_main:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ?_Isr_Timer:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_Motor_num:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_Set_AllPin_INPUT:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ??_Set_AllPin_INPUT:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_Display_Scan1:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ??_Display_Scan1:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_Display_Scan2:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ??_Display_Scan2:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_Display_Scan3:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ??_Display_Scan3:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_Display_Scan4:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ??_Display_Scan4:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ?_Display_Scan5:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ??_Display_Scan5:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     ?___lbmod:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0070                     ___lbmod@divisor:	
   409                           ; 1 bytes @ 0x0
   410                           
   411                           
   412                           ; 1 bytes @ 0x0
   413  0070                     	ds	1
   414  0071                     ??___lbmod:	
   415                           
   416                           ; 1 bytes @ 0x1
   417  0071                     	ds	1
   418  0072                     ___lbmod@dividend:	
   419                           
   420                           ; 1 bytes @ 0x2
   421  0072                     	ds	1
   422  0073                     ___lbmod@counter:	
   423                           
   424                           ; 1 bytes @ 0x3
   425  0073                     	ds	1
   426  0074                     ___lbmod@rem:	
   427                           
   428                           ; 1 bytes @ 0x4
   429  0074                     	ds	1
   430  0075                     ?___lbdiv:	
   431  0075                     ___lbdiv@divisor:	
   432                           ; 1 bytes @ 0x5
   433                           
   434                           
   435                           ; 1 bytes @ 0x5
   436  0075                     	ds	1
   437  0076                     ??___lbdiv:	
   438  0076                     ___lbdiv@dividend:	
   439                           ; 1 bytes @ 0x6
   440                           
   441                           
   442                           ; 1 bytes @ 0x6
   443  0076                     	ds	1
   444  0077                     ___lbdiv@counter:	
   445                           
   446                           ; 1 bytes @ 0x7
   447  0077                     	ds	1
   448  0078                     ___lbdiv@quotient:	
   449                           
   450                           ; 1 bytes @ 0x8
   451  0078                     	ds	1
   452  0079                     ??_Charge_num:	
   453  0079                     ??_Uncharge_num:	
   454                           ; 1 bytes @ 0x9
   455                           
   456  0079                     Charge_num@hundred:	
   457                           ; 1 bytes @ 0x9
   458                           
   459  0079                     Uncharge_num@hundred:	
   460                           ; 1 bytes @ 0x9
   461                           
   462                           
   463                           ; 1 bytes @ 0x9
   464  0079                     	ds	1
   465  007A                     ??_Isr_Timer:	
   466                           
   467                           ; 1 bytes @ 0xA
   468  007A                     	ds	3
   469                           
   470                           	psect	cstackBANK0
   471  0020                     __pcstackBANK0:	
   472  0020                     ??_Init_System:	
   473  0020                     ??_Led_Gpio_Init:	
   474                           ; 1 bytes @ 0x0
   475                           
   476  0020                     ??_PWM_Init:	
   477                           ; 1 bytes @ 0x0
   478                           
   479  0020                     ?_ADC_Sample:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  0020                     ??_Motor_num:	
   483                           ; 1 bytes @ 0x0
   484                           
   485  0020                     ?___wmul:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  0020                     ?___awmod:	
   489                           ; 2 bytes @ 0x0
   490                           
   491  0020                     ?___ftpack:	
   492                           ; 2 bytes @ 0x0
   493                           
   494  0020                     ADC_Sample@adldo:	
   495                           ; 3 bytes @ 0x0
   496                           
   497  0020                     ___wmul@multiplier:	
   498                           ; 1 bytes @ 0x0
   499                           
   500  0020                     ___awmod@divisor:	
   501                           ; 2 bytes @ 0x0
   502                           
   503  0020                     ___ftpack@arg:	
   504                           ; 2 bytes @ 0x0
   505                           
   506                           
   507                           ; 3 bytes @ 0x0
   508  0020                     	ds	1
   509  0021                     ??_ADC_Sample:	
   510                           
   511                           ; 1 bytes @ 0x1
   512  0021                     	ds	1
   513  0022                     ___wmul@multiplicand:	
   514  0022                     ___awmod@dividend:	
   515                           ; 2 bytes @ 0x2
   516                           
   517                           
   518                           ; 2 bytes @ 0x2
   519  0022                     	ds	1
   520  0023                     ___ftpack@exp:	
   521                           
   522                           ; 1 bytes @ 0x3
   523  0023                     	ds	1
   524  0024                     ??___wmul:	
   525  0024                     ??___awmod:	
   526                           ; 1 bytes @ 0x4
   527                           
   528  0024                     ___awmod@counter:	
   529                           ; 1 bytes @ 0x4
   530                           
   531  0024                     ___ftpack@sign:	
   532                           ; 1 bytes @ 0x4
   533                           
   534  0024                     ___wmul@product:	
   535                           ; 1 bytes @ 0x4
   536                           
   537                           
   538                           ; 2 bytes @ 0x4
   539  0024                     	ds	1
   540  0025                     ??___ftpack:	
   541  0025                     ADC_Sample@j:	
   542                           ; 1 bytes @ 0x5
   543                           
   544  0025                     ___awmod@sign:	
   545                           ; 1 bytes @ 0x5
   546                           
   547                           
   548                           ; 1 bytes @ 0x5
   549  0025                     	ds	1
   550  0026                     ?___lwdiv:	
   551  0026                     ADC_Sample@adch:	
   552                           ; 2 bytes @ 0x6
   553                           
   554  0026                     ___lwdiv@divisor:	
   555                           ; 1 bytes @ 0x6
   556                           
   557                           
   558                           ; 2 bytes @ 0x6
   559  0026                     	ds	1
   560  0027                     ADC_Sample@i:	
   561                           
   562                           ; 1 bytes @ 0x7
   563  0027                     	ds	1
   564  0028                     ?___lwtoft:	
   565  0028                     ___lwdiv@dividend:	
   566                           ; 3 bytes @ 0x8
   567                           
   568  0028                     ___lwtoft@c:	
   569                           ; 2 bytes @ 0x8
   570                           
   571  0028                     ADC_Sample@adsum:	
   572                           ; 2 bytes @ 0x8
   573                           
   574                           
   575                           ; 4 bytes @ 0x8
   576  0028                     	ds	2
   577  002A                     ??___lwdiv:	
   578  002A                     ___lwdiv@quotient:	
   579                           ; 1 bytes @ 0xA
   580                           
   581                           
   582                           ; 2 bytes @ 0xA
   583  002A                     	ds	1
   584  002B                     ??___lwtoft:	
   585  002B                     ?___ftadd:	
   586                           ; 1 bytes @ 0xB
   587                           
   588  002B                     ___ftadd@f1:	
   589                           ; 3 bytes @ 0xB
   590                           
   591                           
   592                           ; 3 bytes @ 0xB
   593  002B                     	ds	1
   594  002C                     ___lwdiv@counter:	
   595  002C                     ADC_Sample@admin:	
   596                           ; 1 bytes @ 0xC
   597                           
   598                           
   599                           ; 2 bytes @ 0xC
   600  002C                     	ds	1
   601  002D                     ?_Set_PWM:	
   602  002D                     Set_PWM@duty:	
   603                           ; 1 bytes @ 0xD
   604                           
   605                           
   606                           ; 1 bytes @ 0xD
   607  002D                     	ds	1
   608  002E                     ??_Set_PWM:	
   609  002E                     Set_PWM@channel:	
   610                           ; 1 bytes @ 0xE
   611                           
   612  002E                     ADC_Sample@admax:	
   613                           ; 1 bytes @ 0xE
   614                           
   615  002E                     ___ftadd@f2:	
   616                           ; 2 bytes @ 0xE
   617                           
   618                           
   619                           ; 3 bytes @ 0xE
   620  002E                     	ds	1
   621  002F                     Set_PWM@pulse_width:	
   622                           
   623                           ; 2 bytes @ 0xF
   624  002F                     	ds	1
   625  0030                     ADC_Sample@ad_temp:	
   626                           
   627                           ; 2 bytes @ 0x10
   628  0030                     	ds	1
   629  0031                     ??_Button_response:	
   630  0031                     ??___ftadd:	
   631                           ; 1 bytes @ 0x11
   632                           
   633                           
   634                           ; 1 bytes @ 0x11
   635  0031                     	ds	3
   636  0034                     ___ftadd@sign:	
   637                           
   638                           ; 1 bytes @ 0x14
   639  0034                     	ds	1
   640  0035                     ___ftadd@exp2:	
   641                           
   642                           ; 1 bytes @ 0x15
   643  0035                     	ds	1
   644  0036                     ___ftadd@exp1:	
   645                           
   646                           ; 1 bytes @ 0x16
   647  0036                     	ds	1
   648  0037                     ?___ftdiv:	
   649  0037                     ___ftdiv@f2:	
   650                           ; 3 bytes @ 0x17
   651                           
   652                           
   653                           ; 3 bytes @ 0x17
   654  0037                     	ds	3
   655  003A                     ___ftdiv@f1:	
   656                           
   657                           ; 3 bytes @ 0x1A
   658  003A                     	ds	3
   659  003D                     ??___ftdiv:	
   660                           
   661                           ; 1 bytes @ 0x1D
   662  003D                     	ds	3
   663  0040                     ___ftdiv@cntr:	
   664                           
   665                           ; 1 bytes @ 0x20
   666  0040                     	ds	1
   667  0041                     ___ftdiv@f3:	
   668                           
   669                           ; 3 bytes @ 0x21
   670  0041                     	ds	3
   671  0044                     ___ftdiv@exp:	
   672                           
   673                           ; 1 bytes @ 0x24
   674  0044                     	ds	1
   675  0045                     ___ftdiv@sign:	
   676                           
   677                           ; 1 bytes @ 0x25
   678  0045                     	ds	1
   679  0046                     ?___fttol:	
   680  0046                     ___fttol@f1:	
   681                           ; 4 bytes @ 0x26
   682                           
   683                           
   684                           ; 3 bytes @ 0x26
   685  0046                     	ds	4
   686  004A                     ??___fttol:	
   687                           
   688                           ; 1 bytes @ 0x2A
   689  004A                     	ds	3
   690  004D                     ___fttol@sign1:	
   691                           
   692                           ; 1 bytes @ 0x2D
   693  004D                     	ds	1
   694  004E                     ___fttol@lval:	
   695                           
   696                           ; 4 bytes @ 0x2E
   697  004E                     	ds	4
   698  0052                     ___fttol@exp1:	
   699                           
   700                           ; 1 bytes @ 0x32
   701  0052                     	ds	1
   702  0053                     ??_ADC_read:	
   703                           
   704                           ; 1 bytes @ 0x33
   705  0053                     	ds	1
   706  0054                     ADC_read@power_temp:	
   707                           
   708                           ; 4 bytes @ 0x34
   709  0054                     	ds	4
   710  0058                     ??_main:	
   711                           
   712                           	psect	maintext
   713  070C                     __pmaintext:	
   714                           ; 1 bytes @ 0x38
   715 ;;
   716 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   717 ;;
   718 ;; *************** function _main *****************
   719 ;; Defined at:
   720 ;;		line 81 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_double_key\SC8F072_Pwm_Demo.c"
   721 ;; Parameters:    Size  Location     Type
   722 ;;		None
   723 ;; Auto vars:     Size  Location     Type
   724 ;;		None
   725 ;; Return value:  Size  Location     Type
   726 ;;                  1    wreg      void 
   727 ;; Registers used:
   728 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   729 ;; Tracked objects:
   730 ;;		On entry : B00/0
   731 ;;		On exit  : 100/0
   732 ;;		Unchanged: 0/0
   733 ;; Data sizes:     COMMON   BANK0   BANK1
   734 ;;      Params:         0       0       0
   735 ;;      Locals:         0       0       0
   736 ;;      Temps:          0       0       0
   737 ;;      Totals:         0       0       0
   738 ;;Total ram usage:        0 bytes
   739 ;; Hardware stack levels required when called:    6
   740 ;; This function calls:
   741 ;;		_ADC_read
   742 ;;		_Button_response
   743 ;;		_Init_System
   744 ;;		_Led_Gpio_Init
   745 ;;		_PWM_Init
   746 ;; This function is called by:
   747 ;;		Startup code after reset
   748 ;; This function uses a non-reentrant model
   749 ;;
   750                           
   751                           
   752                           ;psect for function _main
   753  070C                     _main:	
   754                           
   755                           ;SC8F072_Pwm_Demo.c: 83: Init_System();
   756                           
   757                           ;incstack = 0
   758                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   759  070C  2525               	fcall	_Init_System
   760                           
   761                           ;SC8F072_Pwm_Demo.c: 84: Led_Gpio_Init();
   762  070D  2742               	fcall	_Led_Gpio_Init
   763                           
   764                           ;SC8F072_Pwm_Demo.c: 85: PWM_Init();
   765  070E  26B6               	fcall	_PWM_Init
   766  070F                     l659:	
   767                           ;SC8F072_Pwm_Demo.c: 86: while(1)
   768                           
   769  070F  0064               	clrwdt	;# 
   770                           
   771                           ;SC8F072_Pwm_Demo.c: 89: Button_response();
   772  0710  203E               	fcall	_Button_response
   773  0711  0064               	clrwdt	;# 
   774                           
   775                           ;SC8F072_Pwm_Demo.c: 91: if(ADC_Flag)
   776  0712  1283               	bcf	3,5	;RP0=0, select bank0
   777  0713  0866               	movf	_ADC_Flag,w
   778  0714  1903               	btfsc	3,2
   779  0715  2F0F               	goto	l659
   780                           
   781                           ;SC8F072_Pwm_Demo.c: 92: {
   782                           ;SC8F072_Pwm_Demo.c: 93: ADC_read();
   783  0716  23E7               	fcall	_ADC_read
   784  0717  2F0F               	goto	l659
   785  0718                     __end_of_main:	
   786                           
   787                           	psect	text1
   788  06B6                     __ptext1:	
   789 ;; *************** function _PWM_Init *****************
   790 ;; Defined at:
   791 ;;		line 4 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_double_key\PWM.c"
   792 ;; Parameters:    Size  Location     Type
   793 ;;		None
   794 ;; Auto vars:     Size  Location     Type
   795 ;;		None
   796 ;; Return value:  Size  Location     Type
   797 ;;                  1    wreg      void 
   798 ;; Registers used:
   799 ;;		wreg, status,2
   800 ;; Tracked objects:
   801 ;;		On entry : 100/0
   802 ;;		On exit  : 100/0
   803 ;;		Unchanged: 0/0
   804 ;; Data sizes:     COMMON   BANK0   BANK1
   805 ;;      Params:         0       0       0
   806 ;;      Locals:         0       0       0
   807 ;;      Temps:          0       0       0
   808 ;;      Totals:         0       0       0
   809 ;;Total ram usage:        0 bytes
   810 ;; Hardware stack levels used:    1
   811 ;; Hardware stack levels required when called:    3
   812 ;; This function calls:
   813 ;;		Nothing
   814 ;; This function is called by:
   815 ;;		_main
   816 ;; This function uses a non-reentrant model
   817 ;;
   818                           
   819                           
   820                           ;psect for function _PWM_Init
   821  06B6                     _PWM_Init:	
   822                           
   823                           ;PWM.c: 6: PWMCON1 = 0B11000000;
   824                           
   825                           ;incstack = 0
   826                           ; Regs used in _PWM_Init: [wreg+status,2]
   827  06B6  30C0               	movlw	192
   828  06B7  0096               	movwf	22	;volatile
   829                           
   830                           ;PWM.c: 7: TRISA = 0B00111111;
   831  06B8  303F               	movlw	63
   832  06B9  1683               	bsf	3,5	;RP0=1, select bank1
   833  06BA  0085               	movwf	5	;volatile
   834                           
   835                           ;PWM.c: 8: PWMTL = 0XFF;
   836  06BB  30FF               	movlw	255
   837  06BC  1283               	bcf	3,5	;RP0=0, select bank0
   838  06BD  0097               	movwf	23	;volatile
   839                           
   840                           ;PWM.c: 9: PWMT4L = 0XFF;
   841  06BE  009C               	movwf	28	;volatile
   842                           
   843                           ;PWM.c: 10: PWMTH = 0X00;
   844  06BF  0198               	clrf	24	;volatile
   845                           
   846                           ;PWM.c: 15: PWMD0L = 0X00;
   847  06C0  0199               	clrf	25	;volatile
   848                           
   849                           ;PWM.c: 18: PWMD1L = 0X00;
   850  06C1  019A               	clrf	26	;volatile
   851                           
   852                           ;PWM.c: 19: PWMD01H = 0X00;
   853  06C2  019E               	clrf	30	;volatile
   854                           
   855                           ;PWM.c: 22: PWMD2L = 0X00;
   856  06C3  1683               	bsf	3,5	;RP0=1, select bank1
   857  06C4  019B               	clrf	27	;volatile
   858                           
   859                           ;PWM.c: 24: PWMD23H = 0X00;
   860  06C5  019E               	clrf	30	;volatile
   861                           
   862                           ;PWM.c: 26: PWMD4L = 0X00;
   863  06C6  1283               	bcf	3,5	;RP0=0, select bank0
   864  06C7  019B               	clrf	27	;volatile
   865                           
   866                           ;PWM.c: 42: PWMCON0 = 0X17;
   867  06C8  3017               	movlw	23
   868  06C9  0095               	movwf	21	;volatile
   869                           
   870                           ;PWM.c: 43: PWMCON2 =0X00;
   871  06CA  019D               	clrf	29	;volatile
   872  06CB  0008               	return
   873  06CC                     __end_of_PWM_Init:	
   874                           
   875                           	psect	text2
   876  0742                     __ptext2:	
   877 ;; *************** function _Led_Gpio_Init *****************
   878 ;; Defined at:
   879 ;;		line 76 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_double_key\LED_188.c"
   880 ;; Parameters:    Size  Location     Type
   881 ;;		None
   882 ;; Auto vars:     Size  Location     Type
   883 ;;		None
   884 ;; Return value:  Size  Location     Type
   885 ;;                  1    wreg      void 
   886 ;; Registers used:
   887 ;;		None
   888 ;; Tracked objects:
   889 ;;		On entry : 100/100
   890 ;;		On exit  : 100/0
   891 ;;		Unchanged: 0/0
   892 ;; Data sizes:     COMMON   BANK0   BANK1
   893 ;;      Params:         0       0       0
   894 ;;      Locals:         0       0       0
   895 ;;      Temps:          0       0       0
   896 ;;      Totals:         0       0       0
   897 ;;Total ram usage:        0 bytes
   898 ;; Hardware stack levels used:    1
   899 ;; Hardware stack levels required when called:    3
   900 ;; This function calls:
   901 ;;		Nothing
   902 ;; This function is called by:
   903 ;;		_main
   904 ;; This function uses a non-reentrant model
   905 ;;
   906                           
   907                           
   908                           ;psect for function _Led_Gpio_Init
   909  0742                     _Led_Gpio_Init:	
   910                           
   911                           ;LED_188.c: 78: TRISB0 = 1;;
   912                           
   913                           ;incstack = 0
   914                           ; Regs used in _Led_Gpio_Init: []
   915  0742  1283               	bcf	3,5	;RP0=0, select bank0
   916                           
   917                           ;LED_188.c: 79: TRISB1 = 1;;
   918                           
   919                           ;LED_188.c: 80: TRISB2 = 1;;
   920                           
   921                           ;LED_188.c: 81: TRISB3 = 1;;
   922                           
   923                           ;LED_188.c: 82: TRISB4 = 1;;
   924  0743  2F28               	ljmp	PL12	;call to abstracted procedure
   925  0744                     __end_of_Led_Gpio_Init:	
   926                           
   927                           	psect	text3
   928  0525                     __ptext3:	
   929 ;; *************** function _Init_System *****************
   930 ;; Defined at:
   931 ;;		line 130 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_double_key\SC8F072_Pwm_Demo.c"
   932 ;; Parameters:    Size  Location     Type
   933 ;;		None
   934 ;; Auto vars:     Size  Location     Type
   935 ;;		None
   936 ;; Return value:  Size  Location     Type
   937 ;;                  1    wreg      void 
   938 ;; Registers used:
   939 ;;		wreg, status,2
   940 ;; Tracked objects:
   941 ;;		On entry : B00/0
   942 ;;		On exit  : 100/100
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMMON   BANK0   BANK1
   945 ;;      Params:         0       0       0
   946 ;;      Locals:         0       0       0
   947 ;;      Temps:          0       0       0
   948 ;;      Totals:         0       0       0
   949 ;;Total ram usage:        0 bytes
   950 ;; Hardware stack levels used:    1
   951 ;; Hardware stack levels required when called:    3
   952 ;; This function calls:
   953 ;;		Nothing
   954 ;; This function is called by:
   955 ;;		_main
   956 ;; This function uses a non-reentrant model
   957 ;;
   958                           
   959                           
   960                           ;psect for function _Init_System
   961  0525                     _Init_System:	
   962                           
   963                           ;incstack = 0
   964                           ; Regs used in _Init_System: [wreg+status,2]
   965  0525  0000               	nop	;# 
   966  0526  0064               	clrwdt	;# 
   967                           
   968                           ;SC8F072_Pwm_Demo.c: 134: INTCON = 0;
   969  0527  018B               	clrf	11	;volatile
   970                           
   971                           ;SC8F072_Pwm_Demo.c: 135: OSCCON = 0X72;
   972  0528  3072               	movlw	114
   973  0529  1283               	bcf	3,5	;RP0=0, select bank0
   974  052A  0094               	movwf	20	;volatile
   975                           
   976                           ;SC8F072_Pwm_Demo.c: 136: OPTION_REG = 0B00000101;
   977  052B  3005               	movlw	5
   978  052C  0081               	movwf	1	;volatile
   979  052D  0064               	clrwdt	;# 
   980                           
   981                           ;SC8F072_Pwm_Demo.c: 139: WPUA = 0B00000000;
   982  052E  1683               	bsf	3,5	;RP0=1, select bank1
   983  052F  0188               	clrf	8	;volatile
   984                           
   985                           ;SC8F072_Pwm_Demo.c: 140: WPUB = 0B00000000;
   986  0530  1283               	bcf	3,5	;RP0=0, select bank0
   987  0531  0188               	clrf	8	;volatile
   988                           
   989                           ;SC8F072_Pwm_Demo.c: 141: WPDA = 0B00000000;
   990  0532  1683               	bsf	3,5	;RP0=1, select bank1
   991  0533  0187               	clrf	7	;volatile
   992                           
   993                           ;SC8F072_Pwm_Demo.c: 142: WPDB = 0B00000000;
   994  0534  1283               	bcf	3,5	;RP0=0, select bank0
   995  0535  0187               	clrf	7	;volatile
   996                           
   997                           ;SC8F072_Pwm_Demo.c: 143: TRISA = 0B00000000;
   998  0536  1683               	bsf	3,5	;RP0=1, select bank1
   999  0537  0185               	clrf	5	;volatile
  1000                           
  1001                           ;SC8F072_Pwm_Demo.c: 144: TRISB = 0B00000000;
  1002  0538  1283               	bcf	3,5	;RP0=0, select bank0
  1003  0539  0185               	clrf	5	;volatile
  1004                           
  1005                           ;SC8F072_Pwm_Demo.c: 145: PORTA = 0B00000000;
  1006  053A  1683               	bsf	3,5	;RP0=1, select bank1
  1007  053B  0186               	clrf	6	;volatile
  1008                           
  1009                           ;SC8F072_Pwm_Demo.c: 146: PORTB = 0B00000000;
  1010  053C  1283               	bcf	3,5	;RP0=0, select bank0
  1011  053D  0186               	clrf	6	;volatile
  1012                           
  1013                           ;SC8F072_Pwm_Demo.c: 148: TMR0 = 6;
  1014  053E  3006               	movlw	6
  1015  053F  1683               	bsf	3,5	;RP0=1, select bank1
  1016  0540  0081               	movwf	1	;volatile
  1017                           
  1018                           ;SC8F072_Pwm_Demo.c: 149: T0IF = 0;
  1019  0541  110B               	bcf	11,2	;volatile
  1020                           
  1021                           ;SC8F072_Pwm_Demo.c: 150: T0IE = 1;
  1022  0542  168B               	bsf	11,5	;volatile
  1023                           
  1024                           ;SC8F072_Pwm_Demo.c: 151: GIE = 1;
  1025  0543  178B               	bsf	11,7	;volatile
  1026                           
  1027                           ;SC8F072_Pwm_Demo.c: 154: PR2 = 249;
  1028  0544  30F9               	movlw	249
  1029  0545  1283               	bcf	3,5	;RP0=0, select bank0
  1030  0546  0091               	movwf	17	;volatile
  1031                           
  1032                           ;SC8F072_Pwm_Demo.c: 155: TMR2IF = 0;
  1033  0547  108D               	bcf	13,1	;volatile
  1034                           
  1035                           ;SC8F072_Pwm_Demo.c: 156: TMR2IE = 1;
  1036  0548  148E               	bsf	14,1	;volatile
  1037                           
  1038                           ;SC8F072_Pwm_Demo.c: 157: T2CON = 0B00000111;
  1039  0549  3007               	movlw	7
  1040  054A  0093               	movwf	19	;volatile
  1041                           
  1042                           ;SC8F072_Pwm_Demo.c: 161: WPUB = 0B00100000;
  1043  054B  3020               	movlw	32
  1044  054C  0088               	movwf	8	;volatile
  1045                           
  1046                           ;SC8F072_Pwm_Demo.c: 162: TRISB= 0B00100000;
  1047  054D  0085               	movwf	5	;volatile
  1048                           
  1049                           ;SC8F072_Pwm_Demo.c: 163: IOCB = 0B00100000;
  1050  054E  0089               	movwf	9	;volatile
  1051                           
  1052                           ;SC8F072_Pwm_Demo.c: 164: RBIE = 1;
  1053  054F  158B               	bsf	11,3	;volatile
  1054                           
  1055                           ;SC8F072_Pwm_Demo.c: 166: PORTB;
  1056  0550  0806               	movf	6,w	;volatile
  1057                           
  1058                           ;SC8F072_Pwm_Demo.c: 169: WPUA = 0B00101000;
  1059  0551  3028               	movlw	40
  1060  0552  1683               	bsf	3,5	;RP0=1, select bank1
  1061  0553  0088               	movwf	8	;volatile
  1062                           
  1063                           ;SC8F072_Pwm_Demo.c: 170: TRISA= 0B00101000;
  1064  0554  0085               	movwf	5	;volatile
  1065                           
  1066                           ;SC8F072_Pwm_Demo.c: 171: IOCA = 0B00101000;
  1067  0555  0089               	movwf	9	;volatile
  1068                           
  1069                           ;SC8F072_Pwm_Demo.c: 172: RAIE = 1;
  1070  0556  1283               	bcf	3,5	;RP0=0, select bank0
  1071  0557  158E               	bsf	14,3	;volatile
  1072                           
  1073                           ;SC8F072_Pwm_Demo.c: 174: RAIF = 0;
  1074  0558  118D               	bcf	13,3	;volatile
  1075                           
  1076                           ;SC8F072_Pwm_Demo.c: 175: PORTA;
  1077  0559  1683               	bsf	3,5	;RP0=1, select bank1
  1078  055A  0806               	movf	6,w	;volatile
  1079                           
  1080                           ;SC8F072_Pwm_Demo.c: 176: INTCON = 0xE8;
  1081  055B  30E8               	movlw	232
  1082  055C  008B               	movwf	11	;volatile
  1083  055D  0008               	return
  1084  055E                     __end_of_Init_System:	
  1085                           
  1086                           	psect	text4
  1087  003E                     __ptext4:	
  1088 ;; *************** function _Button_response *****************
  1089 ;; Defined at:
  1090 ;;		line 50 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_double_key\KEY.c"
  1091 ;; Parameters:    Size  Location     Type
  1092 ;;		None
  1093 ;; Auto vars:     Size  Location     Type
  1094 ;;		None
  1095 ;; Return value:  Size  Location     Type
  1096 ;;                  1    wreg      void 
  1097 ;; Registers used:
  1098 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1099 ;; Tracked objects:
  1100 ;;		On entry : 0/0
  1101 ;;		On exit  : 0/0
  1102 ;;		Unchanged: 0/0
  1103 ;; Data sizes:     COMMON   BANK0   BANK1
  1104 ;;      Params:         0       0       0
  1105 ;;      Locals:         0       0       0
  1106 ;;      Temps:          0       0       0
  1107 ;;      Totals:         0       0       0
  1108 ;;Total ram usage:        0 bytes
  1109 ;; Hardware stack levels used:    1
  1110 ;; Hardware stack levels required when called:    5
  1111 ;; This function calls:
  1112 ;;		_Motor_num
  1113 ;;		_Set_PWM
  1114 ;;		___awmod
  1115 ;; This function is called by:
  1116 ;;		_main
  1117 ;; This function uses a non-reentrant model
  1118 ;;
  1119                           
  1120                           
  1121                           ;psect for function _Button_response
  1122  003E                     _Button_response:	
  1123                           
  1124                           ;KEY.c: 52: if (button_sflag)
  1125                           
  1126                           ;incstack = 0
  1127                           ; Regs used in _Button_response: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1128  003E  1283               	bcf	3,5	;RP0=0, select bank0
  1129  003F  0865               	movf	_button_sflag,w
  1130  0040  1903               	btfsc	3,2
  1131  0041  2887               	goto	l4525
  1132                           
  1133                           ;KEY.c: 53: {
  1134                           ;KEY.c: 54: button_sflag = 0;
  1135  0042  01E5               	clrf	_button_sflag
  1136                           
  1137                           ;KEY.c: 55: TRISA4 = 0;
  1138  0043  1683               	bsf	3,5	;RP0=1, select bank1
  1139  0044  1205               	bcf	5,4	;volatile
  1140                           
  1141                           ;KEY.c: 57: switch (pwm_duty)
  1142  0045  286E               	goto	l4515
  1143  0046                     l4503:	
  1144                           
  1145                           ;KEY.c: 60: Set_PWM(4, duty_steps[pwm_duty]);
  1146  0046  086A               	movf	_pwm_duty,w
  1147  0047  3E01               	addlw	low ((_duty_steps-__stringbase)| (0+32768))
  1148  0048  0084               	movwf	4
  1149  0049  2700               	fcall	stringdir
  1150  004A  00AD               	movwf	Set_PWM@duty
  1151  004B  3004               	movlw	4
  1152  004C  255E               	fcall	_Set_PWM
  1153                           
  1154                           ;KEY.c: 61: break;
  1155  004D  287A               	goto	l4517
  1156  004E                     l4505:	
  1157                           
  1158                           ;KEY.c: 63: Set_PWM(4, duty_steps[pwm_duty]);
  1159  004E  086A               	movf	_pwm_duty,w
  1160  004F  3E01               	addlw	low ((_duty_steps-__stringbase)| (0+32768))
  1161  0050  0084               	movwf	4
  1162  0051  2700               	fcall	stringdir
  1163  0052  00AD               	movwf	Set_PWM@duty
  1164  0053  3004               	movlw	4
  1165  0054  255E               	fcall	_Set_PWM
  1166                           
  1167                           ;KEY.c: 64: break;
  1168  0055  287A               	goto	l4517
  1169  0056                     l4507:	
  1170                           
  1171                           ;KEY.c: 66: Set_PWM(4, duty_steps[pwm_duty]);
  1172  0056  086A               	movf	_pwm_duty,w
  1173  0057  3E01               	addlw	low ((_duty_steps-__stringbase)| (0+32768))
  1174  0058  0084               	movwf	4
  1175  0059  2700               	fcall	stringdir
  1176  005A  00AD               	movwf	Set_PWM@duty
  1177  005B  3004               	movlw	4
  1178  005C  255E               	fcall	_Set_PWM
  1179                           
  1180                           ;KEY.c: 67: break;
  1181  005D  287A               	goto	l4517
  1182  005E                     l4509:	
  1183                           
  1184                           ;KEY.c: 69: Set_PWM(4, duty_steps[pwm_duty]);
  1185  005E  086A               	movf	_pwm_duty,w
  1186  005F  3E01               	addlw	low ((_duty_steps-__stringbase)| (0+32768))
  1187  0060  0084               	movwf	4
  1188  0061  2700               	fcall	stringdir
  1189  0062  00AD               	movwf	Set_PWM@duty
  1190  0063  3004               	movlw	4
  1191  0064  255E               	fcall	_Set_PWM
  1192                           
  1193                           ;KEY.c: 70: break;
  1194  0065  287A               	goto	l4517
  1195  0066                     l4511:	
  1196                           
  1197                           ;KEY.c: 72: Set_PWM(4, duty_steps[pwm_duty]);
  1198  0066  086A               	movf	_pwm_duty,w
  1199  0067  3E01               	addlw	low ((_duty_steps-__stringbase)| (0+32768))
  1200  0068  0084               	movwf	4
  1201  0069  2700               	fcall	stringdir
  1202  006A  00AD               	movwf	Set_PWM@duty
  1203  006B  3004               	movlw	4
  1204  006C  255E               	fcall	_Set_PWM
  1205                           
  1206                           ;KEY.c: 74: break;
  1207  006D  287A               	goto	l4517
  1208  006E                     l4515:	
  1209  006E  1283               	bcf	3,5	;RP0=0, select bank0
  1210  006F  086A               	movf	_pwm_duty,w
  1211                           
  1212                           ; Switch size 1, requested type "space"
  1213                           ; Number of cases is 5, Range of values is 0 to 4
  1214                           ; switch strategies available:
  1215                           ; Name         Instructions Cycles
  1216                           ; direct_byte           11     6 (fixed)
  1217                           ; simple_byte           16     9 (average)
  1218                           ; jumptable            260     6 (fixed)
  1219                           ;	Chosen strategy is direct_byte
  1220  0070  0084               	movwf	4
  1221  0071  3005               	movlw	5
  1222  0072  0204               	subwf	4,w
  1223  0073  1803               	skipnc
  1224  0074  287A               	goto	l4517
  1225  0075  3007               	movlw	high S4841
  1226  0076  008A               	movwf	10
  1227  0077  302E               	movlw	low S4841
  1228  0078  0704               	addwf	4,w
  1229  0079  0082               	movwf	2
  1230  007A                     l4517:	
  1231                           
  1232                           ;KEY.c: 78: Time_delay=2500;
  1233  007A  30C4               	movlw	196
  1234  007B  1683               	bsf	3,5	;RP0=1, select bank1
  1235  007C  00B1               	movwf	_Time_delay^(0+128)
  1236  007D  3009               	movlw	9
  1237  007E  00B2               	movwf	(_Time_delay^(0+128)+1)
  1238                           
  1239                           ;KEY.c: 79: Motor_num();
  1240  007F  2720               	fcall	_Motor_num
  1241                           
  1242                           ;KEY.c: 80: pwm_duty = (unsigned char)((pwm_duty + 1) % 5);
  1243  0080  086A               	movf	_pwm_duty,w
  1244  0081  2125               	fcall	PL4	;call to abstracted procedure
  1245  0082  24E8               	fcall	___awmod
  1246  0083  0820               	movf	?___awmod,w
  1247  0084  00EA               	movwf	_pwm_duty
  1248                           
  1249                           ;KEY.c: 81: T_flag=1;
  1250  0085  01E3               	clrf	_T_flag
  1251  0086  0AE3               	incf	_T_flag,f
  1252  0087                     l4525:	
  1253                           
  1254                           ;KEY.c: 82: }
  1255                           ;KEY.c: 83: if (button_lflag)
  1256  0087  0864               	movf	_button_lflag,w
  1257  0088  1903               	btfsc	3,2
  1258  0089  28AC               	goto	l4541
  1259  008A  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1260                           
  1261                           ;KEY.c: 84: {
  1262                           ;KEY.c: 85: button_lflag = 0;
  1263  008B  01E4               	clrf	_button_lflag
  1264                           
  1265                           ;KEY.c: 86: Set_PWM(0, duty_steps[5]);
  1266  008C  0084               	movwf	4
  1267  008D  2700               	fcall	stringdir
  1268  008E  00AD               	movwf	Set_PWM@duty
  1269  008F  3000               	movlw	0
  1270  0090  255E               	fcall	_Set_PWM
  1271                           
  1272                           ;KEY.c: 87: Set_PWM(1, duty_steps[5]);
  1273  0091  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1274  0092  0084               	movwf	4
  1275  0093  2700               	fcall	stringdir
  1276  0094  1283               	bcf	3,5	;RP0=0, select bank0
  1277  0095  00AD               	movwf	Set_PWM@duty
  1278  0096  3001               	movlw	1
  1279  0097  255E               	fcall	_Set_PWM
  1280                           
  1281                           ;KEY.c: 88: Set_PWM(2, duty_steps[5]);
  1282  0098  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1283  0099  0084               	movwf	4
  1284  009A  2700               	fcall	stringdir
  1285  009B  1283               	bcf	3,5	;RP0=0, select bank0
  1286  009C  00AD               	movwf	Set_PWM@duty
  1287  009D  3002               	movlw	2
  1288  009E  255E               	fcall	_Set_PWM
  1289                           
  1290                           ;KEY.c: 89: Set_PWM(4, duty_steps[5]);
  1291  009F  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1292  00A0  0084               	movwf	4
  1293  00A1  2700               	fcall	stringdir
  1294  00A2  1283               	bcf	3,5	;RP0=0, select bank0
  1295  00A3  00AD               	movwf	Set_PWM@duty
  1296  00A4  3004               	movlw	4
  1297  00A5  255E               	fcall	_Set_PWM
  1298                           
  1299                           ;KEY.c: 90: pwm_duty =0;
  1300                           
  1301                           ;KEY.c: 91: TRISA = 0B00111111;
  1302                           
  1303                           ;KEY.c: 92: TRISB = 0B00111111;
  1304                           
  1305                           ;KEY.c: 93: T_flag=0;
  1306  00A6  212E               	fcall	PL6	;call to abstracted procedure
  1307  00A7  0064               	clrwdt	;# 
  1308  00A8  0063               	sleep	;# 
  1309  00A9  0000               	nop	;# 
  1310  00AA  0000               	nop	;# 
  1311  00AB  0064               	clrwdt	;# 
  1312  00AC                     l4541:	
  1313                           
  1314                           ;KEY.c: 101: }
  1315                           ;KEY.c: 102: if(LED_sflag)
  1316  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  1317  00AD  0861               	movf	_LED_sflag,w
  1318  00AE  1903               	btfsc	3,2
  1319  00AF  28FF               	goto	l4573
  1320                           
  1321                           ;KEY.c: 103: {
  1322                           ;KEY.c: 104: LED_sflag=0;
  1323  00B0  01E1               	clrf	_LED_sflag
  1324                           
  1325                           ;KEY.c: 105: TRISA0 = 0;
  1326  00B1  1683               	bsf	3,5	;RP0=1, select bank1
  1327  00B2  1005               	bcf	5,0	;volatile
  1328                           
  1329                           ;KEY.c: 106: TRISA1 = 0;
  1330  00B3  1085               	bcf	5,1	;volatile
  1331                           
  1332                           ;KEY.c: 107: TRISA2 = 0;
  1333  00B4  1105               	bcf	5,2	;volatile
  1334                           
  1335                           ;KEY.c: 108: switch (LED_num)
  1336  00B5  28ED               	goto	l4569
  1337  00B6                     l4551:	
  1338                           
  1339                           ;KEY.c: 113: Set_PWM(0,95);
  1340  00B6  305F               	movlw	95
  1341  00B7  00AD               	movwf	Set_PWM@duty
  1342  00B8  3000               	movlw	0
  1343  00B9  255E               	fcall	_Set_PWM
  1344                           
  1345                           ;KEY.c: 114: Set_PWM(1,95);
  1346  00BA  2137               	fcall	PL20	;call to abstracted procedure
  1347  00BB  255E               	fcall	_Set_PWM
  1348  00BC  3002               	movlw	2
  1349                           
  1350                           ;KEY.c: 115: Set_PWM(2,0);
  1351  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  1352  00BE  01AD               	clrf	Set_PWM@duty
  1353  00BF  255E               	fcall	_Set_PWM
  1354                           
  1355                           ;KEY.c: 116: break;
  1356  00C0  28F9               	goto	l4571
  1357  00C1                     l4553:	
  1358  00C1  3000               	movlw	0
  1359                           
  1360                           ;KEY.c: 120: Set_PWM(0,0);
  1361  00C2  01AD               	clrf	Set_PWM@duty
  1362  00C3  255E               	fcall	_Set_PWM
  1363                           
  1364                           ;KEY.c: 121: Set_PWM(1,95);
  1365  00C4  2137               	fcall	PL20	;call to abstracted procedure
  1366  00C5  255E               	fcall	_Set_PWM
  1367                           
  1368                           ;KEY.c: 122: Set_PWM(2,95);
  1369  00C6  213B               	fcall	PL22	;call to abstracted procedure
  1370  00C7  255E               	fcall	_Set_PWM
  1371                           
  1372                           ;KEY.c: 123: break;
  1373  00C8  28F9               	goto	l4571
  1374  00C9                     l4555:	
  1375                           
  1376                           ;KEY.c: 126: Set_PWM(0,95);
  1377  00C9  305F               	movlw	95
  1378  00CA  00AD               	movwf	Set_PWM@duty
  1379  00CB  3000               	movlw	0
  1380  00CC  255E               	fcall	_Set_PWM
  1381  00CD  3001               	movlw	1
  1382                           
  1383                           ;KEY.c: 127: Set_PWM(1,0);
  1384  00CE  1283               	bcf	3,5	;RP0=0, select bank0
  1385  00CF  01AD               	clrf	Set_PWM@duty
  1386  00D0  255E               	fcall	_Set_PWM
  1387                           
  1388                           ;KEY.c: 128: Set_PWM(2,95);
  1389  00D1  213B               	fcall	PL22	;call to abstracted procedure
  1390  00D2  255E               	fcall	_Set_PWM
  1391                           
  1392                           ;KEY.c: 129: break;
  1393  00D3  28F9               	goto	l4571
  1394  00D4                     l4557:	
  1395                           
  1396                           ;KEY.c: 131: Set_PWM(0,95);
  1397  00D4  305F               	movlw	95
  1398  00D5  00AD               	movwf	Set_PWM@duty
  1399  00D6  3000               	movlw	0
  1400  00D7  255E               	fcall	_Set_PWM
  1401                           
  1402                           ;KEY.c: 132: Set_PWM(1,95);
  1403  00D8  2137               	fcall	PL20	;call to abstracted procedure
  1404  00D9  255E               	fcall	_Set_PWM
  1405                           
  1406                           ;KEY.c: 133: Set_PWM(2,95);
  1407  00DA  213B               	fcall	PL22	;call to abstracted procedure
  1408  00DB  255E               	fcall	_Set_PWM
  1409                           
  1410                           ;KEY.c: 135: break;
  1411  00DC  28F9               	goto	l4571
  1412  00DD                     l4559:	
  1413  00DD  3000               	movlw	0
  1414                           
  1415                           ;KEY.c: 138: Set_PWM(0, 0);
  1416  00DE  01AD               	clrf	Set_PWM@duty
  1417  00DF  255E               	fcall	_Set_PWM
  1418  00E0  3001               	movlw	1
  1419                           
  1420                           ;KEY.c: 139: Set_PWM(1, 0);
  1421  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  1422  00E2  01AD               	clrf	Set_PWM@duty
  1423  00E3  255E               	fcall	_Set_PWM
  1424  00E4  3002               	movlw	2
  1425                           
  1426                           ;KEY.c: 140: Set_PWM(2, 0);
  1427  00E5  1283               	bcf	3,5	;RP0=0, select bank0
  1428  00E6  01AD               	clrf	Set_PWM@duty
  1429  00E7  255E               	fcall	_Set_PWM
  1430                           
  1431                           ;KEY.c: 141: TRISA0 = 1;
  1432  00E8  1683               	bsf	3,5	;RP0=1, select bank1
  1433  00E9  1405               	bsf	5,0	;volatile
  1434                           
  1435                           ;KEY.c: 142: TRISA1 = 1;
  1436  00EA  1485               	bsf	5,1	;volatile
  1437                           
  1438                           ;KEY.c: 143: TRISA2 = 1;
  1439  00EB  1505               	bsf	5,2	;volatile
  1440                           
  1441                           ;KEY.c: 144: break;
  1442  00EC  28F9               	goto	l4571
  1443  00ED                     l4569:	
  1444  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  1445  00EE  0869               	movf	_LED_num,w
  1446                           
  1447                           ; Switch size 1, requested type "space"
  1448                           ; Number of cases is 5, Range of values is 0 to 4
  1449                           ; switch strategies available:
  1450                           ; Name         Instructions Cycles
  1451                           ; direct_byte           11     6 (fixed)
  1452                           ; simple_byte           16     9 (average)
  1453                           ; jumptable            260     6 (fixed)
  1454                           ;	Chosen strategy is direct_byte
  1455  00EF  0084               	movwf	4
  1456  00F0  3005               	movlw	5
  1457  00F1  0204               	subwf	4,w
  1458  00F2  1803               	skipnc
  1459  00F3  28F9               	goto	l4571
  1460  00F4  3007               	movlw	high S4843
  1461  00F5  008A               	movwf	10
  1462  00F6  3033               	movlw	low S4843
  1463  00F7  0704               	addwf	4,w
  1464  00F8  0082               	movwf	2
  1465  00F9                     l4571:	
  1466                           
  1467                           ;KEY.c: 148: LED_num=(unsigned char)((LED_num+1)%5);
  1468  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  1469  00FA  0869               	movf	_LED_num,w
  1470  00FB  2125               	fcall	PL4	;call to abstracted procedure
  1471  00FC  24E8               	fcall	___awmod
  1472  00FD  0820               	movf	?___awmod,w
  1473  00FE  00E9               	movwf	_LED_num
  1474  00FF                     l4573:	
  1475                           
  1476                           ;KEY.c: 149: }
  1477                           ;KEY.c: 150: if (LED_lflag)
  1478  00FF  0862               	movf	_LED_lflag,w
  1479  0100  1903               	btfsc	3,2
  1480  0101  0008               	return
  1481  0102  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1482                           
  1483                           ;KEY.c: 151: {
  1484                           ;KEY.c: 152: LED_lflag = 0;
  1485  0103  01E2               	clrf	_LED_lflag
  1486                           
  1487                           ;KEY.c: 153: Set_PWM(0, duty_steps[5]);
  1488  0104  0084               	movwf	4
  1489  0105  2700               	fcall	stringdir
  1490  0106  00AD               	movwf	Set_PWM@duty
  1491  0107  3000               	movlw	0
  1492  0108  255E               	fcall	_Set_PWM
  1493                           
  1494                           ;KEY.c: 154: Set_PWM(1, duty_steps[5]);
  1495  0109  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1496  010A  0084               	movwf	4
  1497  010B  2700               	fcall	stringdir
  1498  010C  1283               	bcf	3,5	;RP0=0, select bank0
  1499  010D  00AD               	movwf	Set_PWM@duty
  1500  010E  3001               	movlw	1
  1501  010F  255E               	fcall	_Set_PWM
  1502                           
  1503                           ;KEY.c: 155: Set_PWM(2, duty_steps[5]);
  1504  0110  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1505  0111  0084               	movwf	4
  1506  0112  2700               	fcall	stringdir
  1507  0113  1283               	bcf	3,5	;RP0=0, select bank0
  1508  0114  00AD               	movwf	Set_PWM@duty
  1509  0115  3002               	movlw	2
  1510  0116  255E               	fcall	_Set_PWM
  1511                           
  1512                           ;KEY.c: 156: Set_PWM(4, duty_steps[5]);
  1513  0117  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1514  0118  0084               	movwf	4
  1515  0119  2700               	fcall	stringdir
  1516  011A  1283               	bcf	3,5	;RP0=0, select bank0
  1517  011B  00AD               	movwf	Set_PWM@duty
  1518  011C  3004               	movlw	4
  1519  011D  255E               	fcall	_Set_PWM
  1520                           
  1521                           ;KEY.c: 157: pwm_duty =0;
  1522                           
  1523                           ;KEY.c: 158: TRISA = 0B00111111;
  1524                           
  1525                           ;KEY.c: 159: TRISB = 0B00111111;
  1526                           
  1527                           ;KEY.c: 160: T_flag=0;
  1528  011E  212E               	fcall	PL6	;call to abstracted procedure
  1529  011F  0064               	clrwdt	;# 
  1530  0120  0063               	sleep	;# 
  1531  0121  0000               	nop	;# 
  1532  0122  0000               	nop	;# 
  1533  0123  0064               	clrwdt	;# 
  1534  0124  0008               	return
  1535  0125                     __end_of_Button_response:	
  1536  0125                     PL4:	
  1537  0125  00A2               	movwf	___awmod@dividend
  1538  0126  01A3               	clrf	___awmod@dividend+1
  1539  0127  0AA2               	incf	___awmod@dividend,f
  1540  0128  1903               	skipnz
  1541  0129  0AA3               	incf	___awmod@dividend+1,f
  1542  012A  3005               	movlw	5
  1543  012B  00A0               	movwf	___awmod@divisor
  1544  012C  01A1               	clrf	___awmod@divisor+1
  1545  012D  0008               	return
  1546  012E                     __end_ofPL4:	
  1547  012E                     PL6:	
  1548  012E  303F               	movlw	63
  1549  012F  1283               	bcf	3,5	;RP0=0, select bank0
  1550  0130  01EA               	clrf	_pwm_duty
  1551  0131  1683               	bsf	3,5	;RP0=1, select bank1
  1552  0132  0085               	movwf	5	;volatile
  1553  0133  1283               	bcf	3,5	;RP0=0, select bank0
  1554  0134  0085               	movwf	5	;volatile
  1555  0135  01E3               	clrf	_T_flag
  1556  0136  0008               	return
  1557  0137                     __end_ofPL6:	
  1558  0137                     PL20:	
  1559  0137  305F               	movlw	95
  1560  0138  1283               	bcf	3,5	;RP0=0, select bank0
  1561  0139  00AD               	movwf	Set_PWM@duty
  1562  013A  3401               	retlw	1
  1563  013B                     __end_ofPL20:	
  1564  013B                     PL22:	
  1565  013B  305F               	movlw	95
  1566  013C  1283               	bcf	3,5	;RP0=0, select bank0
  1567  013D  00AD               	movwf	Set_PWM@duty
  1568  013E  3402               	retlw	2
  1569  013F                     __end_ofPL22:	
  1570                           
  1571                           	psect	swtext1
  1572  072E                     __pswtext1:	
  1573  072E                     S4841:	
  1574  072E  2846               	ljmp	l4503
  1575  072F  284E               	ljmp	l4505
  1576  0730  2856               	ljmp	l4507
  1577  0731  285E               	ljmp	l4509
  1578  0732  2866               	ljmp	l4511
  1579                           
  1580                           	psect	swtext2
  1581  0733                     __pswtext2:	
  1582  0733                     S4843:	
  1583  0733  28B6               	ljmp	l4551
  1584  0734  28C1               	ljmp	l4553
  1585  0735  28C9               	ljmp	l4555
  1586  0736  28D4               	ljmp	l4557
  1587  0737  28DD               	ljmp	l4559
  1588                           
  1589                           	psect	text5
  1590  04E8                     __ptext5:	
  1591 ;; *************** function ___awmod *****************
  1592 ;; Defined at:
  1593 ;;		line 6 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\awmod.c"
  1594 ;; Parameters:    Size  Location     Type
  1595 ;;  divisor         2    0[BANK0 ] int 
  1596 ;;  dividend        2    2[BANK0 ] int 
  1597 ;; Auto vars:     Size  Location     Type
  1598 ;;  sign            1    5[BANK0 ] unsigned char 
  1599 ;;  counter         1    4[BANK0 ] unsigned char 
  1600 ;; Return value:  Size  Location     Type
  1601 ;;                  2    0[BANK0 ] int 
  1602 ;; Registers used:
  1603 ;;		wreg, status,2, status,0
  1604 ;; Tracked objects:
  1605 ;;		On entry : 100/0
  1606 ;;		On exit  : 100/0
  1607 ;;		Unchanged: 0/0
  1608 ;; Data sizes:     COMMON   BANK0   BANK1
  1609 ;;      Params:         0       4       0
  1610 ;;      Locals:         0       2       0
  1611 ;;      Temps:          0       0       0
  1612 ;;      Totals:         0       6       0
  1613 ;;Total ram usage:        6 bytes
  1614 ;; Hardware stack levels used:    1
  1615 ;; Hardware stack levels required when called:    3
  1616 ;; This function calls:
  1617 ;;		Nothing
  1618 ;; This function is called by:
  1619 ;;		_Button_response
  1620 ;; This function uses a non-reentrant model
  1621 ;;
  1622                           
  1623                           
  1624                           ;psect for function ___awmod
  1625  04E8                     ___awmod:	
  1626                           
  1627                           ;incstack = 0
  1628                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1629  04E8  01A5               	clrf	___awmod@sign
  1630  04E9  1FA3               	btfss	___awmod@dividend+1,7
  1631  04EA  2CF2               	goto	l4199
  1632  04EB  09A2               	comf	___awmod@dividend,f
  1633  04EC  09A3               	comf	___awmod@dividend+1,f
  1634  04ED  0AA2               	incf	___awmod@dividend,f
  1635  04EE  1903               	skipnz
  1636  04EF  0AA3               	incf	___awmod@dividend+1,f
  1637  04F0  01A5               	clrf	___awmod@sign
  1638  04F1  0AA5               	incf	___awmod@sign,f
  1639  04F2                     l4199:	
  1640  04F2  1FA1               	btfss	___awmod@divisor+1,7
  1641  04F3  2CF9               	goto	l4203
  1642  04F4  09A0               	comf	___awmod@divisor,f
  1643  04F5  09A1               	comf	___awmod@divisor+1,f
  1644  04F6  0AA0               	incf	___awmod@divisor,f
  1645  04F7  1903               	skipnz
  1646  04F8  0AA1               	incf	___awmod@divisor+1,f
  1647  04F9                     l4203:	
  1648  04F9  0820               	movf	___awmod@divisor,w
  1649  04FA  0421               	iorwf	___awmod@divisor+1,w
  1650  04FB  1903               	btfsc	3,2
  1651  04FC  2D18               	goto	l4219
  1652  04FD  01A4               	clrf	___awmod@counter
  1653  04FE                     L1:	
  1654  04FE  0AA4               	incf	___awmod@counter,f
  1655  04FF  1BA1               	btfsc	___awmod@divisor+1,7
  1656  0500  2D05               	goto	l4211
  1657  0501  1003               	clrc
  1658  0502  0DA0               	rlf	___awmod@divisor,f
  1659  0503  0DA1               	rlf	___awmod@divisor+1,f
  1660  0504  2CFE               	goto	L1
  1661  0505                     l4211:	
  1662  0505  0821               	movf	___awmod@divisor+1,w
  1663  0506  0223               	subwf	___awmod@dividend+1,w
  1664  0507  1D03               	skipz
  1665  0508  2D0B               	goto	u1735
  1666  0509  0820               	movf	___awmod@divisor,w
  1667  050A  0222               	subwf	___awmod@dividend,w
  1668  050B                     u1735:	
  1669  050B  1C03               	skipc
  1670  050C  2D14               	goto	L2
  1671  050D  0820               	movf	___awmod@divisor,w
  1672  050E  02A2               	subwf	___awmod@dividend,f
  1673  050F  0821               	movf	___awmod@divisor+1,w
  1674  0510  1C03               	skipc
  1675  0511  03A3               	decf	___awmod@dividend+1,f
  1676  0512  02A3               	subwf	___awmod@dividend+1,f
  1677  0513  1003               	clrc
  1678  0514                     L2:	
  1679  0514  0CA1               	rrf	___awmod@divisor+1,f
  1680  0515  0CA0               	rrf	___awmod@divisor,f
  1681  0516  0BA4               	decfsz	___awmod@counter,f
  1682  0517  2D05               	goto	l4211
  1683  0518                     l4219:	
  1684  0518  0825               	movf	___awmod@sign,w
  1685  0519  1903               	btfsc	3,2
  1686  051A  2D20               	goto	l4223
  1687  051B  09A2               	comf	___awmod@dividend,f
  1688  051C  09A3               	comf	___awmod@dividend+1,f
  1689  051D  0AA2               	incf	___awmod@dividend,f
  1690  051E  1903               	skipnz
  1691  051F  0AA3               	incf	___awmod@dividend+1,f
  1692  0520                     l4223:	
  1693  0520  0823               	movf	___awmod@dividend+1,w
  1694  0521  00A1               	movwf	?___awmod+1
  1695  0522  0822               	movf	___awmod@dividend,w
  1696  0523  00A0               	movwf	?___awmod
  1697  0524  0008               	return
  1698  0525                     __end_of___awmod:	
  1699                           
  1700                           	psect	text6
  1701  055E                     __ptext6:	
  1702 ;; *************** function _Set_PWM *****************
  1703 ;; Defined at:
  1704 ;;		line 55 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_double_key\PWM.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;  channel         1    wreg     unsigned char 
  1707 ;;  duty            1   13[BANK0 ] unsigned char 
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;  channel         1   14[BANK0 ] unsigned char 
  1710 ;;  pulse_width     2   15[BANK0 ] unsigned short 
  1711 ;; Return value:  Size  Location     Type
  1712 ;;                  1    wreg      void 
  1713 ;; Registers used:
  1714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1715 ;; Tracked objects:
  1716 ;;		On entry : 100/0
  1717 ;;		On exit  : 0/0
  1718 ;;		Unchanged: 0/0
  1719 ;; Data sizes:     COMMON   BANK0   BANK1
  1720 ;;      Params:         0       1       0
  1721 ;;      Locals:         0       3       0
  1722 ;;      Temps:          0       0       0
  1723 ;;      Totals:         0       4       0
  1724 ;;Total ram usage:        4 bytes
  1725 ;; Hardware stack levels used:    1
  1726 ;; Hardware stack levels required when called:    4
  1727 ;; This function calls:
  1728 ;;		___lwdiv
  1729 ;;		___wmul
  1730 ;; This function is called by:
  1731 ;;		_Button_response
  1732 ;; This function uses a non-reentrant model
  1733 ;;
  1734                           
  1735                           
  1736                           ;psect for function _Set_PWM
  1737  055E                     _Set_PWM:	
  1738                           
  1739                           ;incstack = 0
  1740                           ; Regs used in _Set_PWM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1741                           ;Set_PWM@channel stored from wreg
  1742  055E  00AE               	movwf	Set_PWM@channel
  1743                           
  1744                           ;PWM.c: 57: unsigned short pulse_width = (unsigned short)(duty * 255) / 100;
  1745  055F  3064               	movlw	100
  1746  0560  00A6               	movwf	___lwdiv@divisor
  1747  0561  01A7               	clrf	___lwdiv@divisor+1
  1748  0562  082D               	movf	Set_PWM@duty,w
  1749  0563  00A0               	movwf	___wmul@multiplier
  1750  0564  30FF               	movlw	255
  1751  0565  01A1               	clrf	___wmul@multiplier+1
  1752  0566  00A2               	movwf	___wmul@multiplicand
  1753  0567  01A3               	clrf	___wmul@multiplicand+1
  1754  0568  269D               	fcall	___wmul
  1755  0569  0821               	movf	?___wmul+1,w
  1756  056A  00A9               	movwf	___lwdiv@dividend+1
  1757  056B  0820               	movf	?___wmul,w
  1758  056C  00A8               	movwf	___lwdiv@dividend
  1759  056D  2590               	fcall	___lwdiv
  1760  056E  0827               	movf	?___lwdiv+1,w
  1761  056F  00B0               	movwf	Set_PWM@pulse_width+1
  1762  0570  0826               	movf	?___lwdiv,w
  1763  0571  00AF               	movwf	Set_PWM@pulse_width
  1764                           
  1765                           ;PWM.c: 58: switch (channel)
  1766  0572  2D84               	goto	l4185
  1767  0573                     l4173:	
  1768                           
  1769                           ;PWM.c: 61: PWMD0L = pulse_width & 0xFF;
  1770  0573  082F               	movf	Set_PWM@pulse_width,w
  1771  0574  0099               	movwf	25	;volatile
  1772                           
  1773                           ;PWM.c: 63: break;
  1774  0575  0008               	return
  1775  0576                     l4175:	
  1776                           
  1777                           ;PWM.c: 65: PWMD1L = pulse_width & 0xFF;
  1778  0576  082F               	movf	Set_PWM@pulse_width,w
  1779  0577  009A               	movwf	26	;volatile
  1780                           
  1781                           ;PWM.c: 67: break;
  1782  0578  0008               	return
  1783  0579                     l4177:	
  1784                           
  1785                           ;PWM.c: 69: PWMD2L = pulse_width & 0xFF;
  1786  0579  082F               	movf	Set_PWM@pulse_width,w
  1787  057A  1683               	bsf	3,5	;RP0=1, select bank1
  1788  057B  009B               	movwf	27	;volatile
  1789                           
  1790                           ;PWM.c: 71: break;
  1791  057C  0008               	return
  1792  057D                     l4179:	
  1793                           
  1794                           ;PWM.c: 73: PWMD3L = pulse_width & 0xFF;
  1795  057D  082F               	movf	Set_PWM@pulse_width,w
  1796  057E  1683               	bsf	3,5	;RP0=1, select bank1
  1797  057F  009C               	movwf	28	;volatile
  1798                           
  1799                           ;PWM.c: 75: break;
  1800  0580  0008               	return
  1801  0581                     l4181:	
  1802                           
  1803                           ;PWM.c: 77: PWMD4L = pulse_width & 0xFF;
  1804  0581  082F               	movf	Set_PWM@pulse_width,w
  1805  0582  009B               	movwf	27	;volatile
  1806                           
  1807                           ;PWM.c: 79: break;
  1808  0583  0008               	return
  1809  0584                     l4185:	
  1810  0584  082E               	movf	Set_PWM@channel,w
  1811                           
  1812                           ; Switch size 1, requested type "space"
  1813                           ; Number of cases is 5, Range of values is 0 to 4
  1814                           ; switch strategies available:
  1815                           ; Name         Instructions Cycles
  1816                           ; direct_byte           11     6 (fixed)
  1817                           ; simple_byte           16     9 (average)
  1818                           ; jumptable            260     6 (fixed)
  1819                           ;	Chosen strategy is direct_byte
  1820  0585  0084               	movwf	4
  1821  0586  3005               	movlw	5
  1822  0587  0204               	subwf	4,w
  1823  0588  1803               	skipnc
  1824  0589  0008               	return
  1825  058A  3007               	movlw	high S4845
  1826  058B  008A               	movwf	10
  1827  058C  3038               	movlw	low S4845
  1828  058D  0704               	addwf	4,w
  1829  058E  0082               	movwf	2
  1830  058F  0008               	return
  1831  0590                     __end_of_Set_PWM:	
  1832                           
  1833                           	psect	swtext3
  1834  0738                     __pswtext3:	
  1835  0738                     S4845:	
  1836  0738  2D73               	ljmp	l4173
  1837  0739  2D76               	ljmp	l4175
  1838  073A  2D79               	ljmp	l4177
  1839  073B  2D7D               	ljmp	l4179
  1840  073C  2D81               	ljmp	l4181
  1841                           
  1842                           	psect	text7
  1843  069D                     __ptext7:	
  1844 ;; *************** function ___wmul *****************
  1845 ;; Defined at:
  1846 ;;		line 15 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\Umul16.c"
  1847 ;; Parameters:    Size  Location     Type
  1848 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1849 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;  product         2    4[BANK0 ] unsigned int 
  1852 ;; Return value:  Size  Location     Type
  1853 ;;                  2    0[BANK0 ] unsigned int 
  1854 ;; Registers used:
  1855 ;;		wreg, status,2, status,0
  1856 ;; Tracked objects:
  1857 ;;		On entry : 100/0
  1858 ;;		On exit  : 100/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMMON   BANK0   BANK1
  1861 ;;      Params:         0       4       0
  1862 ;;      Locals:         0       2       0
  1863 ;;      Temps:          0       0       0
  1864 ;;      Totals:         0       6       0
  1865 ;;Total ram usage:        6 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:    3
  1868 ;; This function calls:
  1869 ;;		Nothing
  1870 ;; This function is called by:
  1871 ;;		_Set_PWM
  1872 ;; This function uses a non-reentrant model
  1873 ;;
  1874                           
  1875                           
  1876                           ;psect for function ___wmul
  1877  069D                     ___wmul:	
  1878                           
  1879                           ;incstack = 0
  1880                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1881  069D  01A4               	clrf	___wmul@product
  1882  069E  01A5               	clrf	___wmul@product+1
  1883  069F                     l3947:	
  1884  069F  1C20               	btfss	___wmul@multiplier,0
  1885  06A0  2EA7               	goto	l3951
  1886  06A1  0822               	movf	___wmul@multiplicand,w
  1887  06A2  07A4               	addwf	___wmul@product,f
  1888  06A3  1803               	skipnc
  1889  06A4  0AA5               	incf	___wmul@product+1,f
  1890  06A5  0823               	movf	___wmul@multiplicand+1,w
  1891  06A6  07A5               	addwf	___wmul@product+1,f
  1892  06A7                     l3951:	
  1893  06A7  1003               	clrc
  1894  06A8  0DA2               	rlf	___wmul@multiplicand,f
  1895  06A9  0DA3               	rlf	___wmul@multiplicand+1,f
  1896  06AA  1003               	clrc
  1897  06AB  0CA1               	rrf	___wmul@multiplier+1,f
  1898  06AC  0CA0               	rrf	___wmul@multiplier,f
  1899  06AD  0820               	movf	___wmul@multiplier,w
  1900  06AE  0421               	iorwf	___wmul@multiplier+1,w
  1901  06AF  1D03               	btfss	3,2
  1902  06B0  2E9F               	goto	l3947
  1903  06B1  0825               	movf	___wmul@product+1,w
  1904  06B2  00A1               	movwf	?___wmul+1
  1905  06B3  0824               	movf	___wmul@product,w
  1906  06B4  00A0               	movwf	?___wmul
  1907  06B5  0008               	return
  1908  06B6                     __end_of___wmul:	
  1909                           
  1910                           	psect	text8
  1911  0590                     __ptext8:	
  1912 ;; *************** function ___lwdiv *****************
  1913 ;; Defined at:
  1914 ;;		line 6 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\lwdiv.c"
  1915 ;; Parameters:    Size  Location     Type
  1916 ;;  divisor         2    6[BANK0 ] unsigned int 
  1917 ;;  dividend        2    8[BANK0 ] unsigned int 
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;  quotient        2   10[BANK0 ] unsigned int 
  1920 ;;  counter         1   12[BANK0 ] unsigned char 
  1921 ;; Return value:  Size  Location     Type
  1922 ;;                  2    6[BANK0 ] unsigned int 
  1923 ;; Registers used:
  1924 ;;		wreg, status,2, status,0
  1925 ;; Tracked objects:
  1926 ;;		On entry : 100/0
  1927 ;;		On exit  : 100/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMMON   BANK0   BANK1
  1930 ;;      Params:         0       4       0
  1931 ;;      Locals:         0       3       0
  1932 ;;      Temps:          0       0       0
  1933 ;;      Totals:         0       7       0
  1934 ;;Total ram usage:        7 bytes
  1935 ;; Hardware stack levels used:    1
  1936 ;; Hardware stack levels required when called:    3
  1937 ;; This function calls:
  1938 ;;		Nothing
  1939 ;; This function is called by:
  1940 ;;		_Set_PWM
  1941 ;; This function uses a non-reentrant model
  1942 ;;
  1943                           
  1944                           
  1945                           ;psect for function ___lwdiv
  1946  0590                     ___lwdiv:	
  1947                           
  1948                           ;incstack = 0
  1949                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1950  0590  01AA               	clrf	___lwdiv@quotient
  1951  0591  01AB               	clrf	___lwdiv@quotient+1
  1952  0592  0826               	movf	___lwdiv@divisor,w
  1953  0593  0427               	iorwf	___lwdiv@divisor+1,w
  1954  0594  1903               	btfsc	3,2
  1955  0595  2DB5               	goto	l4007
  1956  0596  01AC               	clrf	___lwdiv@counter
  1957  0597                     L3:	
  1958  0597  0AAC               	incf	___lwdiv@counter,f
  1959  0598  1BA7               	btfsc	___lwdiv@divisor+1,7
  1960  0599  2D9E               	goto	l3995
  1961  059A  1003               	clrc
  1962  059B  0DA6               	rlf	___lwdiv@divisor,f
  1963  059C  0DA7               	rlf	___lwdiv@divisor+1,f
  1964  059D  2D97               	goto	L3
  1965  059E                     l3995:	
  1966  059E  1003               	clrc
  1967  059F  0DAA               	rlf	___lwdiv@quotient,f
  1968  05A0  0DAB               	rlf	___lwdiv@quotient+1,f
  1969  05A1  0827               	movf	___lwdiv@divisor+1,w
  1970  05A2  0229               	subwf	___lwdiv@dividend+1,w
  1971  05A3  1D03               	skipz
  1972  05A4  2DA7               	goto	u1345
  1973  05A5  0826               	movf	___lwdiv@divisor,w
  1974  05A6  0228               	subwf	___lwdiv@dividend,w
  1975  05A7                     u1345:	
  1976  05A7  1C03               	skipc
  1977  05A8  2DB1               	goto	L4
  1978  05A9  0826               	movf	___lwdiv@divisor,w
  1979  05AA  02A8               	subwf	___lwdiv@dividend,f
  1980  05AB  0827               	movf	___lwdiv@divisor+1,w
  1981  05AC  1C03               	skipc
  1982  05AD  03A9               	decf	___lwdiv@dividend+1,f
  1983  05AE  02A9               	subwf	___lwdiv@dividend+1,f
  1984  05AF  142A               	bsf	___lwdiv@quotient,0
  1985  05B0  1003               	clrc
  1986  05B1                     L4:	
  1987  05B1  0CA7               	rrf	___lwdiv@divisor+1,f
  1988  05B2  0CA6               	rrf	___lwdiv@divisor,f
  1989  05B3  0BAC               	decfsz	___lwdiv@counter,f
  1990  05B4  2D9E               	goto	l3995
  1991  05B5                     l4007:	
  1992  05B5  082B               	movf	___lwdiv@quotient+1,w
  1993  05B6  00A7               	movwf	?___lwdiv+1
  1994  05B7  082A               	movf	___lwdiv@quotient,w
  1995  05B8  00A6               	movwf	?___lwdiv
  1996  05B9  0008               	return
  1997  05BA                     __end_of___lwdiv:	
  1998                           
  1999                           	psect	text9
  2000  0720                     __ptext9:	
  2001 ;; *************** function _Motor_num *****************
  2002 ;; Defined at:
  2003 ;;		line 39 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_double_key\LED_188.c"
  2004 ;; Parameters:    Size  Location     Type
  2005 ;;		None
  2006 ;; Auto vars:     Size  Location     Type
  2007 ;;		None
  2008 ;; Return value:  Size  Location     Type
  2009 ;;                  1    wreg      void 
  2010 ;; Registers used:
  2011 ;;		wreg, status,2, status,0
  2012 ;; Tracked objects:
  2013 ;;		On entry : 100/100
  2014 ;;		On exit  : 100/0
  2015 ;;		Unchanged: 0/0
  2016 ;; Data sizes:     COMMON   BANK0   BANK1
  2017 ;;      Params:         0       0       0
  2018 ;;      Locals:         0       0       0
  2019 ;;      Temps:          0       0       0
  2020 ;;      Totals:         0       0       0
  2021 ;;Total ram usage:        0 bytes
  2022 ;; Hardware stack levels used:    1
  2023 ;; Hardware stack levels required when called:    3
  2024 ;; This function calls:
  2025 ;;		Nothing
  2026 ;; This function is called by:
  2027 ;;		_Button_response
  2028 ;; This function uses a non-reentrant model
  2029 ;;
  2030                           
  2031                           
  2032                           ;psect for function _Motor_num
  2033  0720                     _Motor_num:	
  2034                           
  2035                           ;LED_188.c: 41: hundreds =0;
  2036                           
  2037                           ;incstack = 0
  2038                           ; Regs used in _Motor_num: [wreg+status,2+status,0]
  2039  0720  1283               	bcf	3,5	;RP0=0, select bank0
  2040  0721  01EE               	clrf	_hundreds
  2041                           
  2042                           ;LED_188.c: 42: tens = 0;
  2043  0722  01FD               	clrf	_tens
  2044                           
  2045                           ;LED_188.c: 43: unit = (unsigned char)(pwm_duty+1) ;
  2046  0723  086A               	movf	_pwm_duty,w
  2047  0724  3E01               	addlw	1
  2048  0725  00ED               	movwf	_unit
  2049  0726  0008               	return
  2050  0727                     __end_of_Motor_num:	
  2051                           
  2052                           	psect	text10
  2053  03E7                     __ptext10:	
  2054 ;; *************** function _ADC_read *****************
  2055 ;; Defined at:
  2056 ;;		line 259 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_double_key\SC8F072_Pwm_Demo.c"
  2057 ;; Parameters:    Size  Location     Type
  2058 ;;		None
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;  power_temp      4   52[BANK0 ] volatile unsigned long 
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  1    wreg      unsigned char 
  2063 ;; Registers used:
  2064 ;;		wreg, status,2, status,0, pclath, cstack
  2065 ;; Tracked objects:
  2066 ;;		On entry : 100/0
  2067 ;;		On exit  : 100/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMMON   BANK0   BANK1
  2070 ;;      Params:         0       0       0
  2071 ;;      Locals:         0       4       0
  2072 ;;      Temps:          0       1       0
  2073 ;;      Totals:         0       5       0
  2074 ;;Total ram usage:        5 bytes
  2075 ;; Hardware stack levels used:    1
  2076 ;; Hardware stack levels required when called:    5
  2077 ;; This function calls:
  2078 ;;		_ADC_Sample
  2079 ;;		___ftadd
  2080 ;;		___ftdiv
  2081 ;;		___fttol
  2082 ;;		___lwtoft
  2083 ;; This function is called by:
  2084 ;;		_main
  2085 ;; This function uses a non-reentrant model
  2086 ;;
  2087                           
  2088                           
  2089                           ;psect for function _ADC_read
  2090  03E7                     _ADC_read:	
  2091                           
  2092                           ;incstack = 0
  2093                           ; Regs used in _ADC_read: [wreg+status,2+status,0+pclath+cstack]
  2094  03E7  301F               	movlw	31
  2095                           
  2096                           ;SC8F072_Pwm_Demo.c: 261: test_adc = ADC_Sample(31, 0);
  2097  03E8  01A0               	clrf	ADC_Sample@adldo
  2098  03E9  213F               	fcall	_ADC_Sample
  2099  03EA  00E8               	movwf	_test_adc	;volatile
  2100                           
  2101                           ;SC8F072_Pwm_Demo.c: 262: if (0xA5 == test_adc)
  2102  03EB  30A5               	movlw	165
  2103  03EC  0668               	xorwf	_test_adc,w	;volatile
  2104  03ED  1D03               	btfss	3,2
  2105  03EE  2C36               	goto	l4609
  2106                           
  2107                           ;SC8F072_Pwm_Demo.c: 263: {
  2108                           ;SC8F072_Pwm_Demo.c: 264: volatile unsigned long power_temp;
  2109                           ;SC8F072_Pwm_Demo.c: 265: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
  2110  03EF  3096               	movlw	150
  2111  03F0  01BA               	clrf	___ftdiv@f1
  2112  03F1  00BB               	movwf	___ftdiv@f1+1
  2113  03F2  304A               	movlw	74
  2114  03F3  00BC               	movwf	___ftdiv@f1+2
  2115  03F4  086C               	movf	_adresult+1,w	;volatile
  2116  03F5  00A9               	movwf	___lwtoft@c+1
  2117  03F6  086B               	movf	_adresult,w	;volatile
  2118  03F7  00A8               	movwf	___lwtoft@c
  2119  03F8  26DE               	fcall	___lwtoft
  2120  03F9  0828               	movf	?___lwtoft,w
  2121  03FA  00B7               	movwf	___ftdiv@f2
  2122  03FB  0829               	movf	?___lwtoft+1,w
  2123  03FC  00B8               	movwf	___ftdiv@f2+1
  2124  03FD  082A               	movf	?___lwtoft+2,w
  2125  03FE  00B9               	movwf	___ftdiv@f2+2
  2126  03FF  2381               	fcall	___ftdiv
  2127  0400  2442               	fcall	PL10	;call to abstracted procedure
  2128  0401  2449               	fcall	___fttol
  2129  0402  0849               	movf	?___fttol+3,w
  2130  0403  00D7               	movwf	ADC_read@power_temp+3	;volatile
  2131  0404  0848               	movf	?___fttol+2,w
  2132  0405  00D6               	movwf	ADC_read@power_temp+2	;volatile
  2133  0406  0847               	movf	?___fttol+1,w
  2134  0407  00D5               	movwf	ADC_read@power_temp+1	;volatile
  2135  0408  0846               	movf	?___fttol,w
  2136  0409  00D4               	movwf	ADC_read@power_temp	;volatile
  2137                           
  2138                           ;SC8F072_Pwm_Demo.c: 266: power_ad = (unsigned int)(power_temp);
  2139  040A  0855               	movf	ADC_read@power_temp+1,w	;volatile
  2140  040B  00DF               	movwf	_power_ad+1	;volatile
  2141  040C  0854               	movf	ADC_read@power_temp,w	;volatile
  2142  040D  00DE               	movwf	_power_ad	;volatile
  2143                           
  2144                           ;SC8F072_Pwm_Demo.c: 267: power_percent = (unsigned char)((power_ad-(1000UL*2.8))/(10UL*
      +                          1.4));
  2145  040E  085F               	movf	_power_ad+1,w	;volatile
  2146  040F  00A9               	movwf	___lwtoft@c+1
  2147  0410  085E               	movf	_power_ad,w	;volatile
  2148  0411  00A8               	movwf	___lwtoft@c
  2149  0412  26DE               	fcall	___lwtoft
  2150  0413  0828               	movf	?___lwtoft,w
  2151  0414  00AE               	movwf	___ftadd@f2
  2152  0415  0829               	movf	?___lwtoft+1,w
  2153  0416  00AF               	movwf	___ftadd@f2+1
  2154  0417  082A               	movf	?___lwtoft+2,w
  2155  0418  00B0               	movwf	___ftadd@f2+2
  2156  0419  302F               	movlw	47
  2157  041A  01AB               	clrf	___ftadd@f1
  2158  041B  00AC               	movwf	___ftadd@f1+1
  2159  041C  30C5               	movlw	197
  2160  041D  00AD               	movwf	___ftadd@f1+2
  2161  041E  222C               	fcall	___ftadd
  2162  041F  082B               	movf	?___ftadd,w
  2163  0420  00BA               	movwf	___ftdiv@f1
  2164  0421  082C               	movf	?___ftadd+1,w
  2165  0422  00BB               	movwf	___ftdiv@f1+1
  2166  0423  082D               	movf	?___ftadd+2,w
  2167  0424  00BC               	movwf	___ftdiv@f1+2
  2168  0425  3060               	movlw	96
  2169  0426  01B7               	clrf	___ftdiv@f2
  2170  0427  00B8               	movwf	___ftdiv@f2+1
  2171  0428  3041               	movlw	65
  2172  0429  00B9               	movwf	___ftdiv@f2+2
  2173  042A  2381               	fcall	___ftdiv
  2174  042B  2442               	fcall	PL10	;call to abstracted procedure
  2175  042C  2449               	fcall	___fttol
  2176  042D  0846               	movf	?___fttol,w
  2177  042E  00E7               	movwf	_power_percent	;volatile
  2178                           
  2179                           ;SC8F072_Pwm_Demo.c: 268: if(power_percent>100)
  2180  042F  3065               	movlw	101
  2181  0430  0267               	subwf	_power_percent,w	;volatile
  2182  0431  1C03               	skipc
  2183  0432  2C3F               	goto	l4613
  2184                           
  2185                           ;SC8F072_Pwm_Demo.c: 269: {
  2186                           ;SC8F072_Pwm_Demo.c: 270: power_percent=100;
  2187  0433  3064               	movlw	100
  2188  0434  00E7               	movwf	_power_percent	;volatile
  2189  0435  2C3F               	goto	l4613
  2190  0436                     l4609:	
  2191                           
  2192                           ;SC8F072_Pwm_Demo.c: 273: else
  2193                           ;SC8F072_Pwm_Demo.c: 274: {
  2194                           ;SC8F072_Pwm_Demo.c: 275: ADCON0 = 0;
  2195  0436  1683               	bsf	3,5	;RP0=1, select bank1
  2196  0437  0195               	clrf	21	;volatile
  2197                           
  2198                           ;SC8F072_Pwm_Demo.c: 276: ADCON1 = 0;
  2199  0438  0196               	clrf	22	;volatile
  2200                           
  2201                           ;SC8F072_Pwm_Demo.c: 277: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2202  0439  3084               	movlw	132
  2203  043A  1283               	bcf	3,5	;RP0=0, select bank0
  2204  043B  00D3               	movwf	??_ADC_read
  2205  043C                     u2437:	
  2206  043C  0BD3               	decfsz	??_ADC_read,f
  2207  043D  2C3C               	goto	u2437
  2208  043E  2C3F               	nop2
  2209  043F                     l4613:	
  2210                           
  2211                           ;SC8F072_Pwm_Demo.c: 278: }
  2212                           ;SC8F072_Pwm_Demo.c: 279: ADC_Flag=0;
  2213  043F  1283               	bcf	3,5	;RP0=0, select bank0
  2214  0440  01E6               	clrf	_ADC_Flag
  2215  0441  0008               	return
  2216  0442                     __end_of_ADC_read:	
  2217  0442                     PL10:	
  2218  0442  0837               	movf	?___ftdiv,w
  2219  0443  00C6               	movwf	___fttol@f1
  2220  0444  0838               	movf	?___ftdiv+1,w
  2221  0445  00C7               	movwf	___fttol@f1+1
  2222  0446  0839               	movf	?___ftdiv+2,w
  2223  0447  00C8               	movwf	___fttol@f1+2
  2224  0448  0008               	return
  2225  0449                     __end_ofPL10:	
  2226                           
  2227                           	psect	text11
  2228  06DE                     __ptext11:	
  2229 ;; *************** function ___lwtoft *****************
  2230 ;; Defined at:
  2231 ;;		line 28 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\lwtoft.c"
  2232 ;; Parameters:    Size  Location     Type
  2233 ;;  c               2    8[BANK0 ] unsigned int 
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;		None
  2236 ;; Return value:  Size  Location     Type
  2237 ;;                  3    8[BANK0 ] float 
  2238 ;; Registers used:
  2239 ;;		wreg, status,2, status,0, pclath, cstack
  2240 ;; Tracked objects:
  2241 ;;		On entry : 100/0
  2242 ;;		On exit  : 100/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMMON   BANK0   BANK1
  2245 ;;      Params:         0       3       0
  2246 ;;      Locals:         0       0       0
  2247 ;;      Temps:          0       0       0
  2248 ;;      Totals:         0       3       0
  2249 ;;Total ram usage:        3 bytes
  2250 ;; Hardware stack levels used:    1
  2251 ;; Hardware stack levels required when called:    4
  2252 ;; This function calls:
  2253 ;;		___ftpack
  2254 ;; This function is called by:
  2255 ;;		_ADC_read
  2256 ;; This function uses a non-reentrant model
  2257 ;;
  2258                           
  2259                           
  2260                           ;psect for function ___lwtoft
  2261  06DE                     ___lwtoft:	
  2262                           
  2263                           ;incstack = 0
  2264                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  2265  06DE  0828               	movf	___lwtoft@c,w
  2266  06DF  00A0               	movwf	___ftpack@arg
  2267  06E0  0829               	movf	___lwtoft@c+1,w
  2268  06E1  00A1               	movwf	___ftpack@arg+1
  2269  06E2  308E               	movlw	142
  2270  06E3  01A2               	clrf	___ftpack@arg+2
  2271  06E4  00A3               	movwf	___ftpack@exp
  2272  06E5  01A4               	clrf	___ftpack@sign
  2273  06E6  24A7               	fcall	___ftpack
  2274  06E7  0820               	movf	?___ftpack,w
  2275  06E8  00A8               	movwf	?___lwtoft
  2276  06E9  0821               	movf	?___ftpack+1,w
  2277  06EA  00A9               	movwf	?___lwtoft+1
  2278  06EB  0822               	movf	?___ftpack+2,w
  2279  06EC  00AA               	movwf	?___lwtoft+2
  2280  06ED  0008               	return
  2281  06EE                     __end_of___lwtoft:	
  2282                           
  2283                           	psect	text12
  2284  0449                     __ptext12:	
  2285 ;; *************** function ___fttol *****************
  2286 ;; Defined at:
  2287 ;;		line 44 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\fttol.c"
  2288 ;; Parameters:    Size  Location     Type
  2289 ;;  f1              3   38[BANK0 ] float 
  2290 ;; Auto vars:     Size  Location     Type
  2291 ;;  lval            4   46[BANK0 ] unsigned long 
  2292 ;;  exp1            1   50[BANK0 ] unsigned char 
  2293 ;;  sign1           1   45[BANK0 ] unsigned char 
  2294 ;; Return value:  Size  Location     Type
  2295 ;;                  4   38[BANK0 ] long 
  2296 ;; Registers used:
  2297 ;;		wreg, status,2, status,0
  2298 ;; Tracked objects:
  2299 ;;		On entry : 100/0
  2300 ;;		On exit  : 100/0
  2301 ;;		Unchanged: 0/0
  2302 ;; Data sizes:     COMMON   BANK0   BANK1
  2303 ;;      Params:         0       4       0
  2304 ;;      Locals:         0       6       0
  2305 ;;      Temps:          0       3       0
  2306 ;;      Totals:         0      13       0
  2307 ;;Total ram usage:       13 bytes
  2308 ;; Hardware stack levels used:    1
  2309 ;; Hardware stack levels required when called:    3
  2310 ;; This function calls:
  2311 ;;		Nothing
  2312 ;; This function is called by:
  2313 ;;		_ADC_read
  2314 ;; This function uses a non-reentrant model
  2315 ;;
  2316                           
  2317                           
  2318                           ;psect for function ___fttol
  2319  0449                     ___fttol:	
  2320                           
  2321                           ;incstack = 0
  2322                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2323  0449  24A0               	fcall	PL14	;call to abstracted procedure
  2324  044A  1003               	clrc
  2325  044B  0D4B               	rlf	??___fttol+1,w
  2326  044C  0D4C               	rlf	??___fttol+2,w
  2327  044D  00D2               	movwf	___fttol@exp1
  2328  044E  0852               	movf	___fttol@exp1,w
  2329  044F  1D03               	btfss	3,2
  2330  0450  2C56               	goto	l4347
  2331  0451                     l4345:	
  2332  0451  01C6               	clrf	?___fttol
  2333  0452  01C7               	clrf	?___fttol+1
  2334  0453  01C8               	clrf	?___fttol+2
  2335  0454  01C9               	clrf	?___fttol+3
  2336  0455  0008               	return
  2337  0456                     l4347:	
  2338  0456  24A0               	fcall	PL14	;call to abstracted procedure
  2339  0457  3017               	movlw	23
  2340  0458                     u2015:	
  2341  0458  1003               	clrc
  2342  0459  0CCC               	rrf	??___fttol+2,f
  2343  045A  0CCB               	rrf	??___fttol+1,f
  2344  045B  0CCA               	rrf	??___fttol,f
  2345  045C  3EFF               	addlw	-1
  2346  045D  1D03               	skipz
  2347  045E  2C58               	goto	u2015
  2348  045F  084A               	movf	??___fttol,w
  2349  0460  00CD               	movwf	___fttol@sign1
  2350  0461  17C7               	bsf	___fttol@f1+1,7
  2351  0462  01C8               	clrf	___fttol@f1+2
  2352  0463  0846               	movf	___fttol@f1,w
  2353  0464  00CE               	movwf	___fttol@lval
  2354  0465  0847               	movf	___fttol@f1+1,w
  2355  0466  00CF               	movwf	___fttol@lval+1
  2356  0467  0848               	movf	___fttol@f1+2,w
  2357  0468  00D0               	movwf	___fttol@lval+2
  2358  0469  308E               	movlw	142
  2359  046A  01D1               	clrf	___fttol@lval+3
  2360  046B  02D2               	subwf	___fttol@exp1,f
  2361  046C  1FD2               	btfss	___fttol@exp1,7
  2362  046D  2C7B               	goto	l4367
  2363  046E  0852               	movf	___fttol@exp1,w
  2364  046F  3A80               	xorlw	128
  2365  0470  3E8F               	addlw	143
  2366  0471  1C03               	btfss	3,0
  2367  0472  2C51               	goto	l4345
  2368  0473                     l4363:	
  2369  0473  1003               	clrc
  2370  0474  0CD1               	rrf	___fttol@lval+3,f
  2371  0475  0CD0               	rrf	___fttol@lval+2,f
  2372  0476  0CCF               	rrf	___fttol@lval+1,f
  2373  0477  0CCE               	rrf	___fttol@lval,f
  2374  0478  0FD2               	incfsz	___fttol@exp1,f
  2375  0479  2C73               	goto	l4363
  2376  047A  2C89               	goto	l4375
  2377  047B                     l4367:	
  2378  047B  3018               	movlw	24
  2379  047C  0252               	subwf	___fttol@exp1,w
  2380  047D  1803               	btfsc	3,0
  2381  047E  2C51               	goto	l4345
  2382  047F                     l4373:	
  2383  047F  0852               	movf	___fttol@exp1,w
  2384  0480  1903               	btfsc	3,2
  2385  0481  2C89               	goto	l4375
  2386  0482  1003               	clrc
  2387  0483  0DCE               	rlf	___fttol@lval,f
  2388  0484  0DCF               	rlf	___fttol@lval+1,f
  2389  0485  0DD0               	rlf	___fttol@lval+2,f
  2390  0486  0DD1               	rlf	___fttol@lval+3,f
  2391  0487  03D2               	decf	___fttol@exp1,f
  2392  0488  2C7F               	goto	l4373
  2393  0489                     l4375:	
  2394  0489  084D               	movf	___fttol@sign1,w
  2395  048A  1903               	btfsc	3,2
  2396  048B  2C97               	goto	l4379
  2397  048C  09CE               	comf	___fttol@lval,f
  2398  048D  09CF               	comf	___fttol@lval+1,f
  2399  048E  09D0               	comf	___fttol@lval+2,f
  2400  048F  09D1               	comf	___fttol@lval+3,f
  2401  0490  0ACE               	incf	___fttol@lval,f
  2402  0491  1903               	skipnz
  2403  0492  0ACF               	incf	___fttol@lval+1,f
  2404  0493  1903               	skipnz
  2405  0494  0AD0               	incf	___fttol@lval+2,f
  2406  0495  1903               	skipnz
  2407  0496  0AD1               	incf	___fttol@lval+3,f
  2408  0497                     l4379:	
  2409  0497  0851               	movf	___fttol@lval+3,w
  2410  0498  00C9               	movwf	?___fttol+3
  2411  0499  0850               	movf	___fttol@lval+2,w
  2412  049A  00C8               	movwf	?___fttol+2
  2413  049B  084F               	movf	___fttol@lval+1,w
  2414  049C  00C7               	movwf	?___fttol+1
  2415  049D  084E               	movf	___fttol@lval,w
  2416  049E  00C6               	movwf	?___fttol
  2417  049F  0008               	return
  2418  04A0                     __end_of___fttol:	
  2419  04A0                     PL14:	
  2420  04A0  0846               	movf	___fttol@f1,w
  2421  04A1  00CA               	movwf	??___fttol
  2422  04A2  0847               	movf	___fttol@f1+1,w
  2423  04A3  00CB               	movwf	??___fttol+1
  2424  04A4  0848               	movf	___fttol@f1+2,w
  2425  04A5  00CC               	movwf	??___fttol+2
  2426  04A6  0008               	return
  2427  04A7                     __end_ofPL14:	
  2428                           
  2429                           	psect	text13
  2430  0381                     __ptext13:	
  2431 ;; *************** function ___ftdiv *****************
  2432 ;; Defined at:
  2433 ;;		line 56 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\ftdiv.c"
  2434 ;; Parameters:    Size  Location     Type
  2435 ;;  f2              3   23[BANK0 ] float 
  2436 ;;  f1              3   26[BANK0 ] float 
  2437 ;; Auto vars:     Size  Location     Type
  2438 ;;  f3              3   33[BANK0 ] float 
  2439 ;;  sign            1   37[BANK0 ] unsigned char 
  2440 ;;  exp             1   36[BANK0 ] unsigned char 
  2441 ;;  cntr            1   32[BANK0 ] unsigned char 
  2442 ;; Return value:  Size  Location     Type
  2443 ;;                  3   23[BANK0 ] float 
  2444 ;; Registers used:
  2445 ;;		wreg, status,2, status,0, pclath, cstack
  2446 ;; Tracked objects:
  2447 ;;		On entry : 100/0
  2448 ;;		On exit  : 100/0
  2449 ;;		Unchanged: 0/0
  2450 ;; Data sizes:     COMMON   BANK0   BANK1
  2451 ;;      Params:         0       6       0
  2452 ;;      Locals:         0       6       0
  2453 ;;      Temps:          0       3       0
  2454 ;;      Totals:         0      15       0
  2455 ;;Total ram usage:       15 bytes
  2456 ;; Hardware stack levels used:    1
  2457 ;; Hardware stack levels required when called:    4
  2458 ;; This function calls:
  2459 ;;		___ftpack
  2460 ;; This function is called by:
  2461 ;;		_ADC_read
  2462 ;; This function uses a non-reentrant model
  2463 ;;
  2464                           
  2465                           
  2466                           ;psect for function ___ftdiv
  2467  0381                     ___ftdiv:	
  2468                           
  2469                           ;incstack = 0
  2470                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2471  0381  083A               	movf	___ftdiv@f1,w
  2472  0382  00BD               	movwf	??___ftdiv
  2473  0383  083B               	movf	___ftdiv@f1+1,w
  2474  0384  00BE               	movwf	??___ftdiv+1
  2475  0385  083C               	movf	___ftdiv@f1+2,w
  2476  0386  00BF               	movwf	??___ftdiv+2
  2477  0387  1003               	clrc
  2478  0388  0D3E               	rlf	??___ftdiv+1,w
  2479  0389  0D3F               	rlf	??___ftdiv+2,w
  2480  038A  00C4               	movwf	___ftdiv@exp
  2481  038B  0844               	movf	___ftdiv@exp,w
  2482  038C  1D03               	btfss	3,2
  2483  038D  2B8F               	goto	l4307
  2484  038E  2BE3               	ljmp	PL28	;call to abstracted procedure
  2485  038F                     l4307:	
  2486  038F  0837               	movf	___ftdiv@f2,w
  2487  0390  00BD               	movwf	??___ftdiv
  2488  0391  0838               	movf	___ftdiv@f2+1,w
  2489  0392  00BE               	movwf	??___ftdiv+1
  2490  0393  0839               	movf	___ftdiv@f2+2,w
  2491  0394  00BF               	movwf	??___ftdiv+2
  2492  0395  1003               	clrc
  2493  0396  0D3E               	rlf	??___ftdiv+1,w
  2494  0397  0D3F               	rlf	??___ftdiv+2,w
  2495  0398  00C5               	movwf	___ftdiv@sign
  2496  0399  0845               	movf	___ftdiv@sign,w
  2497  039A  1D03               	btfss	3,2
  2498  039B  2B9D               	goto	l2859
  2499  039C  2BE3               	ljmp	PL28	;call to abstracted procedure
  2500  039D                     l2859:	
  2501  039D  3089               	movlw	137
  2502  039E  01C1               	clrf	___ftdiv@f3
  2503  039F  01C2               	clrf	___ftdiv@f3+1
  2504  03A0  01C3               	clrf	___ftdiv@f3+2
  2505  03A1  0745               	addwf	___ftdiv@sign,w
  2506  03A2  00BD               	movwf	??___ftdiv
  2507  03A3  02C4               	subwf	___ftdiv@exp,f
  2508  03A4  083C               	movf	___ftdiv@f1+2,w
  2509  03A5  00C5               	movwf	___ftdiv@sign
  2510  03A6  0839               	movf	___ftdiv@f2+2,w
  2511  03A7  06C5               	xorwf	___ftdiv@sign,f
  2512  03A8  3080               	movlw	128
  2513  03A9  05C5               	andwf	___ftdiv@sign,f
  2514  03AA  3018               	movlw	24
  2515  03AB  17BB               	bsf	___ftdiv@f1+1,7
  2516  03AC  01BC               	clrf	___ftdiv@f1+2
  2517  03AD  17B8               	bsf	___ftdiv@f2+1,7
  2518  03AE  01B9               	clrf	___ftdiv@f2+2
  2519  03AF  00C0               	movwf	___ftdiv@cntr
  2520  03B0                     l4329:	
  2521  03B0  1003               	clrc
  2522  03B1  0DC1               	rlf	___ftdiv@f3,f
  2523  03B2  0DC2               	rlf	___ftdiv@f3+1,f
  2524  03B3  0DC3               	rlf	___ftdiv@f3+2,f
  2525  03B4  0839               	movf	___ftdiv@f2+2,w
  2526  03B5  023C               	subwf	___ftdiv@f1+2,w
  2527  03B6  1D03               	skipz
  2528  03B7  2BBE               	goto	u1985
  2529  03B8  0838               	movf	___ftdiv@f2+1,w
  2530  03B9  023B               	subwf	___ftdiv@f1+1,w
  2531  03BA  1D03               	skipz
  2532  03BB  2BBE               	goto	u1985
  2533  03BC  0837               	movf	___ftdiv@f2,w
  2534  03BD  023A               	subwf	___ftdiv@f1,w
  2535  03BE                     u1985:	
  2536  03BE  1C03               	skipc
  2537  03BF  2BCC               	goto	L5
  2538  03C0  0837               	movf	___ftdiv@f2,w
  2539  03C1  02BA               	subwf	___ftdiv@f1,f
  2540  03C2  0838               	movf	___ftdiv@f2+1,w
  2541  03C3  1C03               	skipc
  2542  03C4  0F38               	incfsz	___ftdiv@f2+1,w
  2543  03C5  02BB               	subwf	___ftdiv@f1+1,f
  2544  03C6  0839               	movf	___ftdiv@f2+2,w
  2545  03C7  1C03               	skipc
  2546  03C8  0A39               	incf	___ftdiv@f2+2,w
  2547  03C9  02BC               	subwf	___ftdiv@f1+2,f
  2548  03CA  1441               	bsf	___ftdiv@f3,0
  2549  03CB  1003               	clrc
  2550  03CC                     L5:	
  2551  03CC  0DBA               	rlf	___ftdiv@f1,f
  2552  03CD  0DBB               	rlf	___ftdiv@f1+1,f
  2553  03CE  0DBC               	rlf	___ftdiv@f1+2,f
  2554  03CF  0BC0               	decfsz	___ftdiv@cntr,f
  2555  03D0  2BB0               	goto	l4329
  2556  03D1  0841               	movf	___ftdiv@f3,w
  2557  03D2  00A0               	movwf	___ftpack@arg
  2558  03D3  0842               	movf	___ftdiv@f3+1,w
  2559  03D4  00A1               	movwf	___ftpack@arg+1
  2560  03D5  0843               	movf	___ftdiv@f3+2,w
  2561  03D6  00A2               	movwf	___ftpack@arg+2
  2562  03D7  0844               	movf	___ftdiv@exp,w
  2563  03D8  00A3               	movwf	___ftpack@exp
  2564  03D9  0845               	movf	___ftdiv@sign,w
  2565  03DA  00A4               	movwf	___ftpack@sign
  2566  03DB  24A7               	fcall	___ftpack
  2567  03DC  0820               	movf	?___ftpack,w
  2568  03DD  00B7               	movwf	?___ftdiv
  2569  03DE  0821               	movf	?___ftpack+1,w
  2570  03DF  00B8               	movwf	?___ftdiv+1
  2571  03E0  0822               	movf	?___ftpack+2,w
  2572  03E1  00B9               	movwf	?___ftdiv+2
  2573  03E2  0008               	return
  2574  03E3                     __end_of___ftdiv:	
  2575  03E3                     PL28:	
  2576  03E3  01B7               	clrf	?___ftdiv
  2577  03E4  01B8               	clrf	?___ftdiv+1
  2578  03E5  01B9               	clrf	?___ftdiv+2
  2579  03E6  0008               	return
  2580  03E7                     __end_ofPL28:	
  2581                           
  2582                           	psect	text14
  2583  022C                     __ptext14:	
  2584 ;; *************** function ___ftadd *****************
  2585 ;; Defined at:
  2586 ;;		line 86 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\ftadd.c"
  2587 ;; Parameters:    Size  Location     Type
  2588 ;;  f1              3   11[BANK0 ] float 
  2589 ;;  f2              3   14[BANK0 ] float 
  2590 ;; Auto vars:     Size  Location     Type
  2591 ;;  exp1            1   22[BANK0 ] unsigned char 
  2592 ;;  exp2            1   21[BANK0 ] unsigned char 
  2593 ;;  sign            1   20[BANK0 ] unsigned char 
  2594 ;; Return value:  Size  Location     Type
  2595 ;;                  3   11[BANK0 ] float 
  2596 ;; Registers used:
  2597 ;;		wreg, status,2, status,0, pclath, cstack
  2598 ;; Tracked objects:
  2599 ;;		On entry : 100/0
  2600 ;;		On exit  : 100/0
  2601 ;;		Unchanged: 0/0
  2602 ;; Data sizes:     COMMON   BANK0   BANK1
  2603 ;;      Params:         0       6       0
  2604 ;;      Locals:         0       3       0
  2605 ;;      Temps:          0       3       0
  2606 ;;      Totals:         0      12       0
  2607 ;;Total ram usage:       12 bytes
  2608 ;; Hardware stack levels used:    1
  2609 ;; Hardware stack levels required when called:    4
  2610 ;; This function calls:
  2611 ;;		___ftpack
  2612 ;; This function is called by:
  2613 ;;		_ADC_read
  2614 ;; This function uses a non-reentrant model
  2615 ;;
  2616                           
  2617                           
  2618                           ;psect for function ___ftadd
  2619  022C                     ___ftadd:	
  2620                           
  2621                           ;incstack = 0
  2622                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  2623  022C  082B               	movf	___ftadd@f1,w
  2624  022D  00B1               	movwf	??___ftadd
  2625  022E  082C               	movf	___ftadd@f1+1,w
  2626  022F  00B2               	movwf	??___ftadd+1
  2627  0230  082D               	movf	___ftadd@f1+2,w
  2628  0231  00B3               	movwf	??___ftadd+2
  2629  0232  1003               	clrc
  2630  0233  0D32               	rlf	??___ftadd+1,w
  2631  0234  0D33               	rlf	??___ftadd+2,w
  2632  0235  00B6               	movwf	___ftadd@exp1
  2633  0236  082E               	movf	___ftadd@f2,w
  2634  0237  00B1               	movwf	??___ftadd
  2635  0238  082F               	movf	___ftadd@f2+1,w
  2636  0239  00B2               	movwf	??___ftadd+1
  2637  023A  0830               	movf	___ftadd@f2+2,w
  2638  023B  00B3               	movwf	??___ftadd+2
  2639  023C  1003               	clrc
  2640  023D  0D32               	rlf	??___ftadd+1,w
  2641  023E  0D33               	rlf	??___ftadd+2,w
  2642  023F  00B5               	movwf	___ftadd@exp2
  2643  0240  0836               	movf	___ftadd@exp1,w
  2644  0241  1903               	btfsc	3,2
  2645  0242  2A4F               	goto	l4233
  2646  0243  0835               	movf	___ftadd@exp2,w
  2647  0244  0236               	subwf	___ftadd@exp1,w
  2648  0245  0835               	movf	___ftadd@exp2,w
  2649  0246  1803               	skipnc
  2650  0247  2A57               	goto	L6
  2651  0248  00B1               	movwf	??___ftadd
  2652  0249  0836               	movf	___ftadd@exp1,w
  2653  024A  02B1               	subwf	??___ftadd,f
  2654  024B  3019               	movlw	25
  2655  024C  0231               	subwf	??___ftadd,w
  2656  024D  1C03               	skipc
  2657  024E  2A56               	goto	l4237
  2658  024F                     l4233:	
  2659  024F  082E               	movf	___ftadd@f2,w
  2660  0250  00AB               	movwf	?___ftadd
  2661  0251  082F               	movf	___ftadd@f2+1,w
  2662  0252  00AC               	movwf	?___ftadd+1
  2663  0253  0830               	movf	___ftadd@f2+2,w
  2664  0254  00AD               	movwf	?___ftadd+2
  2665  0255  0008               	return
  2666  0256                     l4237:	
  2667  0256  0835               	movf	___ftadd@exp2,w
  2668  0257                     L6:	
  2669  0257  1903               	btfsc	3,2
  2670  0258  0008               	return
  2671  0259  0836               	movf	___ftadd@exp1,w
  2672  025A  0235               	subwf	___ftadd@exp2,w
  2673  025B  1803               	skipnc
  2674  025C  2A65               	goto	l4243
  2675  025D  0836               	movf	___ftadd@exp1,w
  2676  025E  00B1               	movwf	??___ftadd
  2677  025F  0835               	movf	___ftadd@exp2,w
  2678  0260  02B1               	subwf	??___ftadd,f
  2679  0261  3019               	movlw	25
  2680  0262  0231               	subwf	??___ftadd,w
  2681  0263  1803               	btfsc	3,0
  2682  0264  0008               	return
  2683  0265                     l4243:	
  2684  0265  3006               	movlw	6
  2685  0266  00B4               	movwf	___ftadd@sign
  2686  0267  1BAD               	btfsc	___ftadd@f1+2,7
  2687  0268  17B4               	bsf	___ftadd@sign,7
  2688  0269  1BB0               	btfsc	___ftadd@f2+2,7
  2689  026A  1734               	bsf	___ftadd@sign,6
  2690  026B  17AC               	bsf	___ftadd@f1+1,7
  2691  026C  01AD               	clrf	___ftadd@f1+2
  2692  026D  17AF               	bsf	___ftadd@f2+1,7
  2693  026E  01B0               	clrf	___ftadd@f2+2
  2694  026F  0835               	movf	___ftadd@exp2,w
  2695  0270  0236               	subwf	___ftadd@exp1,w
  2696  0271  1803               	skipnc
  2697  0272  2A8C               	goto	l4265
  2698  0273                     l4255:	
  2699  0273  1003               	clrc
  2700  0274  0DAE               	rlf	___ftadd@f2,f
  2701  0275  0DAF               	rlf	___ftadd@f2+1,f
  2702  0276  0DB0               	rlf	___ftadd@f2+2,f
  2703  0277  03B5               	decf	___ftadd@exp2,f
  2704  0278  0835               	movf	___ftadd@exp2,w
  2705  0279  0636               	xorwf	___ftadd@exp1,w
  2706  027A  1903               	skipnz
  2707  027B  2A87               	goto	l4263
  2708  027C  03B4               	decf	___ftadd@sign,f
  2709  027D  0834               	movf	___ftadd@sign,w
  2710  027E  3907               	andlw	7
  2711  027F  1903               	btfsc	3,2
  2712  0280  2A87               	goto	l4263
  2713  0281  2A73               	goto	l4255
  2714  0282                     l4261:	
  2715  0282  1003               	clrc
  2716  0283  0CAD               	rrf	___ftadd@f1+2,f
  2717  0284  0CAC               	rrf	___ftadd@f1+1,f
  2718  0285  0CAB               	rrf	___ftadd@f1,f
  2719  0286  0AB6               	incf	___ftadd@exp1,f
  2720  0287                     l4263:	
  2721  0287  0836               	movf	___ftadd@exp1,w
  2722  0288  0635               	xorwf	___ftadd@exp2,w
  2723  0289  1903               	btfsc	3,2
  2724  028A  2AA8               	goto	l2841
  2725  028B  2A82               	goto	l4261
  2726  028C                     l4265:	
  2727  028C  0836               	movf	___ftadd@exp1,w
  2728  028D  0235               	subwf	___ftadd@exp2,w
  2729  028E  1803               	skipnc
  2730  028F  2AA8               	goto	l2841
  2731  0290                     l4267:	
  2732  0290  1003               	clrc
  2733  0291  0DAB               	rlf	___ftadd@f1,f
  2734  0292  0DAC               	rlf	___ftadd@f1+1,f
  2735  0293  0DAD               	rlf	___ftadd@f1+2,f
  2736  0294  03B6               	decf	___ftadd@exp1,f
  2737  0295  0835               	movf	___ftadd@exp2,w
  2738  0296  0636               	xorwf	___ftadd@exp1,w
  2739  0297  1903               	skipnz
  2740  0298  2AA4               	goto	l4275
  2741  0299  03B4               	decf	___ftadd@sign,f
  2742  029A  0834               	movf	___ftadd@sign,w
  2743  029B  3907               	andlw	7
  2744  029C  1903               	btfsc	3,2
  2745  029D  2AA4               	goto	l4275
  2746  029E  2A90               	goto	l4267
  2747  029F                     l4273:	
  2748  029F  1003               	clrc
  2749  02A0  0CB0               	rrf	___ftadd@f2+2,f
  2750  02A1  0CAF               	rrf	___ftadd@f2+1,f
  2751  02A2  0CAE               	rrf	___ftadd@f2,f
  2752  02A3  0AB5               	incf	___ftadd@exp2,f
  2753  02A4                     l4275:	
  2754  02A4  0836               	movf	___ftadd@exp1,w
  2755  02A5  0635               	xorwf	___ftadd@exp2,w
  2756  02A6  1D03               	skipz
  2757  02A7  2A9F               	goto	l4273
  2758  02A8                     l2841:	
  2759  02A8  1FB4               	btfss	___ftadd@sign,7
  2760  02A9  2AB3               	goto	l4281
  2761  02AA  30FF               	movlw	255
  2762  02AB  06AB               	xorwf	___ftadd@f1,f
  2763  02AC  06AC               	xorwf	___ftadd@f1+1,f
  2764  02AD  06AD               	xorwf	___ftadd@f1+2,f
  2765  02AE  0AAB               	incf	___ftadd@f1,f
  2766  02AF  1903               	skipnz
  2767  02B0  0AAC               	incf	___ftadd@f1+1,f
  2768  02B1  1903               	skipnz
  2769  02B2  0AAD               	incf	___ftadd@f1+2,f
  2770  02B3                     l4281:	
  2771  02B3  1F34               	btfss	___ftadd@sign,6
  2772  02B4  2ABA               	goto	l4287
  2773  02B5  22E4               	fcall	PL16	;call to abstracted procedure
  2774  02B6  1903               	skipnz
  2775  02B7  0AAF               	incf	___ftadd@f2+1,f
  2776  02B8  1903               	skipnz
  2777  02B9  0AB0               	incf	___ftadd@f2+2,f
  2778  02BA                     l4287:	
  2779  02BA  01B4               	clrf	___ftadd@sign
  2780  02BB  082B               	movf	___ftadd@f1,w
  2781  02BC  07AE               	addwf	___ftadd@f2,f
  2782  02BD  082C               	movf	___ftadd@f1+1,w
  2783  02BE  1103               	clrz
  2784  02BF  1803               	skipnc
  2785  02C0  0A2C               	incf	___ftadd@f1+1,w
  2786  02C1  1D03               	btfss	3,2
  2787  02C2  07AF               	addwf	___ftadd@f2+1,f
  2788  02C3  082D               	movf	___ftadd@f1+2,w
  2789  02C4  1103               	clrz
  2790  02C5  1803               	skipnc
  2791  02C6  0A2D               	incf	___ftadd@f1+2,w
  2792  02C7  1D03               	btfss	3,2
  2793  02C8  07B0               	addwf	___ftadd@f2+2,f
  2794  02C9  1FB0               	btfss	___ftadd@f2+2,7
  2795  02CA  2AD2               	goto	l4299
  2796  02CB  22E4               	fcall	PL16	;call to abstracted procedure
  2797  02CC  1903               	skipnz
  2798  02CD  0AAF               	incf	___ftadd@f2+1,f
  2799  02CE  1903               	skipnz
  2800  02CF  0AB0               	incf	___ftadd@f2+2,f
  2801  02D0  01B4               	clrf	___ftadd@sign
  2802  02D1  0AB4               	incf	___ftadd@sign,f
  2803  02D2                     l4299:	
  2804  02D2  082E               	movf	___ftadd@f2,w
  2805  02D3  00A0               	movwf	___ftpack@arg
  2806  02D4  082F               	movf	___ftadd@f2+1,w
  2807  02D5  00A1               	movwf	___ftpack@arg+1
  2808  02D6  0830               	movf	___ftadd@f2+2,w
  2809  02D7  00A2               	movwf	___ftpack@arg+2
  2810  02D8  0836               	movf	___ftadd@exp1,w
  2811  02D9  00A3               	movwf	___ftpack@exp
  2812  02DA  0834               	movf	___ftadd@sign,w
  2813  02DB  00A4               	movwf	___ftpack@sign
  2814  02DC  24A7               	fcall	___ftpack
  2815  02DD  0820               	movf	?___ftpack,w
  2816  02DE  00AB               	movwf	?___ftadd
  2817  02DF  0821               	movf	?___ftpack+1,w
  2818  02E0  00AC               	movwf	?___ftadd+1
  2819  02E1  0822               	movf	?___ftpack+2,w
  2820  02E2  00AD               	movwf	?___ftadd+2
  2821  02E3  0008               	return
  2822  02E4                     __end_of___ftadd:	
  2823  02E4                     PL16:	
  2824  02E4  30FF               	movlw	255
  2825  02E5  06AE               	xorwf	___ftadd@f2,f
  2826  02E6  06AF               	xorwf	___ftadd@f2+1,f
  2827  02E7  06B0               	xorwf	___ftadd@f2+2,f
  2828  02E8  0AAE               	incf	___ftadd@f2,f
  2829  02E9  0008               	return
  2830  02EA                     __end_ofPL16:	
  2831                           
  2832                           	psect	text15
  2833  04A7                     __ptext15:	
  2834 ;; *************** function ___ftpack *****************
  2835 ;; Defined at:
  2836 ;;		line 62 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\float.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;  arg             3    0[BANK0 ] unsigned um
  2839 ;;  exp             1    3[BANK0 ] unsigned char 
  2840 ;;  sign            1    4[BANK0 ] unsigned char 
  2841 ;; Auto vars:     Size  Location     Type
  2842 ;;		None
  2843 ;; Return value:  Size  Location     Type
  2844 ;;                  3    0[BANK0 ] float 
  2845 ;; Registers used:
  2846 ;;		wreg, status,2, status,0
  2847 ;; Tracked objects:
  2848 ;;		On entry : 100/0
  2849 ;;		On exit  : 100/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMMON   BANK0   BANK1
  2852 ;;      Params:         0       5       0
  2853 ;;      Locals:         0       0       0
  2854 ;;      Temps:          0       3       0
  2855 ;;      Totals:         0       8       0
  2856 ;;Total ram usage:        8 bytes
  2857 ;; Hardware stack levels used:    1
  2858 ;; Hardware stack levels required when called:    3
  2859 ;; This function calls:
  2860 ;;		Nothing
  2861 ;; This function is called by:
  2862 ;;		___ftadd
  2863 ;;		___ftdiv
  2864 ;;		___lwtoft
  2865 ;; This function uses a non-reentrant model
  2866 ;;
  2867                           
  2868                           
  2869                           ;psect for function ___ftpack
  2870  04A7                     ___ftpack:	
  2871                           
  2872                           ;incstack = 0
  2873                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2874  04A7  0823               	movf	___ftpack@exp,w
  2875  04A8  1903               	btfsc	3,2
  2876  04A9  2CAF               	goto	l2805
  2877  04AA  0822               	movf	___ftpack@arg+2,w
  2878  04AB  0421               	iorwf	___ftpack@arg+1,w
  2879  04AC  0420               	iorwf	___ftpack@arg,w
  2880  04AD  1D03               	skipz
  2881  04AE  2CB5               	goto	l3967
  2882  04AF                     l2805:	
  2883  04AF  01A0               	clrf	?___ftpack
  2884  04B0  01A1               	clrf	?___ftpack+1
  2885  04B1  01A2               	clrf	?___ftpack+2
  2886  04B2  0008               	return
  2887  04B3                     l3965:	
  2888  04B3  0AA3               	incf	___ftpack@exp,f
  2889  04B4  24E3               	fcall	PL24	;call to abstracted procedure
  2890  04B5                     l3967:	
  2891  04B5  30FE               	movlw	254
  2892  04B6  0522               	andwf	___ftpack@arg+2,w
  2893  04B7  1903               	btfsc	3,2
  2894  04B8  2CC1               	goto	l3971
  2895  04B9  2CB3               	goto	l3965
  2896  04BA                     l3969:	
  2897  04BA  0AA3               	incf	___ftpack@exp,f
  2898  04BB  0AA0               	incf	___ftpack@arg,f
  2899  04BC  1903               	skipnz
  2900  04BD  0AA1               	incf	___ftpack@arg+1,f
  2901  04BE  1903               	skipnz
  2902  04BF  0AA2               	incf	___ftpack@arg+2,f
  2903  04C0  24E3               	fcall	PL24	;call to abstracted procedure
  2904  04C1                     l3971:	
  2905  04C1  30FF               	movlw	255
  2906  04C2  0522               	andwf	___ftpack@arg+2,w
  2907  04C3  1903               	btfsc	3,2
  2908  04C4  2CCF               	goto	l3975
  2909  04C5  2CBA               	goto	l3969
  2910  04C6                     l3977:	
  2911  04C6  3002               	movlw	2
  2912  04C7  0223               	subwf	___ftpack@exp,w
  2913  04C8  1C03               	btfss	3,0
  2914  04C9  2CD1               	goto	l2817
  2915  04CA  03A3               	decf	___ftpack@exp,f
  2916  04CB  1003               	clrc
  2917  04CC  0DA0               	rlf	___ftpack@arg,f
  2918  04CD  0DA1               	rlf	___ftpack@arg+1,f
  2919  04CE  0DA2               	rlf	___ftpack@arg+2,f
  2920  04CF                     l3975:	
  2921  04CF  1FA1               	btfss	___ftpack@arg+1,7
  2922  04D0  2CC6               	goto	l3977
  2923  04D1                     l2817:	
  2924  04D1  1C23               	btfss	___ftpack@exp,0
  2925  04D2  13A1               	bcf	___ftpack@arg+1,7
  2926  04D3  1003               	clrc
  2927  04D4  0CA3               	rrf	___ftpack@exp,f
  2928  04D5  0823               	movf	___ftpack@exp,w
  2929  04D6  00A7               	movwf	??___ftpack+2
  2930  04D7  01A6               	clrf	??___ftpack+1
  2931  04D8  01A5               	clrf	??___ftpack
  2932  04D9  0825               	movf	??___ftpack,w
  2933  04DA  04A0               	iorwf	___ftpack@arg,f
  2934  04DB  0826               	movf	??___ftpack+1,w
  2935  04DC  04A1               	iorwf	___ftpack@arg+1,f
  2936  04DD  0827               	movf	??___ftpack+2,w
  2937  04DE  04A2               	iorwf	___ftpack@arg+2,f
  2938  04DF  0824               	movf	___ftpack@sign,w
  2939  04E0  1D03               	btfss	3,2
  2940  04E1  17A2               	bsf	___ftpack@arg+2,7
  2941  04E2  0008               	return
  2942  04E3                     __end_of___ftpack:	
  2943  04E3                     PL24:	
  2944  04E3  1003               	clrc
  2945  04E4  0CA2               	rrf	___ftpack@arg+2,f
  2946  04E5  0CA1               	rrf	___ftpack@arg+1,f
  2947  04E6  0CA0               	rrf	___ftpack@arg,f
  2948  04E7  0008               	return
  2949  04E8                     __end_ofPL24:	
  2950                           
  2951                           	psect	text16
  2952  013F                     __ptext16:	
  2953 ;; *************** function _ADC_Sample *****************
  2954 ;; Defined at:
  2955 ;;		line 199 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_double_key\SC8F072_Pwm_Demo.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;  adch            1    wreg     unsigned char 
  2958 ;;  adldo           1    0[BANK0 ] unsigned char 
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;  adch            1    6[BANK0 ] unsigned char 
  2961 ;;  j               1    5[BANK0 ] unsigned char 
  2962 ;;  adsum           4    8[BANK0 ] volatile unsigned long 
  2963 ;;  ad_temp         2   16[BANK0 ] volatile unsigned int 
  2964 ;;  admax           2   14[BANK0 ] volatile unsigned int 
  2965 ;;  admin           2   12[BANK0 ] volatile unsigned int 
  2966 ;;  i               1    7[BANK0 ] unsigned char 
  2967 ;; Return value:  Size  Location     Type
  2968 ;;                  1    wreg      unsigned char 
  2969 ;; Registers used:
  2970 ;;		wreg, status,2, status,0
  2971 ;; Tracked objects:
  2972 ;;		On entry : 100/0
  2973 ;;		On exit  : 100/0
  2974 ;;		Unchanged: 0/0
  2975 ;; Data sizes:     COMMON   BANK0   BANK1
  2976 ;;      Params:         0       1       0
  2977 ;;      Locals:         0      13       0
  2978 ;;      Temps:          0       4       0
  2979 ;;      Totals:         0      18       0
  2980 ;;Total ram usage:       18 bytes
  2981 ;; Hardware stack levels used:    1
  2982 ;; Hardware stack levels required when called:    3
  2983 ;; This function calls:
  2984 ;;		Nothing
  2985 ;; This function is called by:
  2986 ;;		_ADC_read
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           
  2991                           ;psect for function _ADC_Sample
  2992  013F                     _ADC_Sample:	
  2993                           
  2994                           ;incstack = 0
  2995                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2996                           ;ADC_Sample@adch stored from wreg
  2997  013F  00A6               	movwf	ADC_Sample@adch
  2998                           
  2999                           ;SC8F072_Pwm_Demo.c: 201: volatile unsigned long adsum = 0;
  3000                           
  3001                           ;SC8F072_Pwm_Demo.c: 202: volatile unsigned int admin = 0, admax = 0;
  3002  0140  221E               	fcall	PL8	;call to abstracted procedure
  3003                           
  3004                           ;SC8F072_Pwm_Demo.c: 203: volatile unsigned int ad_temp = 0;
  3005  0141  01B0               	clrf	ADC_Sample@ad_temp	;volatile
  3006  0142  01B1               	clrf	ADC_Sample@ad_temp+1	;volatile
  3007                           
  3008                           ;SC8F072_Pwm_Demo.c: 205: if ((!LDO_EN) && (adldo & 0x04) )
  3009  0143  1683               	bsf	3,5	;RP0=1, select bank1
  3010  0144  1916               	btfsc	22,2	;volatile
  3011  0145  2953               	goto	l4021
  3012  0146  1283               	bcf	3,5	;RP0=0, select bank0
  3013  0147  1D20               	btfss	ADC_Sample@adldo,2
  3014  0148  2953               	goto	l4021
  3015                           
  3016                           ;SC8F072_Pwm_Demo.c: 206: {
  3017                           ;SC8F072_Pwm_Demo.c: 208: ADCON1 = adldo;
  3018  0149  0820               	movf	ADC_Sample@adldo,w
  3019  014A  1683               	bsf	3,5	;RP0=1, select bank1
  3020  014B  0096               	movwf	22	;volatile
  3021                           
  3022                           ;SC8F072_Pwm_Demo.c: 209: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3023  014C  3084               	movlw	132
  3024  014D  1283               	bcf	3,5	;RP0=0, select bank0
  3025  014E  00A1               	movwf	??_ADC_Sample
  3026  014F                     u2447:	
  3027  014F  0BA1               	decfsz	??_ADC_Sample,f
  3028  0150  294F               	goto	u2447
  3029  0151  2952               	nop2
  3030                           
  3031                           ;SC8F072_Pwm_Demo.c: 210: }
  3032  0152  2957               	goto	l4023
  3033  0153                     l4021:	
  3034                           
  3035                           ;SC8F072_Pwm_Demo.c: 211: else
  3036                           ;SC8F072_Pwm_Demo.c: 212: ADCON1 = adldo;
  3037  0153  1283               	bcf	3,5	;RP0=0, select bank0
  3038  0154  0820               	movf	ADC_Sample@adldo,w
  3039  0155  1683               	bsf	3,5	;RP0=1, select bank1
  3040  0156  0096               	movwf	22	;volatile
  3041  0157                     l4023:	
  3042                           
  3043                           ;SC8F072_Pwm_Demo.c: 213: if(adch & 0x10)
  3044  0157  1283               	bcf	3,5	;RP0=0, select bank0
  3045  0158  1E26               	btfss	ADC_Sample@adch,4
  3046  0159  295F               	goto	l4031
  3047                           
  3048                           ;SC8F072_Pwm_Demo.c: 214: {
  3049                           ;SC8F072_Pwm_Demo.c: 215: CHS4 = 1;
  3050  015A  1683               	bsf	3,5	;RP0=1, select bank1
  3051  015B  1716               	bsf	22,6	;volatile
  3052                           
  3053                           ;SC8F072_Pwm_Demo.c: 216: adch &= 0x0f;
  3054  015C  300F               	movlw	15
  3055  015D  1283               	bcf	3,5	;RP0=0, select bank0
  3056  015E  05A6               	andwf	ADC_Sample@adch,f
  3057  015F                     l4031:	
  3058                           
  3059                           ;SC8F072_Pwm_Demo.c: 219: for (i = 0; i < 10; i++)
  3060  015F  01A7               	clrf	ADC_Sample@i
  3061  0160                     l4037:	
  3062                           
  3063                           ;SC8F072_Pwm_Demo.c: 220: {
  3064                           ;SC8F072_Pwm_Demo.c: 221: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  3065  0160  0826               	movf	ADC_Sample@adch,w
  3066  0161  00A1               	movwf	??_ADC_Sample
  3067  0162  3001               	movlw	1
  3068  0163  1003               	clrc
  3069  0164                     L7:	
  3070  0164  0DA1               	rlf	??_ADC_Sample,f
  3071  0165  3EFF               	addlw	-1
  3072  0166  1003               	clrc
  3073  0167  1D03               	skipz
  3074  0168  2964               	goto	L7
  3075  0169  0D21               	rlf	??_ADC_Sample,w
  3076  016A  3841               	iorlw	65
  3077  016B  1683               	bsf	3,5	;RP0=1, select bank1
  3078  016C  0095               	movwf	21	;volatile
  3079  016D  0000               	nop	;# 
  3080  016E  0000               	nop	;# 
  3081  016F  0000               	nop	;# 
  3082  0170  0000               	nop	;# 
  3083                           
  3084                           ;SC8F072_Pwm_Demo.c: 226: GODONE = 1;
  3085  0171  1683               	bsf	3,5	;RP0=1, select bank1
  3086  0172  1495               	bsf	21,1	;volatile
  3087                           
  3088                           ;SC8F072_Pwm_Demo.c: 227: unsigned char j = 0;
  3089  0173  1283               	bcf	3,5	;RP0=0, select bank0
  3090  0174  01A5               	clrf	ADC_Sample@j
  3091  0175                     l674:	
  3092                           ;SC8F072_Pwm_Demo.c: 228: while (GODONE)
  3093                           
  3094  0175  1683               	bsf	3,5	;RP0=1, select bank1
  3095  0176  1C95               	btfss	21,1	;volatile
  3096  0177  2980               	goto	l4047
  3097                           
  3098                           ;SC8F072_Pwm_Demo.c: 229: {
  3099                           ;SC8F072_Pwm_Demo.c: 230: _delay((unsigned long)((2)*(16000000/4000000.0)));
  3100  0178  2979               	nop2	;2 cycle nop
  3101  0179  297A               	nop2	;2 cycle nop
  3102  017A  297B               	nop2	;2 cycle nop
  3103  017B  297C               	nop2	;2 cycle nop
  3104                           
  3105                           ;SC8F072_Pwm_Demo.c: 231: if (0 == (--j))
  3106  017C  1283               	bcf	3,5	;RP0=0, select bank0
  3107  017D  0BA5               	decfsz	ADC_Sample@j,f
  3108  017E  2975               	goto	l674
  3109                           
  3110                           ;SC8F072_Pwm_Demo.c: 232: return 0;
  3111  017F  3400               	retlw	0
  3112  0180                     l4047:	
  3113                           
  3114                           ;SC8F072_Pwm_Demo.c: 233: }
  3115                           ;SC8F072_Pwm_Demo.c: 235: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  3116  0180  0819               	movf	25,w	;volatile
  3117  0181  1283               	bcf	3,5	;RP0=0, select bank0
  3118  0182  00B0               	movwf	ADC_Sample@ad_temp	;volatile
  3119  0183  01B1               	clrf	ADC_Sample@ad_temp+1	;volatile
  3120  0184  0EB0               	swapf	ADC_Sample@ad_temp,f	;volatile
  3121  0185  0EB1               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3122  0186  30F0               	movlw	240
  3123  0187  05B1               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3124  0188  0830               	movf	ADC_Sample@ad_temp,w	;volatile
  3125  0189  390F               	andlw	15
  3126  018A  04B1               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3127  018B  30F0               	movlw	240
  3128  018C  05B0               	andwf	ADC_Sample@ad_temp,f	;volatile
  3129  018D  1683               	bsf	3,5	;RP0=1, select bank1
  3130  018E  0E18               	swapf	24,w	;volatile
  3131  018F  390F               	andlw	15
  3132  0190  1283               	bcf	3,5	;RP0=0, select bank0
  3133  0191  07B0               	addwf	ADC_Sample@ad_temp,f	;volatile
  3134  0192  1803               	skipnc
  3135  0193  0AB1               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3136                           
  3137                           ;SC8F072_Pwm_Demo.c: 237: if (0 == admax)
  3138  0194  082E               	movf	ADC_Sample@admax,w	;volatile
  3139  0195  042F               	iorwf	ADC_Sample@admax+1,w	;volatile
  3140  0196  1D03               	btfss	3,2
  3141  0197  299A               	goto	l4055
  3142                           
  3143                           ;SC8F072_Pwm_Demo.c: 238: {
  3144                           ;SC8F072_Pwm_Demo.c: 239: admax = ad_temp;
  3145  0198  2227               	fcall	PL26	;call to abstracted procedure
  3146  0199  29AC               	goto	l4061
  3147  019A                     l4055:	
  3148                           ;SC8F072_Pwm_Demo.c: 241: }
  3149                           
  3150                           ;SC8F072_Pwm_Demo.c: 240: admin = ad_temp;
  3151                           
  3152                           
  3153                           ;SC8F072_Pwm_Demo.c: 242: else if (ad_temp > admax)admax = ad_temp;
  3154  019A  0831               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3155  019B  022F               	subwf	ADC_Sample@admax+1,w	;volatile
  3156  019C  1D03               	skipz
  3157  019D  29A0               	goto	u1435
  3158  019E  0830               	movf	ADC_Sample@ad_temp,w	;volatile
  3159  019F  022E               	subwf	ADC_Sample@admax,w	;volatile
  3160  01A0                     u1435:	
  3161  01A0  1803               	skipnc
  3162  01A1  29A4               	goto	l4059
  3163  01A2  2227               	fcall	PL26	;call to abstracted procedure
  3164  01A3  29B0               	goto	l680
  3165  01A4                     l4059:	
  3166                           
  3167                           ;SC8F072_Pwm_Demo.c: 244: else if (ad_temp < admin)admin = ad_temp;
  3168  01A4  082D               	movf	ADC_Sample@admin+1,w	;volatile
  3169  01A5  0231               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  3170  01A6  1D03               	skipz
  3171  01A7  29AA               	goto	u1445
  3172  01A8  082C               	movf	ADC_Sample@admin,w	;volatile
  3173  01A9  0230               	subwf	ADC_Sample@ad_temp,w	;volatile
  3174  01AA                     u1445:	
  3175  01AA  1803               	skipnc
  3176  01AB  29B0               	goto	l680
  3177  01AC                     l4061:	
  3178  01AC  0831               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3179  01AD  00AD               	movwf	ADC_Sample@admin+1	;volatile
  3180  01AE  0830               	movf	ADC_Sample@ad_temp,w	;volatile
  3181  01AF  00AC               	movwf	ADC_Sample@admin	;volatile
  3182  01B0                     l680:	
  3183                           
  3184                           ;SC8F072_Pwm_Demo.c: 245: adsum += ad_temp;
  3185  01B0  0830               	movf	ADC_Sample@ad_temp,w	;volatile
  3186  01B1  00A1               	movwf	??_ADC_Sample
  3187  01B2  0831               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3188  01B3  00A2               	movwf	??_ADC_Sample+1
  3189  01B4  01A3               	clrf	??_ADC_Sample+2
  3190  01B5  01A4               	clrf	??_ADC_Sample+3
  3191  01B6  0821               	movf	??_ADC_Sample,w
  3192  01B7  07A8               	addwf	ADC_Sample@adsum,f	;volatile
  3193  01B8  0822               	movf	??_ADC_Sample+1,w
  3194  01B9  1103               	clrz
  3195  01BA  1803               	skipnc
  3196  01BB  3E01               	addlw	1
  3197  01BC  1D03               	btfss	3,2
  3198  01BD  07A9               	addwf	ADC_Sample@adsum+1,f	;volatile
  3199  01BE  0823               	movf	??_ADC_Sample+2,w
  3200  01BF  1103               	clrz
  3201  01C0  1803               	skipnc
  3202  01C1  3E01               	addlw	1
  3203  01C2  1D03               	btfss	3,2
  3204  01C3  07AA               	addwf	ADC_Sample@adsum+2,f	;volatile
  3205  01C4  0824               	movf	??_ADC_Sample+3,w
  3206  01C5  1103               	clrz
  3207  01C6  1803               	skipnc
  3208  01C7  3E01               	addlw	1
  3209  01C8  1D03               	btfss	3,2
  3210  01C9  07AB               	addwf	ADC_Sample@adsum+3,f	;volatile
  3211  01CA  300A               	movlw	10
  3212  01CB  0AA7               	incf	ADC_Sample@i,f
  3213  01CC  0227               	subwf	ADC_Sample@i,w
  3214  01CD  1C03               	skipc
  3215  01CE  2960               	goto	l4037
  3216                           
  3217                           ;SC8F072_Pwm_Demo.c: 246: }
  3218                           ;SC8F072_Pwm_Demo.c: 247: adsum -= admax;
  3219  01CF  082E               	movf	ADC_Sample@admax,w	;volatile
  3220  01D0  00A1               	movwf	??_ADC_Sample
  3221  01D1  082F               	movf	ADC_Sample@admax+1,w	;volatile
  3222  01D2  220F               	fcall	PL2	;call to abstracted procedure
  3223  01D3  1C03               	skipc
  3224  01D4  0F24               	incfsz	??_ADC_Sample+3,w
  3225  01D5  02AB               	subwf	ADC_Sample@adsum+3,f	;volatile
  3226                           
  3227                           ;SC8F072_Pwm_Demo.c: 248: if (adsum >= admin)
  3228  01D6  082C               	movf	ADC_Sample@admin,w	;volatile
  3229  01D7  00A1               	movwf	??_ADC_Sample
  3230  01D8  082D               	movf	ADC_Sample@admin+1,w	;volatile
  3231  01D9  00A2               	movwf	??_ADC_Sample+1
  3232  01DA  01A3               	clrf	??_ADC_Sample+2
  3233  01DB  01A4               	clrf	??_ADC_Sample+3
  3234  01DC  0824               	movf	??_ADC_Sample+3,w
  3235  01DD  022B               	subwf	ADC_Sample@adsum+3,w	;volatile
  3236  01DE  1D03               	skipz
  3237  01DF  29EA               	goto	u1485
  3238  01E0  0823               	movf	??_ADC_Sample+2,w
  3239  01E1  022A               	subwf	ADC_Sample@adsum+2,w	;volatile
  3240  01E2  1D03               	skipz
  3241  01E3  29EA               	goto	u1485
  3242  01E4  0822               	movf	??_ADC_Sample+1,w
  3243  01E5  0229               	subwf	ADC_Sample@adsum+1,w	;volatile
  3244  01E6  1D03               	skipz
  3245  01E7  29EA               	goto	u1485
  3246  01E8  0821               	movf	??_ADC_Sample,w
  3247  01E9  0228               	subwf	ADC_Sample@adsum,w	;volatile
  3248  01EA                     u1485:	
  3249  01EA  1C03               	skipc
  3250  01EB  29F4               	goto	l684
  3251                           
  3252                           ;SC8F072_Pwm_Demo.c: 249: adsum -= admin;
  3253  01EC  082C               	movf	ADC_Sample@admin,w	;volatile
  3254  01ED  00A1               	movwf	??_ADC_Sample
  3255  01EE  082D               	movf	ADC_Sample@admin+1,w	;volatile
  3256  01EF  220F               	fcall	PL2	;call to abstracted procedure
  3257  01F0  1C03               	skipc
  3258  01F1  0F24               	incfsz	??_ADC_Sample+3,w
  3259  01F2  02AB               	subwf	ADC_Sample@adsum+3,f	;volatile
  3260  01F3  29F8               	goto	l4071
  3261  01F4                     l684:	
  3262                           
  3263                           ;SC8F072_Pwm_Demo.c: 250: else
  3264                           ;SC8F072_Pwm_Demo.c: 251: adsum = 0;
  3265  01F4  01A8               	clrf	ADC_Sample@adsum	;volatile
  3266  01F5  01A9               	clrf	ADC_Sample@adsum+1	;volatile
  3267  01F6  01AA               	clrf	ADC_Sample@adsum+2	;volatile
  3268  01F7  01AB               	clrf	ADC_Sample@adsum+3	;volatile
  3269  01F8                     l4071:	
  3270                           
  3271                           ;SC8F072_Pwm_Demo.c: 252: adresult = adsum >> 3;
  3272  01F8  0828               	movf	ADC_Sample@adsum,w	;volatile
  3273  01F9  00A1               	movwf	??_ADC_Sample
  3274  01FA  0829               	movf	ADC_Sample@adsum+1,w	;volatile
  3275  01FB  00A2               	movwf	??_ADC_Sample+1
  3276  01FC  082A               	movf	ADC_Sample@adsum+2,w	;volatile
  3277  01FD  00A3               	movwf	??_ADC_Sample+2
  3278  01FE  082B               	movf	ADC_Sample@adsum+3,w	;volatile
  3279  01FF  00A4               	movwf	??_ADC_Sample+3
  3280  0200  3003               	movlw	3
  3281  0201                     u1505:	
  3282  0201  1003               	clrc
  3283  0202  0CA4               	rrf	??_ADC_Sample+3,f
  3284  0203  0CA3               	rrf	??_ADC_Sample+2,f
  3285  0204  0CA2               	rrf	??_ADC_Sample+1,f
  3286  0205  0CA1               	rrf	??_ADC_Sample,f
  3287  0206  3EFF               	addlw	-1
  3288  0207  1D03               	skipz
  3289  0208  2A01               	goto	u1505
  3290  0209  0822               	movf	??_ADC_Sample+1,w
  3291  020A  00EC               	movwf	_adresult+1	;volatile
  3292  020B  0821               	movf	??_ADC_Sample,w
  3293  020C  00EB               	movwf	_adresult	;volatile
  3294                           
  3295                           ;SC8F072_Pwm_Demo.c: 253: adsum = 0;
  3296                           
  3297                           ;SC8F072_Pwm_Demo.c: 254: admin = 0;
  3298                           
  3299                           ;SC8F072_Pwm_Demo.c: 255: admax = 0;
  3300  020D  221E               	fcall	PL8	;call to abstracted procedure
  3301                           
  3302                           ;SC8F072_Pwm_Demo.c: 256: return 0xA5;
  3303  020E  34A5               	retlw	165
  3304  020F                     __end_of_ADC_Sample:	
  3305  020F                     PL2:	
  3306  020F  00A2               	movwf	??_ADC_Sample+1
  3307  0210  01A3               	clrf	??_ADC_Sample+2
  3308  0211  01A4               	clrf	??_ADC_Sample+3
  3309  0212  0821               	movf	??_ADC_Sample,w
  3310  0213  02A8               	subwf	ADC_Sample@adsum,f	;volatile
  3311  0214  0822               	movf	??_ADC_Sample+1,w
  3312  0215  1C03               	skipc
  3313  0216  0F22               	incfsz	??_ADC_Sample+1,w
  3314  0217  02A9               	subwf	ADC_Sample@adsum+1,f	;volatile
  3315  0218  0823               	movf	??_ADC_Sample+2,w
  3316  0219  1C03               	skipc
  3317  021A  0F23               	incfsz	??_ADC_Sample+2,w
  3318  021B  02AA               	subwf	ADC_Sample@adsum+2,f	;volatile
  3319  021C  0824               	movf	??_ADC_Sample+3,w
  3320  021D  0008               	return
  3321  021E                     __end_ofPL2:	
  3322  021E                     PL8:	
  3323  021E  01A8               	clrf	ADC_Sample@adsum	;volatile
  3324  021F  01A9               	clrf	ADC_Sample@adsum+1	;volatile
  3325  0220  01AA               	clrf	ADC_Sample@adsum+2	;volatile
  3326  0221  01AB               	clrf	ADC_Sample@adsum+3	;volatile
  3327  0222  01AC               	clrf	ADC_Sample@admin	;volatile
  3328  0223  01AD               	clrf	ADC_Sample@admin+1	;volatile
  3329  0224  01AE               	clrf	ADC_Sample@admax	;volatile
  3330  0225  01AF               	clrf	ADC_Sample@admax+1	;volatile
  3331  0226  0008               	return
  3332  0227                     __end_ofPL8:	
  3333  0227                     PL26:	
  3334  0227  0831               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3335  0228  00AF               	movwf	ADC_Sample@admax+1	;volatile
  3336  0229  0830               	movf	ADC_Sample@ad_temp,w	;volatile
  3337  022A  00AE               	movwf	ADC_Sample@admax	;volatile
  3338  022B  0008               	return
  3339  022C                     __end_ofPL26:	
  3340                           
  3341                           	psect	text17
  3342  02EA                     __ptext17:	
  3343 ;; *************** function _Isr_Timer *****************
  3344 ;; Defined at:
  3345 ;;		line 283 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_double_key\SC8F072_Pwm_Demo.c"
  3346 ;; Parameters:    Size  Location     Type
  3347 ;;		None
  3348 ;; Auto vars:     Size  Location     Type
  3349 ;;		None
  3350 ;; Return value:  Size  Location     Type
  3351 ;;                  1    wreg      void 
  3352 ;; Registers used:
  3353 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3354 ;; Tracked objects:
  3355 ;;		On entry : 0/0
  3356 ;;		On exit  : 0/0
  3357 ;;		Unchanged: 0/0
  3358 ;; Data sizes:     COMMON   BANK0   BANK1
  3359 ;;      Params:         0       0       0
  3360 ;;      Locals:         0       0       0
  3361 ;;      Temps:          3       0       0
  3362 ;;      Totals:         3       0       0
  3363 ;;Total ram usage:        3 bytes
  3364 ;; Hardware stack levels used:    1
  3365 ;; Hardware stack levels required when called:    2
  3366 ;; This function calls:
  3367 ;;		_Charge_num
  3368 ;;		_Display
  3369 ;;		_Uncharge_num
  3370 ;; This function is called by:
  3371 ;;		Interrupt level 1
  3372 ;; This function uses a non-reentrant model
  3373 ;;
  3374                           
  3375                           
  3376                           ;psect for function _Isr_Timer
  3377  02EA                     _Isr_Timer:	
  3378                           
  3379                           ;SC8F072_Pwm_Demo.c: 285: if(RAIF)
  3380  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  3381  02EB  1D8D               	btfss	13,3	;volatile
  3382  02EC  2B1A               	goto	i1l4701
  3383                           
  3384                           ;SC8F072_Pwm_Demo.c: 286: {
  3385                           ;SC8F072_Pwm_Demo.c: 287: RAIF = 0;
  3386  02ED  118D               	bcf	13,3	;volatile
  3387                           
  3388                           ;SC8F072_Pwm_Demo.c: 288: if (!(PORTA & 0x04))
  3389  02EE  1683               	bsf	3,5	;RP0=1, select bank1
  3390  02EF  1906               	btfsc	6,2	;volatile
  3391  02F0  2B0E               	goto	i1l4693
  3392                           
  3393                           ;SC8F072_Pwm_Demo.c: 289: {
  3394                           ;SC8F072_Pwm_Demo.c: 290: if(LED_Key_counter > 1015 )
  3395  02F1  3003               	movlw	3
  3396  02F2  1283               	bcf	3,5	;RP0=0, select bank0
  3397  02F3  0259               	subwf	_LED_Key_counter+1,w
  3398  02F4  30F8               	movlw	248
  3399  02F5  1903               	skipnz
  3400  02F6  0258               	subwf	_LED_Key_counter,w
  3401  02F7  1C03               	skipc
  3402  02F8  2AFC               	goto	i1l4685
  3403                           
  3404                           ;SC8F072_Pwm_Demo.c: 291: {
  3405                           ;SC8F072_Pwm_Demo.c: 292: LED_lflag = 1;
  3406  02F9  01E2               	clrf	_LED_lflag
  3407  02FA  0AE2               	incf	_LED_lflag,f
  3408                           
  3409                           ;SC8F072_Pwm_Demo.c: 293: }
  3410  02FB  2B0C               	goto	i1l4691
  3411  02FC                     i1l4685:	
  3412                           
  3413                           ;SC8F072_Pwm_Demo.c: 294: else if(LED_Key_counter<=1015 && LED_Key_counter>=150)
  3414  02FC  3003               	movlw	3
  3415  02FD  0259               	subwf	_LED_Key_counter+1,w
  3416  02FE  30F8               	movlw	248
  3417  02FF  1903               	skipnz
  3418  0300  0258               	subwf	_LED_Key_counter,w
  3419  0301  1803               	skipnc
  3420  0302  2B0C               	goto	i1l4691
  3421  0303  3000               	movlw	0
  3422  0304  0259               	subwf	_LED_Key_counter+1,w
  3423  0305  3096               	movlw	150
  3424  0306  1903               	skipnz
  3425  0307  0258               	subwf	_LED_Key_counter,w
  3426  0308  1C03               	skipc
  3427  0309  2B0C               	goto	i1l4691
  3428                           
  3429                           ;SC8F072_Pwm_Demo.c: 295: {
  3430                           ;SC8F072_Pwm_Demo.c: 296: LED_sflag = 1;
  3431  030A  01E1               	clrf	_LED_sflag
  3432  030B  0AE1               	incf	_LED_sflag,f
  3433  030C                     i1l4691:	
  3434                           
  3435                           ;SC8F072_Pwm_Demo.c: 297: }
  3436                           ;SC8F072_Pwm_Demo.c: 298: LED_Key_counter = 0;
  3437  030C  01D8               	clrf	_LED_Key_counter
  3438  030D  01D9               	clrf	_LED_Key_counter+1
  3439  030E                     i1l4693:	
  3440                           
  3441                           ;SC8F072_Pwm_Demo.c: 299: }
  3442                           ;SC8F072_Pwm_Demo.c: 317: if (!(PORTA & 0x20))
  3443  030E  1683               	bsf	3,5	;RP0=1, select bank1
  3444  030F  1A86               	btfsc	6,5	;volatile
  3445  0310  2B16               	goto	i1l701
  3446                           
  3447                           ;SC8F072_Pwm_Demo.c: 318: {
  3448                           ;SC8F072_Pwm_Demo.c: 319: T_flag = 1;
  3449  0311  1283               	bcf	3,5	;RP0=0, select bank0
  3450  0312  01E3               	clrf	_T_flag
  3451  0313  0AE3               	incf	_T_flag,f
  3452                           
  3453                           ;SC8F072_Pwm_Demo.c: 320: Charge_num();
  3454  0314  25BA               	fcall	_Charge_num
  3455                           
  3456                           ;SC8F072_Pwm_Demo.c: 321: }
  3457  0315  2B1A               	goto	i1l4701
  3458  0316                     i1l701:	
  3459                           
  3460                           ;SC8F072_Pwm_Demo.c: 322: else
  3461                           ;SC8F072_Pwm_Demo.c: 323: {
  3462                           ;SC8F072_Pwm_Demo.c: 324: T_flag = 1;
  3463  0316  1283               	bcf	3,5	;RP0=0, select bank0
  3464  0317  01E3               	clrf	_T_flag
  3465  0318  0AE3               	incf	_T_flag,f
  3466                           
  3467                           ;SC8F072_Pwm_Demo.c: 325: Uncharge_num();
  3468  0319  26CC               	fcall	_Uncharge_num
  3469  031A                     i1l4701:	
  3470                           
  3471                           ;SC8F072_Pwm_Demo.c: 326: }
  3472                           ;SC8F072_Pwm_Demo.c: 327: }
  3473                           ;SC8F072_Pwm_Demo.c: 329: if(RBIF)
  3474  031A  1C0B               	btfss	11,0	;volatile
  3475  031B  2B3B               	goto	i1l4717
  3476                           
  3477                           ;SC8F072_Pwm_Demo.c: 330: {
  3478                           ;SC8F072_Pwm_Demo.c: 331: RBIF = 0;
  3479  031C  100B               	bcf	11,0	;volatile
  3480                           
  3481                           ;SC8F072_Pwm_Demo.c: 332: if (PORTB & 0x20)
  3482  031D  1E86               	btfss	6,5	;volatile
  3483  031E  2B3B               	goto	i1l4717
  3484                           
  3485                           ;SC8F072_Pwm_Demo.c: 333: {
  3486                           ;SC8F072_Pwm_Demo.c: 334: if (long_press_counter > 1015)
  3487  031F  3003               	movlw	3
  3488  0320  025B               	subwf	_long_press_counter+1,w
  3489  0321  30F8               	movlw	248
  3490  0322  1903               	skipnz
  3491  0323  025A               	subwf	_long_press_counter,w
  3492  0324  1C03               	skipc
  3493  0325  2B29               	goto	i1l4709
  3494                           
  3495                           ;SC8F072_Pwm_Demo.c: 335: {
  3496                           ;SC8F072_Pwm_Demo.c: 336: button_lflag = 1;
  3497  0326  01E4               	clrf	_button_lflag
  3498  0327  0AE4               	incf	_button_lflag,f
  3499                           
  3500                           ;SC8F072_Pwm_Demo.c: 337: }
  3501  0328  2B39               	goto	i1l4715
  3502  0329                     i1l4709:	
  3503                           
  3504                           ;SC8F072_Pwm_Demo.c: 338: else if(long_press_counter<=1015 && long_press_counter>=65)
  3505  0329  3003               	movlw	3
  3506  032A  025B               	subwf	_long_press_counter+1,w
  3507  032B  30F8               	movlw	248
  3508  032C  1903               	skipnz
  3509  032D  025A               	subwf	_long_press_counter,w
  3510  032E  1803               	skipnc
  3511  032F  2B39               	goto	i1l4715
  3512  0330  3000               	movlw	0
  3513  0331  025B               	subwf	_long_press_counter+1,w
  3514  0332  3041               	movlw	65
  3515  0333  1903               	skipnz
  3516  0334  025A               	subwf	_long_press_counter,w
  3517  0335  1C03               	skipc
  3518  0336  2B39               	goto	i1l4715
  3519                           
  3520                           ;SC8F072_Pwm_Demo.c: 339: {
  3521                           ;SC8F072_Pwm_Demo.c: 340: button_sflag = 1;
  3522  0337  01E5               	clrf	_button_sflag
  3523  0338  0AE5               	incf	_button_sflag,f
  3524  0339                     i1l4715:	
  3525                           
  3526                           ;SC8F072_Pwm_Demo.c: 341: }
  3527                           ;SC8F072_Pwm_Demo.c: 342: long_press_counter = 0;
  3528  0339  01DA               	clrf	_long_press_counter
  3529  033A  01DB               	clrf	_long_press_counter+1
  3530  033B                     i1l4717:	
  3531                           
  3532                           ;SC8F072_Pwm_Demo.c: 343: }
  3533                           ;SC8F072_Pwm_Demo.c: 344: }
  3534                           ;SC8F072_Pwm_Demo.c: 345: if(T0IF)
  3535  033B  1D0B               	btfss	11,2	;volatile
  3536  033C  2B57               	goto	i1l4733
  3537                           
  3538                           ;SC8F072_Pwm_Demo.c: 346: {
  3539                           ;SC8F072_Pwm_Demo.c: 347: TMR0 += 6;
  3540  033D  3006               	movlw	6
  3541  033E  1683               	bsf	3,5	;RP0=1, select bank1
  3542  033F  0781               	addwf	1,f	;volatile
  3543                           
  3544                           ;SC8F072_Pwm_Demo.c: 348: T0IF = 0;
  3545  0340  110B               	bcf	11,2	;volatile
  3546                           
  3547                           ;SC8F072_Pwm_Demo.c: 349: if(T_flag)
  3548  0341  1283               	bcf	3,5	;RP0=0, select bank0
  3549  0342  0863               	movf	_T_flag,w
  3550  0343  1903               	btfsc	3,2
  3551  0344  2B46               	goto	i1l4725
  3552                           
  3553                           ;SC8F072_Pwm_Demo.c: 350: {
  3554                           ;SC8F072_Pwm_Demo.c: 351: Display();
  3555  0345  2683               	fcall	_Display
  3556  0346                     i1l4725:	
  3557                           
  3558                           ;SC8F072_Pwm_Demo.c: 352: }
  3559                           ;SC8F072_Pwm_Demo.c: 355: if(ADC_delay > 0)
  3560  0346  085C               	movf	_ADC_delay,w
  3561  0347  045D               	iorwf	_ADC_delay+1,w
  3562  0348  1903               	btfsc	3,2
  3563  0349  2B51               	goto	i1l4729
  3564                           
  3565                           ;SC8F072_Pwm_Demo.c: 356: {
  3566                           ;SC8F072_Pwm_Demo.c: 357: ADC_delay--;
  3567  034A  3001               	movlw	1
  3568  034B  02DC               	subwf	_ADC_delay,f
  3569  034C  3000               	movlw	0
  3570  034D  1C03               	skipc
  3571  034E  03DD               	decf	_ADC_delay+1,f
  3572  034F  02DD               	subwf	_ADC_delay+1,f
  3573                           
  3574                           ;SC8F072_Pwm_Demo.c: 358: }
  3575  0350  2B57               	goto	i1l4733
  3576  0351                     i1l4729:	
  3577                           
  3578                           ;SC8F072_Pwm_Demo.c: 359: else
  3579                           ;SC8F072_Pwm_Demo.c: 360: {
  3580                           ;SC8F072_Pwm_Demo.c: 361: ADC_delay=1000;
  3581  0351  30E8               	movlw	232
  3582  0352  00DC               	movwf	_ADC_delay
  3583  0353  3003               	movlw	3
  3584  0354  00DD               	movwf	_ADC_delay+1
  3585                           
  3586                           ;SC8F072_Pwm_Demo.c: 362: ADC_Flag=1;
  3587  0355  01E6               	clrf	_ADC_Flag
  3588  0356  0AE6               	incf	_ADC_Flag,f
  3589  0357                     i1l4733:	
  3590                           
  3591                           ;SC8F072_Pwm_Demo.c: 363: }
  3592                           ;SC8F072_Pwm_Demo.c: 364: }
  3593                           ;SC8F072_Pwm_Demo.c: 365: if(TMR2IF)
  3594  0357  1C8D               	btfss	13,1	;volatile
  3595  0358  2B78               	goto	i1l719
  3596                           
  3597                           ;SC8F072_Pwm_Demo.c: 366: {
  3598                           ;SC8F072_Pwm_Demo.c: 367: TMR2IF = 0;
  3599  0359  108D               	bcf	13,1	;volatile
  3600                           
  3601                           ;SC8F072_Pwm_Demo.c: 387: if (!(PORTA & 0x04))
  3602  035A  1683               	bsf	3,5	;RP0=1, select bank1
  3603  035B  1906               	btfsc	6,2	;volatile
  3604  035C  2B61               	goto	i1l4739
  3605                           
  3606                           ;SC8F072_Pwm_Demo.c: 388: {
  3607                           ;SC8F072_Pwm_Demo.c: 389: LED_Key_counter++;
  3608  035D  1283               	bcf	3,5	;RP0=0, select bank0
  3609  035E  0AD8               	incf	_LED_Key_counter,f
  3610  035F  1903               	skipnz
  3611  0360  0AD9               	incf	_LED_Key_counter+1,f
  3612  0361                     i1l4739:	
  3613                           
  3614                           ;SC8F072_Pwm_Demo.c: 390: }
  3615                           ;SC8F072_Pwm_Demo.c: 393: if (!(PORTB & 0x20))
  3616  0361  1283               	bcf	3,5	;RP0=0, select bank0
  3617  0362  1A86               	btfsc	6,5	;volatile
  3618  0363  2B67               	goto	i1l4743
  3619                           
  3620                           ;SC8F072_Pwm_Demo.c: 394: {
  3621                           ;SC8F072_Pwm_Demo.c: 395: long_press_counter++;
  3622  0364  0ADA               	incf	_long_press_counter,f
  3623  0365  1903               	skipnz
  3624  0366  0ADB               	incf	_long_press_counter+1,f
  3625  0367                     i1l4743:	
  3626                           
  3627                           ;SC8F072_Pwm_Demo.c: 396: }
  3628                           ;SC8F072_Pwm_Demo.c: 398: if(Time_delay > 0)
  3629  0367  1683               	bsf	3,5	;RP0=1, select bank1
  3630  0368  0831               	movf	_Time_delay^(0+128),w
  3631  0369  0432               	iorwf	(_Time_delay+1)^(0+128),w
  3632  036A  1903               	btfsc	3,2
  3633  036B  2B73               	goto	i1l715
  3634                           
  3635                           ;SC8F072_Pwm_Demo.c: 399: {
  3636                           ;SC8F072_Pwm_Demo.c: 400: Time_delay--;
  3637  036C  3001               	movlw	1
  3638  036D  02B1               	subwf	_Time_delay^(0+128),f
  3639  036E  3000               	movlw	0
  3640  036F  1C03               	skipc
  3641  0370  03B2               	decf	(_Time_delay+1)^(0+128),f
  3642  0371  02B2               	subwf	(_Time_delay+1)^(0+128),f
  3643                           
  3644                           ;SC8F072_Pwm_Demo.c: 401: }
  3645  0372  2B78               	goto	i1l719
  3646  0373                     i1l715:	
  3647                           
  3648                           ;SC8F072_Pwm_Demo.c: 402: else
  3649                           ;SC8F072_Pwm_Demo.c: 403: {
  3650                           ;SC8F072_Pwm_Demo.c: 404: if (!(PORTA & 0x20))
  3651  0373  1A86               	btfsc	6,5	;volatile
  3652  0374  2B77               	goto	i1l4749
  3653                           
  3654                           ;SC8F072_Pwm_Demo.c: 405: {
  3655                           ;SC8F072_Pwm_Demo.c: 406: Charge_num();
  3656  0375  25BA               	fcall	_Charge_num
  3657                           
  3658                           ;SC8F072_Pwm_Demo.c: 407: }
  3659  0376  2B78               	goto	i1l719
  3660  0377                     i1l4749:	
  3661                           
  3662                           ;SC8F072_Pwm_Demo.c: 408: else
  3663                           ;SC8F072_Pwm_Demo.c: 409: {
  3664                           ;SC8F072_Pwm_Demo.c: 410: Uncharge_num();
  3665  0377  26CC               	fcall	_Uncharge_num
  3666  0378                     i1l719:	
  3667  0378  087C               	movf	??_Isr_Timer+2,w
  3668  0379  008A               	movwf	10
  3669  037A  087B               	movf	??_Isr_Timer+1,w
  3670  037B  0084               	movwf	4
  3671  037C  0E7A               	swapf	??_Isr_Timer^(0+-128),w
  3672  037D  0083               	movwf	3
  3673  037E  0EFE               	swapf	126,f
  3674  037F  0E7E               	swapf	126,w
  3675  0380  0009               	retfie
  3676  0381                     __end_of_Isr_Timer:	
  3677                           
  3678                           	psect	intentry
  3679  0004                     __pintentry:	
  3680                           ;incstack = 0
  3681                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3682                           
  3683  0004                     interrupt_function:	
  3684  007E                     saved_w	set	btemp
  3685  0004  00FE               	movwf	btemp
  3686  0005  0E03               	swapf	3,w
  3687  0006  00FA               	movwf	??_Isr_Timer
  3688  0007  0804               	movf	4,w
  3689  0008  00FB               	movwf	??_Isr_Timer+1
  3690  0009  080A               	movf	10,w
  3691  000A  00FC               	movwf	??_Isr_Timer+2
  3692  000B  2AEA               	ljmp	_Isr_Timer
  3693                           
  3694                           	psect	text18
  3695  06CC                     __ptext18:	
  3696 ;; *************** function _Uncharge_num *****************
  3697 ;; Defined at:
  3698 ;;		line 25 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_double_key\LED_188.c"
  3699 ;; Parameters:    Size  Location     Type
  3700 ;;		None
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;  hundred         1    9[COMMON] unsigned char 
  3703 ;; Return value:  Size  Location     Type
  3704 ;;                  1    wreg      void 
  3705 ;; Registers used:
  3706 ;;		wreg, status,2, status,0, pclath, cstack
  3707 ;; Tracked objects:
  3708 ;;		On entry : 0/0
  3709 ;;		On exit  : 100/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMMON   BANK0   BANK1
  3712 ;;      Params:         0       0       0
  3713 ;;      Locals:         1       0       0
  3714 ;;      Temps:          0       0       0
  3715 ;;      Totals:         1       0       0
  3716 ;;Total ram usage:        1 bytes
  3717 ;; Hardware stack levels used:    1
  3718 ;; Hardware stack levels required when called:    1
  3719 ;; This function calls:
  3720 ;;		___lbdiv
  3721 ;;		___lbmod
  3722 ;; This function is called by:
  3723 ;;		_Isr_Timer
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           
  3728                           ;psect for function _Uncharge_num
  3729  06CC                     _Uncharge_num:	
  3730                           
  3731                           ;LED_188.c: 27: bool hundred = (bool)(power_percent / 100);
  3732                           
  3733                           ;incstack = 0
  3734                           ; Regs used in _Uncharge_num: [wreg+status,2+status,0+pclath+cstack]
  3735  06CC  25D2               	fcall	PL30	;call to abstracted procedure
  3736  06CD  2668               	fcall	___lbdiv
  3737  06CE  00F9               	movwf	Uncharge_num@hundred
  3738                           
  3739                           ;LED_188.c: 28: tens = (unsigned char)((power_percent % 100) / 10);
  3740  06CF  25CC               	fcall	PL18	;call to abstracted procedure
  3741  06D0  264C               	fcall	___lbmod
  3742  06D1  2668               	fcall	___lbdiv
  3743                           
  3744                           ;LED_188.c: 29: unit = (unsigned char)(power_percent % 10);
  3745  06D2  25D7               	fcall	PL32	;call to abstracted procedure
  3746  06D3  264C               	fcall	___lbmod
  3747  06D4  00ED               	movwf	_unit
  3748                           
  3749                           ;LED_188.c: 30: if(hundred)
  3750  06D5  0879               	movf	Uncharge_num@hundred,w
  3751  06D6  1903               	btfsc	3,2
  3752  06D7  2EDB               	goto	i1l1333
  3753                           
  3754                           ;LED_188.c: 31: {
  3755                           ;LED_188.c: 32: hundreds = 3;
  3756  06D8  3003               	movlw	3
  3757  06D9  00EE               	movwf	_hundreds
  3758                           
  3759                           ;LED_188.c: 33: }
  3760  06DA  0008               	return
  3761  06DB                     i1l1333:	
  3762                           
  3763                           ;LED_188.c: 34: else
  3764                           ;LED_188.c: 35: {
  3765                           ;LED_188.c: 36: hundreds = 1;
  3766  06DB  01EE               	clrf	_hundreds
  3767  06DC  0AEE               	incf	_hundreds,f
  3768  06DD  0008               	return
  3769  06DE                     __end_of_Uncharge_num:	
  3770                           
  3771                           	psect	text19
  3772  0683                     __ptext19:	
  3773 ;; *************** function _Display *****************
  3774 ;; Defined at:
  3775 ;;		line 170 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_double_key\LED_188.c"
  3776 ;; Parameters:    Size  Location     Type
  3777 ;;		None
  3778 ;; Auto vars:     Size  Location     Type
  3779 ;;		None
  3780 ;; Return value:  Size  Location     Type
  3781 ;;                  1    wreg      void 
  3782 ;; Registers used:
  3783 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3784 ;; Tracked objects:
  3785 ;;		On entry : 100/0
  3786 ;;		On exit  : 100/0
  3787 ;;		Unchanged: 0/0
  3788 ;; Data sizes:     COMMON   BANK0   BANK1
  3789 ;;      Params:         0       0       0
  3790 ;;      Locals:         0       0       0
  3791 ;;      Temps:          0       0       0
  3792 ;;      Totals:         0       0       0
  3793 ;;Total ram usage:        0 bytes
  3794 ;; Hardware stack levels used:    1
  3795 ;; Hardware stack levels required when called:    1
  3796 ;; This function calls:
  3797 ;;		_Display_Scan1
  3798 ;;		_Display_Scan2
  3799 ;;		_Display_Scan3
  3800 ;;		_Display_Scan4
  3801 ;;		_Display_Scan5
  3802 ;;		_Set_AllPin_INPUT
  3803 ;; This function is called by:
  3804 ;;		_Isr_Timer
  3805 ;; This function uses a non-reentrant model
  3806 ;;
  3807                           
  3808                           
  3809                           ;psect for function _Display
  3810  0683                     _Display:	
  3811                           
  3812                           ;LED_188.c: 172: static unsigned char scan_cnt;
  3813                           ;LED_188.c: 173: Set_AllPin_INPUT();
  3814                           
  3815                           ;incstack = 0
  3816                           ; Regs used in _Display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3817  0683  2727               	fcall	_Set_AllPin_INPUT
  3818                           
  3819                           ;LED_188.c: 175: switch(scan_cnt)
  3820  0684  2E91               	goto	i1l4657
  3821  0685                     i1l4633:	
  3822  0685  2630               	fcall	_Display_Scan1
  3823  0686                     i1l4635:	
  3824  0686  0AE0               	incf	Display@scan_cnt,f
  3825  0687  0008               	return
  3826  0688                     i1l4637:	
  3827  0688  2614               	fcall	_Display_Scan2
  3828  0689  2E86               	goto	i1l4635
  3829  068A                     i1l4641:	
  3830  068A  25F8               	fcall	_Display_Scan3
  3831  068B  2E86               	goto	i1l4635
  3832  068C                     i1l4645:	
  3833  068C  25DC               	fcall	_Display_Scan4
  3834  068D  2E86               	goto	i1l4635
  3835  068E                     i1l4649:	
  3836  068E  26EE               	fcall	_Display_Scan5
  3837  068F                     i1l4651:	
  3838  068F  01E0               	clrf	Display@scan_cnt
  3839  0690  0008               	return
  3840  0691                     i1l4657:	
  3841  0691  0860               	movf	Display@scan_cnt,w
  3842                           
  3843                           ; Switch size 1, requested type "space"
  3844                           ; Number of cases is 5, Range of values is 0 to 4
  3845                           ; switch strategies available:
  3846                           ; Name         Instructions Cycles
  3847                           ; direct_byte           11     6 (fixed)
  3848                           ; simple_byte           16     9 (average)
  3849                           ; jumptable            260     6 (fixed)
  3850                           ;	Chosen strategy is direct_byte
  3851  0692  0084               	movwf	4
  3852  0693  3005               	movlw	5
  3853  0694  0204               	subwf	4,w
  3854  0695  1803               	skipnc
  3855  0696  2E8F               	goto	i1l4651
  3856  0697  3007               	movlw	high i1S4847
  3857  0698  008A               	movwf	10
  3858  0699  303D               	movlw	low i1S4847
  3859  069A  0704               	addwf	4,w
  3860  069B  0082               	movwf	2
  3861  069C  0008               	return
  3862  069D                     __end_of_Display:	
  3863                           
  3864                           	psect	swtext4
  3865  073D                     __pswtext4:	
  3866  073D                     i1S4847:	
  3867  073D  2E85               	ljmp	i1l4633
  3868  073E  2E88               	ljmp	i1l4637
  3869  073F  2E8A               	ljmp	i1l4641
  3870  0740  2E8C               	ljmp	i1l4645
  3871  0741  2E8E               	ljmp	i1l4649
  3872                           
  3873                           	psect	text20
  3874  0727                     __ptext20:	
  3875 ;; *************** function _Set_AllPin_INPUT *****************
  3876 ;; Defined at:
  3877 ;;		line 85 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_double_key\LED_188.c"
  3878 ;; Parameters:    Size  Location     Type
  3879 ;;		None
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;		None
  3882 ;; Return value:  Size  Location     Type
  3883 ;;                  1    wreg      void 
  3884 ;; Registers used:
  3885 ;;		None
  3886 ;; Tracked objects:
  3887 ;;		On entry : 100/0
  3888 ;;		On exit  : 100/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMMON   BANK0   BANK1
  3891 ;;      Params:         0       0       0
  3892 ;;      Locals:         0       0       0
  3893 ;;      Temps:          0       0       0
  3894 ;;      Totals:         0       0       0
  3895 ;;Total ram usage:        0 bytes
  3896 ;; Hardware stack levels used:    1
  3897 ;; This function calls:
  3898 ;;		Nothing
  3899 ;; This function is called by:
  3900 ;;		_Display
  3901 ;; This function uses a non-reentrant model
  3902 ;;
  3903                           
  3904                           
  3905                           ;psect for function _Set_AllPin_INPUT
  3906  0727                     _Set_AllPin_INPUT:	
  3907                           
  3908                           ;LED_188.c: 87: TRISB0 = 1;;
  3909                           
  3910                           ;incstack = 0
  3911                           ; Regs used in _Set_AllPin_INPUT: []
  3912                           
  3913                           ;LED_188.c: 88: TRISB1 = 1;;
  3914                           
  3915                           ;LED_188.c: 89: TRISB2 = 1;;
  3916                           
  3917                           ;LED_188.c: 90: TRISB3 = 1;;
  3918                           
  3919                           ;LED_188.c: 91: TRISB4 = 1;;
  3920  0727  2F28               	ljmp	PL12	;call to abstracted procedure
  3921  0728                     __end_of_Set_AllPin_INPUT:	
  3922  0728                     PL12:	
  3923  0728  1405               	bsf	5,0	;volatile
  3924  0729  1485               	bsf	5,1	;volatile
  3925  072A  1505               	bsf	5,2	;volatile
  3926  072B  1585               	bsf	5,3	;volatile
  3927  072C  1605               	bsf	5,4	;volatile
  3928  072D  0008               	return
  3929  072E                     __end_ofPL12:	
  3930                           
  3931                           	psect	text21
  3932  06EE                     __ptext21:	
  3933 ;; *************** function _Display_Scan5 *****************
  3934 ;; Defined at:
  3935 ;;		line 161 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_double_key\LED_188.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;		None
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;		None
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  1    wreg      void 
  3942 ;; Registers used:
  3943 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3944 ;; Tracked objects:
  3945 ;;		On entry : 100/0
  3946 ;;		On exit  : 900/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMMON   BANK0   BANK1
  3949 ;;      Params:         0       0       0
  3950 ;;      Locals:         0       0       0
  3951 ;;      Temps:          0       0       0
  3952 ;;      Totals:         0       0       0
  3953 ;;Total ram usage:        0 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; This function calls:
  3956 ;;		Nothing
  3957 ;; This function is called by:
  3958 ;;		_Display
  3959 ;; This function uses a non-reentrant model
  3960 ;;
  3961                           
  3962                           
  3963                           ;psect for function _Display_Scan5
  3964  06EE                     _Display_Scan5:	
  3965                           
  3966                           ;LED_188.c: 163: TRISB4 = 0;RB4 = 0;;
  3967                           
  3968                           ;incstack = 0
  3969                           ; Regs used in _Display_Scan5: [wreg-fsr0h+status,2+status,0]
  3970  06EE  1205               	bcf	5,4	;volatile
  3971  06EF  1206               	bcf	6,4	;volatile
  3972                           
  3973                           ;LED_188.c: 164: if(num_hund[hundreds] & 0x02)
  3974  06F0  086E               	movf	_hundreds,w
  3975  06F1  3EAC               	addlw	(low (_num_hund| 0))& (0+255)
  3976  06F2  0084               	movwf	4
  3977  06F3  1383               	bcf	3,7	;select IRP bank1
  3978  06F4  1880               	btfsc	0,1
  3979                           
  3980                           ;LED_188.c: 165: TRISB2 = 0;RB2 = 1;;
  3981  06F5  1105               	bcf	5,2	;volatile
  3982  06F6  1506               	bsf	6,2	;volatile
  3983                           
  3984                           ;LED_188.c: 166: if(num_hund[hundreds] & 0x01)
  3985  06F7  086E               	movf	_hundreds,w
  3986  06F8  3EAC               	addlw	(low (_num_hund| 0))& (0+255)
  3987  06F9  0084               	movwf	4
  3988  06FA  1800               	btfsc	0,0
  3989                           
  3990                           ;LED_188.c: 167: TRISB1 = 0;RB1 = 1;;
  3991  06FB  1085               	bcf	5,1	;volatile
  3992  06FC  1486               	bsf	6,1	;volatile
  3993  06FD  0008               	return
  3994  06FE                     __end_of_Display_Scan5:	
  3995                           
  3996                           	psect	text22
  3997  05DC                     __ptext22:	
  3998 ;; *************** function _Display_Scan4 *****************
  3999 ;; Defined at:
  4000 ;;		line 147 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_double_key\LED_188.c"
  4001 ;; Parameters:    Size  Location     Type
  4002 ;;		None
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;		None
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  1    wreg      void 
  4007 ;; Registers used:
  4008 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4009 ;; Tracked objects:
  4010 ;;		On entry : 100/0
  4011 ;;		On exit  : 900/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMMON   BANK0   BANK1
  4014 ;;      Params:         0       0       0
  4015 ;;      Locals:         0       0       0
  4016 ;;      Temps:          0       0       0
  4017 ;;      Totals:         0       0       0
  4018 ;;Total ram usage:        0 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; This function calls:
  4021 ;;		Nothing
  4022 ;; This function is called by:
  4023 ;;		_Display
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           
  4028                           ;psect for function _Display_Scan4
  4029  05DC                     _Display_Scan4:	
  4030                           
  4031                           ;LED_188.c: 149: TRISB3 = 0;RB3 = 0;;
  4032                           
  4033                           ;incstack = 0
  4034                           ; Regs used in _Display_Scan4: [wreg-fsr0h+status,2+status,0]
  4035  05DC  1185               	bcf	5,3	;volatile
  4036  05DD  1186               	bcf	6,3	;volatile
  4037                           
  4038                           ;LED_188.c: 150: if(nums[unit] & 0x04)
  4039  05DE  086D               	movf	_unit,w
  4040  05DF  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4041  05E0  0084               	movwf	4
  4042  05E1  1383               	bcf	3,7	;select IRP bank1
  4043  05E2  1900               	btfsc	0,2
  4044                           
  4045                           ;LED_188.c: 151: TRISB0 = 0;RB0 = 1;;
  4046  05E3  1005               	bcf	5,0	;volatile
  4047  05E4  1406               	bsf	6,0	;volatile
  4048                           
  4049                           ;LED_188.c: 152: if(num_hund[hundreds] & 0x04)
  4050  05E5  086E               	movf	_hundreds,w
  4051  05E6  3EAC               	addlw	(low (_num_hund| 0))& (0+255)
  4052  05E7  0084               	movwf	4
  4053  05E8  1900               	btfsc	0,2
  4054                           
  4055                           ;LED_188.c: 153: TRISB1 = 0;RB1 = 1;;
  4056  05E9  1085               	bcf	5,1	;volatile
  4057  05EA  1486               	bsf	6,1	;volatile
  4058                           
  4059                           ;LED_188.c: 154: if(num_hund[hundreds] & 0x08)
  4060  05EB  086E               	movf	_hundreds,w
  4061  05EC  3EAC               	addlw	(low (_num_hund| 0))& (0+255)
  4062  05ED  0084               	movwf	4
  4063  05EE  1980               	btfsc	0,3
  4064                           
  4065                           ;LED_188.c: 155: TRISB2 = 0;RB2 = 1;;
  4066  05EF  1105               	bcf	5,2	;volatile
  4067  05F0  1506               	bsf	6,2	;volatile
  4068                           
  4069                           ;LED_188.c: 156: if(nums[tens] & 0x01)
  4070  05F1  087D               	movf	_tens,w
  4071  05F2  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4072  05F3  0084               	movwf	4
  4073  05F4  1800               	btfsc	0,0
  4074                           
  4075                           ;LED_188.c: 157: TRISB4 = 0;RB4 = 1;;
  4076  05F5  1205               	bcf	5,4	;volatile
  4077  05F6  1606               	bsf	6,4	;volatile
  4078  05F7  0008               	return
  4079  05F8                     __end_of_Display_Scan4:	
  4080                           
  4081                           	psect	text23
  4082  05F8                     __ptext23:	
  4083 ;; *************** function _Display_Scan3 *****************
  4084 ;; Defined at:
  4085 ;;		line 133 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_double_key\LED_188.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;		None
  4088 ;; Auto vars:     Size  Location     Type
  4089 ;;		None
  4090 ;; Return value:  Size  Location     Type
  4091 ;;                  1    wreg      void 
  4092 ;; Registers used:
  4093 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4094 ;; Tracked objects:
  4095 ;;		On entry : 100/0
  4096 ;;		On exit  : 900/0
  4097 ;;		Unchanged: 0/0
  4098 ;; Data sizes:     COMMON   BANK0   BANK1
  4099 ;;      Params:         0       0       0
  4100 ;;      Locals:         0       0       0
  4101 ;;      Temps:          0       0       0
  4102 ;;      Totals:         0       0       0
  4103 ;;Total ram usage:        0 bytes
  4104 ;; Hardware stack levels used:    1
  4105 ;; This function calls:
  4106 ;;		Nothing
  4107 ;; This function is called by:
  4108 ;;		_Display
  4109 ;; This function uses a non-reentrant model
  4110 ;;
  4111                           
  4112                           
  4113                           ;psect for function _Display_Scan3
  4114  05F8                     _Display_Scan3:	
  4115                           
  4116                           ;LED_188.c: 135: TRISB2 = 0;RB2 = 0;;
  4117                           
  4118                           ;incstack = 0
  4119                           ; Regs used in _Display_Scan3: [wreg-fsr0h+status,2+status,0]
  4120  05F8  1105               	bcf	5,2	;volatile
  4121  05F9  1106               	bcf	6,2	;volatile
  4122                           
  4123                           ;LED_188.c: 136: if(nums[unit] & 0x10)
  4124  05FA  086D               	movf	_unit,w
  4125  05FB  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4126  05FC  0084               	movwf	4
  4127  05FD  1383               	bcf	3,7	;select IRP bank1
  4128  05FE  1A00               	btfsc	0,4
  4129                           
  4130                           ;LED_188.c: 137: TRISB0 = 0;RB0 = 1;;
  4131  05FF  1005               	bcf	5,0	;volatile
  4132  0600  1406               	bsf	6,0	;volatile
  4133                           
  4134                           ;LED_188.c: 138: if(nums[tens] & 0x40)
  4135  0601  087D               	movf	_tens,w
  4136  0602  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4137  0603  0084               	movwf	4
  4138  0604  1B00               	btfsc	0,6
  4139                           
  4140                           ;LED_188.c: 139: TRISB1 = 0;RB1 = 1;;
  4141  0605  1085               	bcf	5,1	;volatile
  4142  0606  1486               	bsf	6,1	;volatile
  4143                           
  4144                           ;LED_188.c: 140: if(nums[tens] & 0x10)
  4145  0607  087D               	movf	_tens,w
  4146  0608  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4147  0609  0084               	movwf	4
  4148  060A  1A00               	btfsc	0,4
  4149                           
  4150                           ;LED_188.c: 141: TRISB3 = 0;RB3 = 1;;
  4151  060B  1185               	bcf	5,3	;volatile
  4152  060C  1586               	bsf	6,3	;volatile
  4153                           
  4154                           ;LED_188.c: 142: if(nums[tens] & 0x02)
  4155  060D  087D               	movf	_tens,w
  4156  060E  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4157  060F  0084               	movwf	4
  4158  0610  1880               	btfsc	0,1
  4159                           
  4160                           ;LED_188.c: 143: TRISB4 = 0;RB4 = 1;;
  4161  0611  1205               	bcf	5,4	;volatile
  4162  0612  1606               	bsf	6,4	;volatile
  4163  0613  0008               	return
  4164  0614                     __end_of_Display_Scan3:	
  4165                           
  4166                           	psect	text24
  4167  0614                     __ptext24:	
  4168 ;; *************** function _Display_Scan2 *****************
  4169 ;; Defined at:
  4170 ;;		line 119 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_double_key\LED_188.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;		None
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;		None
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  1    wreg      void 
  4177 ;; Registers used:
  4178 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4179 ;; Tracked objects:
  4180 ;;		On entry : 100/0
  4181 ;;		On exit  : 900/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMMON   BANK0   BANK1
  4184 ;;      Params:         0       0       0
  4185 ;;      Locals:         0       0       0
  4186 ;;      Temps:          0       0       0
  4187 ;;      Totals:         0       0       0
  4188 ;;Total ram usage:        0 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; This function calls:
  4191 ;;		Nothing
  4192 ;; This function is called by:
  4193 ;;		_Display
  4194 ;; This function uses a non-reentrant model
  4195 ;;
  4196                           
  4197                           
  4198                           ;psect for function _Display_Scan2
  4199  0614                     _Display_Scan2:	
  4200                           
  4201                           ;LED_188.c: 121: TRISB1 = 0;RB1 = 0;;
  4202                           
  4203                           ;incstack = 0
  4204                           ; Regs used in _Display_Scan2: [wreg-fsr0h+status,2+status,0]
  4205  0614  1085               	bcf	5,1	;volatile
  4206  0615  1086               	bcf	6,1	;volatile
  4207                           
  4208                           ;LED_188.c: 122: if(nums[unit] &0x40)
  4209  0616  086D               	movf	_unit,w
  4210  0617  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4211  0618  0084               	movwf	4
  4212  0619  1383               	bcf	3,7	;select IRP bank1
  4213  061A  1B00               	btfsc	0,6
  4214                           
  4215                           ;LED_188.c: 123: TRISB0 = 0;RB0 = 1;;
  4216  061B  1005               	bcf	5,0	;volatile
  4217  061C  1406               	bsf	6,0	;volatile
  4218                           
  4219                           ;LED_188.c: 124: if(nums[tens] & 0x20)
  4220  061D  087D               	movf	_tens,w
  4221  061E  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4222  061F  0084               	movwf	4
  4223  0620  1A80               	btfsc	0,5
  4224                           
  4225                           ;LED_188.c: 125: TRISB2 = 0;RB2 = 1;;
  4226  0621  1105               	bcf	5,2	;volatile
  4227  0622  1506               	bsf	6,2	;volatile
  4228                           
  4229                           ;LED_188.c: 126: if(nums[tens] & 0x08)
  4230  0623  087D               	movf	_tens,w
  4231  0624  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4232  0625  0084               	movwf	4
  4233  0626  1980               	btfsc	0,3
  4234                           
  4235                           ;LED_188.c: 127: TRISB3 = 0;RB3 = 1;;
  4236  0627  1185               	bcf	5,3	;volatile
  4237  0628  1586               	bsf	6,3	;volatile
  4238                           
  4239                           ;LED_188.c: 128: if(nums[tens] & 0x04)
  4240  0629  087D               	movf	_tens,w
  4241  062A  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4242  062B  0084               	movwf	4
  4243  062C  1900               	btfsc	0,2
  4244                           
  4245                           ;LED_188.c: 129: TRISB4 = 0;RB4 = 1;;
  4246  062D  1205               	bcf	5,4	;volatile
  4247  062E  1606               	bsf	6,4	;volatile
  4248  062F  0008               	return
  4249  0630                     __end_of_Display_Scan2:	
  4250                           
  4251                           	psect	text25
  4252  0630                     __ptext25:	
  4253 ;; *************** function _Display_Scan1 *****************
  4254 ;; Defined at:
  4255 ;;		line 105 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_double_key\LED_188.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;		None
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;		None
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  1    wreg      void 
  4262 ;; Registers used:
  4263 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4264 ;; Tracked objects:
  4265 ;;		On entry : 100/0
  4266 ;;		On exit  : 900/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMMON   BANK0   BANK1
  4269 ;;      Params:         0       0       0
  4270 ;;      Locals:         0       0       0
  4271 ;;      Temps:          0       0       0
  4272 ;;      Totals:         0       0       0
  4273 ;;Total ram usage:        0 bytes
  4274 ;; Hardware stack levels used:    1
  4275 ;; This function calls:
  4276 ;;		Nothing
  4277 ;; This function is called by:
  4278 ;;		_Display
  4279 ;; This function uses a non-reentrant model
  4280 ;;
  4281                           
  4282                           
  4283                           ;psect for function _Display_Scan1
  4284  0630                     _Display_Scan1:	
  4285                           
  4286                           ;LED_188.c: 107: TRISB0 = 0;RB0 = 0;;
  4287                           
  4288                           ;incstack = 0
  4289                           ; Regs used in _Display_Scan1: [wreg-fsr0h+status,2+status,0]
  4290  0630  1005               	bcf	5,0	;volatile
  4291  0631  1006               	bcf	6,0	;volatile
  4292                           
  4293                           ;LED_188.c: 108: if(nums[unit] & 0x20)
  4294  0632  086D               	movf	_unit,w
  4295  0633  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4296  0634  0084               	movwf	4
  4297  0635  1383               	bcf	3,7	;select IRP bank1
  4298  0636  1A80               	btfsc	0,5
  4299                           
  4300                           ;LED_188.c: 109: TRISB1 = 0;RB1 = 1;;
  4301  0637  1085               	bcf	5,1	;volatile
  4302  0638  1486               	bsf	6,1	;volatile
  4303                           
  4304                           ;LED_188.c: 110: if(nums[unit] & 0x08)
  4305  0639  086D               	movf	_unit,w
  4306  063A  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4307  063B  0084               	movwf	4
  4308  063C  1980               	btfsc	0,3
  4309                           
  4310                           ;LED_188.c: 111: TRISB2 = 0;RB2 = 1;;
  4311  063D  1105               	bcf	5,2	;volatile
  4312  063E  1506               	bsf	6,2	;volatile
  4313                           
  4314                           ;LED_188.c: 112: if(nums[unit] & 0x02)
  4315  063F  086D               	movf	_unit,w
  4316  0640  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4317  0641  0084               	movwf	4
  4318  0642  1880               	btfsc	0,1
  4319                           
  4320                           ;LED_188.c: 113: TRISB3 = 0;RB3 = 1;;
  4321  0643  1185               	bcf	5,3	;volatile
  4322  0644  1586               	bsf	6,3	;volatile
  4323                           
  4324                           ;LED_188.c: 114: if(nums[unit] &0x01)
  4325  0645  086D               	movf	_unit,w
  4326  0646  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4327  0647  0084               	movwf	4
  4328  0648  1800               	btfsc	0,0
  4329                           
  4330                           ;LED_188.c: 115: TRISB4 = 0;RB4 = 1;;
  4331  0649  1205               	bcf	5,4	;volatile
  4332  064A  1606               	bsf	6,4	;volatile
  4333  064B  0008               	return
  4334  064C                     __end_of_Display_Scan1:	
  4335                           
  4336                           	psect	text26
  4337  05BA                     __ptext26:	
  4338 ;; *************** function _Charge_num *****************
  4339 ;; Defined at:
  4340 ;;		line 11 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_double_key\LED_188.c"
  4341 ;; Parameters:    Size  Location     Type
  4342 ;;		None
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;  hundred         1    9[COMMON] unsigned char 
  4345 ;; Return value:  Size  Location     Type
  4346 ;;                  1    wreg      void 
  4347 ;; Registers used:
  4348 ;;		wreg, status,2, status,0, pclath, cstack
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 100/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMMON   BANK0   BANK1
  4354 ;;      Params:         0       0       0
  4355 ;;      Locals:         1       0       0
  4356 ;;      Temps:          0       0       0
  4357 ;;      Totals:         1       0       0
  4358 ;;Total ram usage:        1 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:    1
  4361 ;; This function calls:
  4362 ;;		___lbdiv
  4363 ;;		___lbmod
  4364 ;; This function is called by:
  4365 ;;		_Isr_Timer
  4366 ;; This function uses a non-reentrant model
  4367 ;;
  4368                           
  4369                           
  4370                           ;psect for function _Charge_num
  4371  05BA                     _Charge_num:	
  4372                           
  4373                           ;LED_188.c: 13: bool hundred = (bool)(power_percent / 100);
  4374                           
  4375                           ;incstack = 0
  4376                           ; Regs used in _Charge_num: [wreg+status,2+status,0+pclath+cstack]
  4377  05BA  25D2               	fcall	PL30	;call to abstracted procedure
  4378  05BB  2668               	fcall	___lbdiv
  4379  05BC  00F9               	movwf	Charge_num@hundred
  4380                           
  4381                           ;LED_188.c: 14: tens = (unsigned char)((power_percent % 100) / 10);
  4382  05BD  25CC               	fcall	PL18	;call to abstracted procedure
  4383  05BE  264C               	fcall	___lbmod
  4384  05BF  2668               	fcall	___lbdiv
  4385                           
  4386                           ;LED_188.c: 15: unit = (unsigned char)(power_percent % 10);
  4387  05C0  25D7               	fcall	PL32	;call to abstracted procedure
  4388  05C1  264C               	fcall	___lbmod
  4389  05C2  00ED               	movwf	_unit
  4390                           
  4391                           ;LED_188.c: 16: if(hundred)
  4392  05C3  0879               	movf	Charge_num@hundred,w
  4393  05C4  1903               	btfsc	3,2
  4394  05C5  2DC9               	goto	i1l4623
  4395                           
  4396                           ;LED_188.c: 17: {
  4397                           ;LED_188.c: 18: hundreds = 4;
  4398  05C6  3004               	movlw	4
  4399  05C7  00EE               	movwf	_hundreds
  4400                           
  4401                           ;LED_188.c: 19: }
  4402  05C8  0008               	return
  4403  05C9                     i1l4623:	
  4404                           
  4405                           ;LED_188.c: 20: else
  4406                           ;LED_188.c: 21: {
  4407                           ;LED_188.c: 22: hundreds = 2;
  4408  05C9  3002               	movlw	2
  4409  05CA  00EE               	movwf	_hundreds
  4410  05CB  0008               	return
  4411  05CC                     __end_of_Charge_num:	
  4412  05CC                     PL18:	
  4413  05CC  300A               	movlw	10
  4414  05CD  00F5               	movwf	___lbdiv@divisor
  4415  05CE  3064               	movlw	100
  4416  05CF  00F0               	movwf	___lbmod@divisor
  4417  05D0  0867               	movf	_power_percent,w	;volatile
  4418  05D1  0008               	return
  4419  05D2                     __end_ofPL18:	
  4420  05D2                     PL30:	
  4421  05D2  3064               	movlw	100
  4422  05D3  00F5               	movwf	___lbdiv@divisor
  4423  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  4424  05D5  0867               	movf	_power_percent,w	;volatile
  4425  05D6  0008               	return
  4426  05D7                     __end_ofPL30:	
  4427  05D7                     PL32:	
  4428  05D7  00FD               	movwf	_tens
  4429  05D8  300A               	movlw	10
  4430  05D9  00F0               	movwf	___lbmod@divisor
  4431  05DA  0867               	movf	_power_percent,w	;volatile
  4432  05DB  0008               	return
  4433  05DC                     __end_ofPL32:	
  4434                           
  4435                           	psect	text27
  4436  064C                     __ptext27:	
  4437 ;; *************** function ___lbmod *****************
  4438 ;; Defined at:
  4439 ;;		line 4 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\lbmod.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  dividend        1    wreg     unsigned char 
  4442 ;;  divisor         1    0[COMMON] unsigned char 
  4443 ;; Auto vars:     Size  Location     Type
  4444 ;;  dividend        1    2[COMMON] unsigned char 
  4445 ;;  rem             1    4[COMMON] unsigned char 
  4446 ;;  counter         1    3[COMMON] unsigned char 
  4447 ;; Return value:  Size  Location     Type
  4448 ;;                  1    wreg      unsigned char 
  4449 ;; Registers used:
  4450 ;;		wreg, status,2, status,0
  4451 ;; Tracked objects:
  4452 ;;		On entry : 100/0
  4453 ;;		On exit  : 100/0
  4454 ;;		Unchanged: 100/0
  4455 ;; Data sizes:     COMMON   BANK0   BANK1
  4456 ;;      Params:         1       0       0
  4457 ;;      Locals:         3       0       0
  4458 ;;      Temps:          1       0       0
  4459 ;;      Totals:         5       0       0
  4460 ;;Total ram usage:        5 bytes
  4461 ;; Hardware stack levels used:    1
  4462 ;; This function calls:
  4463 ;;		Nothing
  4464 ;; This function is called by:
  4465 ;;		_Charge_num
  4466 ;;		_Uncharge_num
  4467 ;; This function uses a non-reentrant model
  4468 ;;
  4469                           
  4470                           
  4471                           ;psect for function ___lbmod
  4472  064C                     ___lbmod:	
  4473                           
  4474                           ;incstack = 0
  4475                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  4476                           ;___lbmod@dividend stored from wreg
  4477  064C  00F2               	movwf	___lbmod@dividend
  4478  064D  3008               	movlw	8
  4479  064E  00F3               	movwf	___lbmod@counter
  4480  064F  01F4               	clrf	___lbmod@rem
  4481  0650                     i1l4411:	
  4482  0650  0872               	movf	___lbmod@dividend,w
  4483  0651  00F1               	movwf	??___lbmod
  4484  0652  3007               	movlw	7
  4485  0653  1003               	clrc
  4486  0654                     L8:	
  4487  0654  0CF1               	rrf	??___lbmod,f
  4488  0655  3EFF               	addlw	-1
  4489  0656  1003               	clrc
  4490  0657  1D03               	skipz
  4491  0658  2E54               	goto	L8
  4492  0659  0D74               	rlf	___lbmod@rem,w
  4493  065A  0471               	iorwf	??___lbmod,w
  4494  065B  00F4               	movwf	___lbmod@rem
  4495  065C  1003               	clrc
  4496  065D  0DF2               	rlf	___lbmod@dividend,f
  4497  065E  0870               	movf	___lbmod@divisor,w
  4498  065F  0274               	subwf	___lbmod@rem,w
  4499  0660  1C03               	skipc
  4500  0661  2E64               	goto	i1l4419
  4501  0662  0870               	movf	___lbmod@divisor,w
  4502  0663  02F4               	subwf	___lbmod@rem,f
  4503  0664                     i1l4419:	
  4504  0664  0BF3               	decfsz	___lbmod@counter,f
  4505  0665  2E50               	goto	i1l4411
  4506  0666  0874               	movf	___lbmod@rem,w
  4507  0667  0008               	return
  4508  0668                     __end_of___lbmod:	
  4509                           
  4510                           	psect	text28
  4511  0668                     __ptext28:	
  4512 ;; *************** function ___lbdiv *****************
  4513 ;; Defined at:
  4514 ;;		line 4 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\lbdiv.c"
  4515 ;; Parameters:    Size  Location     Type
  4516 ;;  dividend        1    wreg     unsigned char 
  4517 ;;  divisor         1    5[COMMON] unsigned char 
  4518 ;; Auto vars:     Size  Location     Type
  4519 ;;  dividend        1    6[COMMON] unsigned char 
  4520 ;;  quotient        1    8[COMMON] unsigned char 
  4521 ;;  counter         1    7[COMMON] unsigned char 
  4522 ;; Return value:  Size  Location     Type
  4523 ;;                  1    wreg      unsigned char 
  4524 ;; Registers used:
  4525 ;;		wreg, status,2, status,0
  4526 ;; Tracked objects:
  4527 ;;		On entry : 100/0
  4528 ;;		On exit  : 100/0
  4529 ;;		Unchanged: 100/0
  4530 ;; Data sizes:     COMMON   BANK0   BANK1
  4531 ;;      Params:         1       0       0
  4532 ;;      Locals:         3       0       0
  4533 ;;      Temps:          0       0       0
  4534 ;;      Totals:         4       0       0
  4535 ;;Total ram usage:        4 bytes
  4536 ;; Hardware stack levels used:    1
  4537 ;; This function calls:
  4538 ;;		Nothing
  4539 ;; This function is called by:
  4540 ;;		_Charge_num
  4541 ;;		_Uncharge_num
  4542 ;; This function uses a non-reentrant model
  4543 ;;
  4544                           
  4545                           
  4546                           ;psect for function ___lbdiv
  4547  0668                     ___lbdiv:	
  4548                           
  4549                           ;incstack = 0
  4550                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  4551                           ;___lbdiv@dividend stored from wreg
  4552  0668  00F6               	movwf	___lbdiv@dividend
  4553  0669  01F8               	clrf	___lbdiv@quotient
  4554  066A  0875               	movf	___lbdiv@divisor,w
  4555  066B  1903               	btfsc	3,2
  4556  066C  2E81               	goto	i1l4403
  4557  066D  01F7               	clrf	___lbdiv@counter
  4558  066E                     i1l4389:	
  4559  066E  0AF7               	incf	___lbdiv@counter,f
  4560  066F  1BF5               	btfsc	___lbdiv@divisor,7
  4561  0670  2E74               	goto	i1l2911
  4562  0671  1003               	clrc
  4563  0672  0DF5               	rlf	___lbdiv@divisor,f
  4564  0673  2E6E               	goto	i1l4389
  4565  0674                     i1l2911:	
  4566  0674  1003               	clrc
  4567  0675  0DF8               	rlf	___lbdiv@quotient,f
  4568  0676  0875               	movf	___lbdiv@divisor,w
  4569  0677  0276               	subwf	___lbdiv@dividend,w
  4570  0678  1C03               	skipc
  4571  0679  2E7E               	goto	L9
  4572  067A  0875               	movf	___lbdiv@divisor,w
  4573  067B  02F6               	subwf	___lbdiv@dividend,f
  4574  067C  1478               	bsf	___lbdiv@quotient,0
  4575  067D  1003               	clrc
  4576  067E                     L9:	
  4577  067E  0CF5               	rrf	___lbdiv@divisor,f
  4578  067F  0BF7               	decfsz	___lbdiv@counter,f
  4579  0680  2E74               	goto	i1l2911
  4580  0681                     i1l4403:	
  4581  0681  0878               	movf	___lbdiv@quotient,w
  4582  0682  0008               	return
  4583  0683                     __end_of___lbdiv:	
  4584  007E                     btemp	set	126	;btemp
  4585  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    6
    Data        20
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     56      79
    BANK1            80      0      19

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Isr_Timer in COMMON

    _Isr_Timer->_Charge_num
    _Isr_Timer->_Uncharge_num
    _Uncharge_num->___lbdiv
    _Charge_num->___lbdiv
    ___lbdiv->___lbmod

Critical Paths under _main in BANK0

    _main->_ADC_read
    _Button_response->_Set_PWM
    _Set_PWM->___lwdiv
    ___lwdiv->___wmul
    _ADC_read->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___lwtoft

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10272
                           _ADC_read
                    _Button_response
                        _Init_System
                      _Led_Gpio_Init
                           _PWM_Init
 ---------------------------------------------------------------------------------
 (1) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Led_Gpio_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Button_response                                      0     0      0    2657
                          _Motor_num
                            _Set_PWM
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     552
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _Set_PWM                                              4     3      1    2105
                                             13 BANK0      4     3      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     198
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     268
                                              6 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _Motor_num                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_read                                             5     5      0    7615
                                             51 BANK0      5     5      0
                         _ADC_Sample
                            ___ftadd
                            ___ftdiv
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    1796
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     358
                                             38 BANK0     13     9      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2162
                                             23 BANK0     15     9      6
                            ___ftadd (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    2694
                                             11 BANK0     12     6      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1668
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     582
                                              0 BANK0     18    17      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Isr_Timer                                            3     3      0    1536
                                             10 COMMON     3     3      0
                         _Charge_num
                            _Display
                       _Uncharge_num
 ---------------------------------------------------------------------------------
 (5) _Uncharge_num                                         1     1      0     768
                                              9 COMMON     1     1      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (5) _Display                                              0     0      0       0
                      _Display_Scan1
                      _Display_Scan2
                      _Display_Scan3
                      _Display_Scan4
                      _Display_Scan5
                   _Set_AllPin_INPUT
 ---------------------------------------------------------------------------------
 (6) _Set_AllPin_INPUT                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Display_Scan5                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Display_Scan4                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Display_Scan3                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Display_Scan2                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Display_Scan1                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Charge_num                                           1     1      0     768
                                              9 COMMON     1     1      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (6) ___lbmod                                              5     4      1     371
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (6) ___lbdiv                                              4     3      1     374
                                              5 COMMON     4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_read
     _ADC_Sample
     ___ftadd
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___ftadd (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _Button_response
     _Motor_num
     _Set_PWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
     ___awmod
   _Init_System
   _Led_Gpio_Init
   _PWM_Init

 _Isr_Timer (ROOT)
   _Charge_num
     ___lbdiv
       ___lbmod (ARG)
     ___lbmod
   _Display
     _Display_Scan1
     _Display_Scan2
     _Display_Scan3
     _Display_Scan4
     _Display_Scan5
     _Set_AllPin_INPUT
   _Uncharge_num
     ___lbdiv
       ___lbmod (ARG)
     ___lbmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK1               50      0      13       6       23.8%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     38      4F       4       98.8%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      70       8        0.0%
ABS                  0      0      70       7        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Dec 22 15:23:10 2024

                        pc 0002                         PL2 020F                         PL4 0125  
                       PL6 012E                         PL8 021E                         fsr 0004  
      ___wmul@multiplicand 0022               ___ftadd@exp1 0036               ___ftadd@exp2 0035  
                      PL10 0442                        PL20 0137                        PL12 0728  
                      PL30 05D2                        PL22 013B                        PL14 04A0  
                      PL32 05D7                        PL24 04E3                        PL16 02E4  
                      PL26 0227                        PL18 05CC                        PL28 03E3  
             ___ftadd@sign 0034                        l680 01B0                        l674 0175  
                      l659 070F                        l684 01F4                        _GIE 005F  
                      _RB0 0030                        _RB1 0031                        _RB2 0032  
                      _RB3 0033                        _RB4 0034                        _PR2 0011  
      __size_of_ADC_Sample 00D0                        fsr0 0004                        indf 0000  
             ___awmod@sign 0025                       S4841 072E                       S4843 0733  
                     S4845 0738               ___ftdiv@cntr 0040               ___ftdiv@sign 0045  
                     l4021 0153                       l4031 015F                       l4023 0157  
                     l4007 05B5                       l4211 0505                       l4203 04F9  
                     l4061 01AC                       l4037 0160                       l4071 01F8  
                     l4055 019A                       l4047 0180                       l4223 0520  
                     l4233 024F                       l4059 01A4                       l4243 0265  
                     l4307 038F                       l4219 0518                       l2805 04AF  
                     l4261 0282                       l4237 0256                       l4181 0581  
                     l4173 0573                       l4263 0287                       l4255 0273  
                     l4175 0576                       l4511 0066                       l4503 0046  
                     l2817 04D1                       l4281 02B3                       l4273 029F  
                     l2841 02A8                       l4265 028C                       l4329 03B0  
                     l4345 0451                       l4177 0579                       l4185 0584  
                     l4505 004E                       l4275 02A4                       l4267 0290  
                     l4363 0473                       l4347 0456                       l4179 057D  
                     l4507 0056                       l4515 006E                       l4373 047F  
                     l4613 043F                       l4541 00AC                       l4509 005E  
                     l4517 007A                       l4525 0087                       l4287 02BA  
                     l4375 0489                       l4367 047B                       l4199 04F2  
                     l4551 00B6                       l4609 0436                       l4553 00C1  
                     l4299 02D2                       l2859 039D                       l4379 0497  
                     l4555 00C9                       l4571 00F9                       l4557 00D4  
                     l4573 00FF                       l3951 06A7                       l4559 00DD  
                     l4569 00ED                       l3971 04C1                       l3947 069F  
                     l3965 04B3                       l3975 04CF                       l3967 04B5  
                     l3977 04C6                       l3969 04BA                       l3995 059E  
                     _CHS4 04B6                       _T0IE 005D                       _T0IF 005A  
                     u2015 0458                       _IOCA 0089                       _IOCB 0009  
                     u1505 0201                       u1345 05A7                       u1435 01A0  
                     u1445 01AA                       u1485 01EA                       u2437 043C  
                     u2447 014F                       u1735 050B                       _RAIE 0073  
                     _RAIF 006B                       _RBIE 005B                       _RBIF 0058  
                     u1985 03BE                       _TMR0 0081                       _WPDA 0087  
                     _WPDB 0007                       _WPUA 0088                       _WPUB 0008  
               _Charge_num 05BA                       _main 070C               ___ftpack@arg 0020  
             ___ftpack@exp 0023                       _tens 007D                       _nums 00A0  
                     _unit 006D                       btemp 007E                       start 000C  
         __end_of_ADC_read 0442            __end_of_Display 069D               ___fttol@exp1 0052  
            ??_Init_System 0020               ___fttol@lval 004E            __end_of_Set_PWM 0590  
                    ?_main 0070           _Set_AllPin_INPUT 0727            __end_of___lbdiv 0683  
          __end_of___ftadd 02E4            __end_of___awmod 0525            __end_of___lbmod 0668  
          __end_of___ftdiv 03E3            __end_of___fttol 04A0                      _T2CON 0013  
          __end_of___lwdiv 05BA                      i1l701 0316                      i1l715 0373  
                    i1l719 0378                      _PORTA 0086                      _PORTB 0006  
                    _TRISA 0085                      _TRISB 0005                      _PWMTH 0018  
                    _PWMTL 0017              ___ftpack@sign 0024                      pclath 000A  
         __end_of_PWM_Init 06CC                      status 0003                      wtemp0 007E  
          ___lbdiv@divisor 0075            ___lbdiv@counter 0077            __initialization 000D  
             __end_of_main 0718                     ??_main 0058              ___fttol@sign1 004D  
      __end_of_Init_System 055E                     _ADCON0 0095                     _ADCON1 0096  
                   i1S4847 073D                     _ADRESH 0099                     _ADRESL 0098  
         __end_of___ftpack 04E3                     _GODONE 04A9                     i1l1333 06DB  
                   i1l4403 0681                     i1l4411 0650                     i1l2911 0674  
                   i1l4419 0664                     i1l4701 031A                     i1l4623 05C9  
                   i1l4641 068A                     i1l4633 0685                     i1l4651 068F  
                   i1l4635 0686                     i1l4715 0339                     i1l4389 066E  
                   i1l4645 068C                     i1l4637 0688                     i1l4725 0346  
                   i1l4733 0357                     i1l4709 0329                     i1l4717 033B  
                   i1l4743 0367                     i1l4649 068E                     i1l4657 0691  
                   i1l4729 0351                     i1l4739 0361                     i1l4691 030C  
                   i1l4749 0377                     i1l4685 02FC                     i1l4693 030E  
                   _LDO_EN 04B2                     _INTCON 000B           __end_of___lwtoft 06EE  
              ?_Charge_num 0070                     _OSCCON 0014                     _TMR2IE 0071  
                   _TMR2IF 0069                     _PWMD0L 0019                     _PWMD1L 001A  
                   _PWMD2L 009B                     _PWMD3L 009C                     _PWMD4L 001B  
             ??_ADC_Sample 0021                     _PWMT4L 001C                     _TRISA0 0428  
                   _TRISA1 0429                     _TRISA2 042A                     _TRISB0 0028  
                   _TRISB1 0029                     _TRISA4 042C                     _TRISB2 002A  
                   _TRISB3 002B                     _TRISB4 002C                  ??_Display 0070  
       __size_of_Isr_Timer 0097                  ??_Set_PWM 002E                     _T_flag 0063  
               _Time_delay 00B1                     ___wmul 069D                  ??___lbdiv 0076  
                ??___ftadd 0031                  ??___awmod 0024                  ??___lbmod 0071  
                ??___ftdiv 003D                  ??___fttol 004A                  ??___lwdiv 002A  
    __end_of_Led_Gpio_Init 0744            ___awmod@divisor 0020            ___awmod@counter 0024  
       __size_of_Motor_num 0007               __pdataCOMMON 007D         __end_of_ADC_Sample 020F  
                   saved_w 007E                  ?_ADC_read 0070           ___lbdiv@dividend 0076  
 __size_of_Button_response 00E7            ___lbmod@divisor 0070                Set_PWM@duty 002D  
  __end_of__initialization 003C            ___lbmod@counter 0073                 ___ftadd@f1 002B  
               ___ftadd@f2 002E                 ___ftdiv@f1 003A                 ___ftdiv@f2 0037  
               ___ftdiv@f3 0041                 ___fttol@f1 0046             __pcstackCOMMON 0070  
          _LED_Key_counter 0058               __pidataBANK0 0000               __pidataBANK1 0000  
              _Init_System 0525         Set_PWM@pulse_width 002F                 __end_ofPL2 021E  
               __end_ofPL4 012E                 __end_ofPL6 0137                 __end_ofPL8 0227  
         ___lbdiv@quotient 0078                 ___lwtoft@c 0028                  ?_PWM_Init 0070  
      __size_of_Charge_num 0012          __end_of_Isr_Timer 0381                 ??_ADC_read 0053  
               __pbssBANK0 0058                 __pbssBANK1 00B1   __end_of_Set_AllPin_INPUT 0728  
       _long_press_counter 005A          __end_of_Motor_num 0727                 __pmaintext 070C  
    __end_of_Display_Scan1 064C      __end_of_Display_Scan2 0630      __end_of_Display_Scan3 0614  
    __end_of_Display_Scan4 05F8      __end_of_Display_Scan5 06FE                    ?___wmul 0020  
               __pintentry 0004                  ?___ftpack 0020                 ??_PWM_Init 0020  
                ?___lwtoft 0028                    _LED_num 0069                    _PWMD01H 001E  
                  _PWMD23H 009E                    _PWMCON0 0015                    _PWMCON1 0016  
                  _PWMCON2 001D                 __stringtab 0700                    _Display 0683  
                  _Set_PWM 055E          ??_Button_response 0031                  _ADC_delay 005C  
          ADC_Sample@adldo 0020            ADC_Sample@admax 002E            ADC_Sample@admin 002C  
          ADC_Sample@adsum 0028                    ___lbdiv 0668                    ___ftadd 022C  
                  ___awmod 04E8                    ___lbmod 064C                    ___ftdiv 0381  
          __size_of___wmul 0019                    ___fttol 0449                    ___lwdiv 0590  
               ??___ftpack 0025              ?_Uncharge_num 0070                    __ptext1 06B6  
                  __ptext2 0742                    __ptext3 0525                    __ptext4 003E  
                  __ptext5 04E8                    __ptext6 055E                    __ptext7 069D  
                  __ptext8 0590                    __ptext9 0720                 ??___lwtoft 002B  
         ___awmod@dividend 0022                 _duty_steps 0706                    clrloop0 0719  
     end_of_initialization 003C               ??_Charge_num 0079                  _LED_lflag 0062  
                _LED_sflag 0061            Display@scan_cnt 0060             ??_Uncharge_num 0079  
       __end_of_Charge_num 05CC           ___lbmod@dividend 0072          __size_of_ADC_read 005B  
              ___lbmod@rem 0074                ___ftdiv@exp 0044         ADC_read@power_temp 0054  
             ?_Init_System 0070             __end_of___wmul 06B6              __pidataCOMMON 0000  
              __end_ofPL10 0449                __end_ofPL20 013B                __end_ofPL12 072E  
              __end_ofPL30 05D7                __end_ofPL22 013F                __end_ofPL14 04A7  
              __end_ofPL32 05DC                __end_ofPL24 04E8                __end_ofPL16 02EA  
              __end_ofPL26 022C                __end_ofPL18 05D2                __end_ofPL28 03E7  
        __size_of_PWM_Init 0016        start_initialization 000D                  _Isr_Timer 02EA  
   __size_of_Led_Gpio_Init 0002          ?_Set_AllPin_INPUT 0070         ??_Set_AllPin_INPUT 0070  
                _Motor_num 0720                   ??___wmul 0024          ADC_Sample@ad_temp 0030  
              __pdataBANK0 006D                __pdataBANK1 00A0          __size_of___ftpack 003C  
                ___latbits 0000          __size_of___lwtoft 0010              __pcstackBANK0 0020  
          _Button_response 003E                 ?_Isr_Timer 0070        Uncharge_num@hundred 0079  
     __end_of_Uncharge_num 06DE                   ?_Display 0070               _button_lflag 0064  
             _button_sflag 0065                   ?_Set_PWM 002D           ___lwdiv@dividend 0028  
               ?_Motor_num 0070                   ?___lbdiv 0075                   ?___ftadd 002B  
                 ?___awmod 0020                   ?___lbmod 0070                   ?___ftdiv 0037  
                 ?___fttol 0046                   ?___lwdiv 0026              _Led_Gpio_Init 0742  
                __pstrings 0700                  __pswtext1 072E                  __pswtext2 0733  
                __pswtext3 0738                  __pswtext4 073D                   _ADC_Flag 0066  
                 _ADC_read 03E7             ADC_Sample@adch 0026           ___lwdiv@quotient 002A  
   __size_of_Display_Scan1 001C     __size_of_Display_Scan2 001C     __size_of_Display_Scan3 001C  
   __size_of_Display_Scan4 001C     __size_of_Display_Scan5 0010                ADC_Sample@i 0027  
              ADC_Sample@j 0025          interrupt_function 0004             ___wmul@product 0024  
                clear_ram0 0718             ?_Led_Gpio_Init 0070                __stringbase 0705  
                 _PWM_Init 06B6          ___wmul@multiplier 0020       __size_of_Init_System 0039  
  __end_of_Button_response 0125                ??_Isr_Timer 007A                 _ADC_Sample 013F  
         __size_of_Display 001A           __size_of_Set_PWM 0032                ??_Motor_num 0020  
            _Display_Scan1 0630              _Display_Scan2 0614              _Display_Scan3 05F8  
            _Display_Scan4 05DC              _Display_Scan5 06EE           __size_of___lbdiv 001B  
         __size_of___ftadd 00B8           __size_of___awmod 003D           __size_of___lbmod 001C  
         __size_of___ftdiv 0062           __size_of___fttol 0057           __size_of___lwdiv 002A  
                 ___ftpack 04A7         __end_of__stringtab 0706                   ___lwtoft 06DE  
                 _adresult 006B            ___lwdiv@divisor 0026      __size_of_Uncharge_num 0012  
          ___lwdiv@counter 002C                   __ptext10 03E7                   __ptext11 06DE  
                 __ptext20 0727                   __ptext12 0449                   __ptext21 06EE  
                 __ptext13 0381                   __ptext22 05DC                   __ptext14 022C  
                 __ptext23 05F8                   __ptext15 04A7                   __ptext24 0614  
                 __ptext16 013F                   __ptext25 0630                   __ptext17 02EA  
                 __ptext26 05BA                   __ptext18 06CC                   __ptext27 064C  
                 __ptext19 0683                   __ptext28 0668              __size_of_main 000C  
                 _hundreds 006E             ?_Display_Scan1 0070                   _num_hund 00AC  
           ?_Display_Scan2 0070             ?_Display_Scan3 0070             ?_Display_Scan4 0070  
           ?_Display_Scan5 0070                   _test_adc 0068            ??_Led_Gpio_Init 0020  
                 _power_ad 005E         __end_of_duty_steps 070C                   _pwm_duty 006A  
             _Uncharge_num 06CC  __size_of_Set_AllPin_INPUT 0001           ?_Button_response 0070  
                 intlevel1 0000                ?_ADC_Sample 0020                  stringcode 0700  
        Charge_num@hundred 0079                 _OPTION_REG 0001                   stringdir 0700  
                 stringtab 0700              _power_percent 0067             Set_PWM@channel 002E  
          ??_Display_Scan1 0070            ??_Display_Scan2 0070            ??_Display_Scan3 0070  
          ??_Display_Scan4 0070            ??_Display_Scan5 0070  

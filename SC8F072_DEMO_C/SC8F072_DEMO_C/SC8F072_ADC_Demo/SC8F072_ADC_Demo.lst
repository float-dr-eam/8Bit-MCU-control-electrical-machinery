---- H:\MyDownloads\说明书&测试报告\开发包\SC8F072开发包\SC8F072_DEMO_C\SC8F072_ADC_Demo\SC8F072_ADC.c ----------------------------------------------------------------------
1:                /**********************************************************
2:                AD检测范例程序
3:                **********************************************************/
4:                #pragma warning disable 752
5:                #pragma warning disable 373			//屏蔽掉编译的1个警告
6:                #include <sc.h>
7:                
8:                #ifndef _XTAL_FREQ
9:                #define _XTAL_FREQ 16000000			//16MHz,使用内置延时函数必须定义主频，
10:               									//如用FCPU_DIV选择2T，则定时赋值减半
11:               #endif
12:               
13:               #define     POWER_RATIO  	(4096UL*1.2*1000)
14:               
15:               volatile unsigned int adresult;
16:               volatile unsigned int result;
17:               volatile unsigned char test_adc;
18:               volatile unsigned int power_ad;
19:               
20:               unsigned char ADC_Sample(unsigned char adch, unsigned char adldo);
21:               void DelayXms(unsigned char x);
22:               unsigned char ADC_Result(unsigned char adch);
23:               void Init_System();
24:               void AD_Init();
25:               
26:               #define _DEBUG			//调试程序用
27:               
28:               /**********************************************************
29:               函数名称：AD_Sample
30:               函数功能：AD检测
31:               入口参数：adch - 检测通道
32:               出口参数：无
33:               备    注：采样通道需自行设置为输入口
34:               	      采样10次,取中间八次的平均值为采样结果存于adresult中
35:               
36:               	      adch 为输入AD通道 0-15，31
37:                            31  检测内部1.2V
38:               	
39:                		  adldo =5,开启内部LDO 2V 作为ADC 参考
40:                		  adldo =6,开启内部LDO 2.4V 作为ADC 参考
41:               		  adldo =7,开启内部LDO 3V 作为ADC 参考
42:                		  adldo =0,VDD 作为ADC 参考
43:                		  AD转换结果左对齐
44:                		  ADC参考电压从VDD切换到LDO时需要延时100us以上，才能进行AD转换
45:               **********************************************************/
46:               unsigned char ADC_Sample(unsigned char adch, unsigned char adldo) 
  0014    1283    CLRB	0x3,5
  0015    00A1    LD	0x21,A
47:               {
48:               	volatile unsigned long adsum = 0;
49:               	volatile unsigned int admin = 0, admax = 0;
  0016    20ED    CALL	0xED
50:               	volatile unsigned int ad_temp = 0;
  0017    01AB    CLR	0x2B
  0018    01AC    CLR	0x2C
51:               
52:               	if ((!LDO_EN) && (adldo & 0x04) ) 
  0019    1683    SETB	0x3,5
  001A    1D16    SNZB	0x16,2
  001B    1D72    SNZB	0x72,2
  001C    2824    JP	0x24
53:               	{
54:               								//如果AD参考从VDD换到内部LDO，需要延时100US以上
55:               		ADCON1 = adldo;			//左对齐,AD值取12位
  001D    0872    LD	A,0x72
  001E    0096    LD	0x16,A
56:               		__delay_us(100);		//IDE内置延时函数，延时100us
  001F    3085    LDIA	0x85
  0020    00F3    LD	0x73,A
  0021    0BF3    SZDECR	0x73
  0022    2821    JP	0x21
57:               	} 
  0023    2826    JP	0x26
58:               	else
59:               		ADCON1 = adldo;			//如果ADCON1.7(ADFM)=1为右对齐，,AD值取10位
  0024    0872    LD	A,0x72
  0025    0096    LD	0x16,A
60:               
61:               	if(adch & 0x10) 
  0026    1283    CLRB	0x3,5
  0027    1E21    SNZB	0x21,4
  0028    282E    JP	0x2E
62:               	{
63:               		CHS4 = 1;
  0029    1683    SETB	0x3,5
  002A    1716    SETB	0x16,6
64:               		adch &= 0x0f;
  002B    300F    LDIA	0xF
  002C    1283    CLRB	0x3,5
  002D    05A1    ANDR	0x21
65:               	}
66:               	unsigned char i = 0;
67:               	for (i = 0; i < 10; i++) 
  002E    01A2    CLR	0x22
68:               	{
69:               		ADCON0 = (unsigned char)(0X41 | (adch << 2));	//16分频，如果主频为16M，则必须选16分频或以上
  002F    0821    LD	A,0x21
  0030    00F3    LD	0x73,A
  0031    3001    LDIA	0x1
  0032    1003    CLRB	0x3,0
  0033    0DF3    RLCR	0x73
  0034    3EFF    ADDIA	0xFF
  0035    1003    CLRB	0x3,0
  0036    1D03    SNZB	0x3,2
  0037    2833    JP	0x33
  0038    0D73    RLCA	0x73
  0039    3841    ORIA	0x41
  003A    1683    SETB	0x3,5
  003B    0095    LD	0x15,A
  003C    0000    NOP
  003D    0000    NOP
  003E    0000    NOP
  003F    0000    NOP
70:               		asm("nop");
71:               		asm("nop");
72:               		asm("nop");
73:               		asm("nop");				//选择通道后需延时1uS以上
74:               		GODONE = 1;				//开始转换
  0040    1683    SETB	0x3,5
  0041    1495    SETB	0x15,1
75:               
76:               		unsigned char j = 0;
  0042    1283    CLRB	0x3,5
  0043    01A0    CLR	0x20
77:               		while (GODONE) 
  0044    1683    SETB	0x3,5
  0045    1C95    SNZB	0x15,1
  0046    284F    JP	0x4F
78:               		{
79:               			__delay_us(2);		//延时2us(编译器内置函数)
  0047    2848    JP	0x48
  0048    2849    JP	0x49
  0049    284A    JP	0x4A
  004A    284B    JP	0x4B
80:               
81:               			if (0 == (--j))		//延时0.5ms仍没有AD转换结束，跳出程序
  004B    1283    CLRB	0x3,5
  004C    0BA0    SZDECR	0x20
  004D    2844    JP	0x44
82:               			return 0;
  004E    3400    RET	0x0
83:               		}
84:               
85:               		ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));	//计算12位AD值
  004F    0819    LD	A,0x19
  0050    1283    CLRB	0x3,5
  0051    00AB    LD	0x2B,A
  0052    01AC    CLR	0x2C
  0053    0EAB    SWAPR	0x2B
  0054    0EAC    SWAPR	0x2C
  0055    30F0    LDIA	0xF0
  0056    05AC    ANDR	0x2C
  0057    082B    LD	A,0x2B
  0058    390F    ANDIA	0xF
  0059    04AC    ORR	0x2C
  005A    30F0    LDIA	0xF0
  005B    05AB    ANDR	0x2B
  005C    1683    SETB	0x3,5
  005D    0E18    SWAPA	0x18
  005E    390F    ANDIA	0xF
  005F    1283    CLRB	0x3,5
  0060    07AB    ADDR	0x2B
  0061    1803    SZB	0x3,0
  0062    0AAC    INCR	0x2C
86:               
87:               		if (0 == admax) 
  0063    0829    LD	A,0x29
  0064    042A    ORA	0x2A
  0065    1D03    SNZB	0x3,2
  0066    2869    JP	0x69
88:               		{
89:               			admax = ad_temp;
  0067    20F6    CALL	0xF6
  0068    287B    JP	0x7B
90:               			admin = ad_temp;
91:               		} 
92:               		else if (ad_temp > admax)
  0069    082C    LD	A,0x2C
  006A    022A    SUBA	0x2A
  006B    1D03    SNZB	0x3,2
  006C    286F    JP	0x6F
  006D    082B    LD	A,0x2B
  006E    0229    SUBA	0x29
  006F    1803    SZB	0x3,0
  0070    2873    JP	0x73
93:               			admax = ad_temp;				//AD采样最大值
  0071    20F6    CALL	0xF6
  0072    287F    JP	0x7F
94:               		else if (ad_temp < admin)
  0073    0828    LD	A,0x28
  0074    022C    SUBA	0x2C
  0075    1D03    SNZB	0x3,2
  0076    2879    JP	0x79
  0077    0827    LD	A,0x27
  0078    022B    SUBA	0x2B
  0079    1803    SZB	0x3,0
  007A    287F    JP	0x7F
95:               			admin = ad_temp;				//AD采样最小值
  007B    082C    LD	A,0x2C
  007C    00A8    LD	0x28,A
  007D    082B    LD	A,0x2B
  007E    00A7    LD	0x27,A
96:               
97:               		adsum += ad_temp;
  007F    082B    LD	A,0x2B
  0080    00F3    LD	0x73,A
  0081    082C    LD	A,0x2C
  0082    00F4    LD	0x74,A
  0083    01F5    CLR	0x75
  0084    01F6    CLR	0x76
  0085    0873    LD	A,0x73
  0086    07A3    ADDR	0x23
  0087    0874    LD	A,0x74
  0088    1103    CLRB	0x3,2
  0089    1803    SZB	0x3,0
  008A    3E01    ADDIA	0x1
  008B    1D03    SNZB	0x3,2
  008C    07A4    ADDR	0x24
  008D    0875    LD	A,0x75
  008E    1103    CLRB	0x3,2
  008F    1803    SZB	0x3,0
  0090    3E01    ADDIA	0x1
  0091    1D03    SNZB	0x3,2
  0092    07A5    ADDR	0x25
  0093    0876    LD	A,0x76
  0094    1103    CLRB	0x3,2
  0095    1803    SZB	0x3,0
  0096    3E01    ADDIA	0x1
  0097    1D03    SNZB	0x3,2
  0098    07A6    ADDR	0x26
  0099    300A    LDIA	0xA
  009A    0AA2    INCR	0x22
  009B    0222    SUBA	0x22
  009C    1C03    SNZB	0x3,0
  009D    282F    JP	0x2F
98:               	}
99:               		adsum -= admax;
  009E    0829    LD	A,0x29
  009F    00F3    LD	0x73,A
  00A0    082A    LD	A,0x2A
  00A1    20DE    CALL	0xDE
  00A2    1C03    SNZB	0x3,0
  00A3    0F76    SZINCA	0x76
  00A4    02A6    SUBR	0x26
100:              		if (adsum >= admin)
  00A5    0827    LD	A,0x27
  00A6    00F3    LD	0x73,A
  00A7    0828    LD	A,0x28
  00A8    00F4    LD	0x74,A
  00A9    01F5    CLR	0x75
  00AA    01F6    CLR	0x76
  00AB    0876    LD	A,0x76
  00AC    0226    SUBA	0x26
  00AD    1D03    SNZB	0x3,2
  00AE    28B9    JP	0xB9
  00AF    0875    LD	A,0x75
  00B0    0225    SUBA	0x25
  00B1    1D03    SNZB	0x3,2
  00B2    28B9    JP	0xB9
  00B3    0874    LD	A,0x74
  00B4    0224    SUBA	0x24
  00B5    1D03    SNZB	0x3,2
  00B6    28B9    JP	0xB9
  00B7    0873    LD	A,0x73
  00B8    0223    SUBA	0x23
  00B9    1C03    SNZB	0x3,0
  00BA    28C3    JP	0xC3
101:              			adsum -= admin;
  00BB    0827    LD	A,0x27
  00BC    00F3    LD	0x73,A
  00BD    0828    LD	A,0x28
  00BE    20DE    CALL	0xDE
  00BF    1C03    SNZB	0x3,0
  00C0    0F76    SZINCA	0x76
  00C1    02A6    SUBR	0x26
  00C2    28C7    JP	0xC7
102:              		else
103:              			adsum = 0;
  00C3    01A3    CLR	0x23
  00C4    01A4    CLR	0x24
  00C5    01A5    CLR	0x25
  00C6    01A6    CLR	0x26
104:              
105:              		adresult = adsum >> 3;		//8次平均值作为最终结果
  00C7    0823    LD	A,0x23
  00C8    00F3    LD	0x73,A
  00C9    0824    LD	A,0x24
  00CA    00F4    LD	0x74,A
  00CB    0825    LD	A,0x25
  00CC    00F5    LD	0x75,A
  00CD    0826    LD	A,0x26
  00CE    00F6    LD	0x76,A
  00CF    3003    LDIA	0x3
  00D0    1003    CLRB	0x3,0
  00D1    0CF6    RRCR	0x76
  00D2    0CF5    RRCR	0x75
  00D3    0CF4    RRCR	0x74
  00D4    0CF3    RRCR	0x73
  00D5    3EFF    ADDIA	0xFF
  00D6    1D03    SNZB	0x3,2
  00D7    28D0    JP	0xD0
  00D8    0874    LD	A,0x74
  00D9    00C7    LD	0x47,A
  00DA    0873    LD	A,0x73
  00DB    00C6    LD	0x46,A
106:              
107:              		adsum = 0;
108:              		admin = 0;
109:              		admax = 0;
  00DC    20ED    CALL	0xED
110:              		return 0xA5;
  00DD    34A5    RET	0xA5
111:              		
112:              }
113:              
114:              
115:              /***********************************************************
116:              main主函数
117:              ***********************************************************/
118:              void main() 
119:              {
120:              	Init_System();
  01BF    2246    CALL	0x246
121:              	AD_Init();
  01C0    227D    CALL	0x27D
122:              
123:              	while (1) 
  01C1    0064    CLRWDT
124:              	{
125:              		asm("clrwdt");
126:              
127:              #ifdef _DEBUG
128:              		TRISB7 = 1;							//测试AN15对应的IO设为输入,
  01C2    1283    CLRB	0x3,5
  01C3    1785    SETB	0x5,7
129:              		ANSEL1 |= 0X80;						//测试AN15对应的IO设为模拟输入
  01C4    1683    SETB	0x3,5
  01C5    1794    SETB	0x14,7
130:              		test_adc = ADC_Sample(15, 7);		//测试AN15口的AD值，参考电压3V
  01C6    3007    LDIA	0x7
  01C7    00F2    LD	0x72,A
  01C8    300F    LDIA	0xF
  01C9    2014    CALL	0x14
  01CA    00C8    LD	0x48,A
131:              		if (0xA5 == test_adc)				//测试完成，如因其他原因导致AD转换没有完成，则不处理
  01CB    30A5    LDIA	0xA5
  01CC    0648    XORA	0x48
  01CD    1903    SZB	0x3,2
  01CE    29D8    JP	0x1D8
132:              		{
133:              			
134:              		}
135:              		else
136:              		{
137:              			ADCON0 = 0;						//如果转换没有完成，需初始化ADCON0,1
  01CF    1683    SETB	0x3,5
  01D0    0195    CLR	0x15
138:              			ADCON1 = 0;				
  01D1    0196    CLR	0x16
139:              			__delay_us(100);				//延时100us(编译器内置函数)
  01D2    3084    LDIA	0x84
  01D3    1283    CLRB	0x3,5
  01D4    00BF    LD	0x3F,A
  01D5    0BBF    SZDECR	0x3F
  01D6    29D5    JP	0x1D5
  01D7    29D8    JP	0x1D8
  01D8    301F    LDIA	0x1F
140:              		}
141:              
142:              		test_adc = ADC_Sample(31, 0);		//测试内部基准1.2V相对电源的AD值
  01D9    01F2    CLR	0x72
  01DA    2014    CALL	0x14
  01DB    00C8    LD	0x48,A
143:              		if (0xA5 == test_adc)
  01DC    30A5    LDIA	0xA5
  01DD    0648    XORA	0x48
  01DE    1D03    SNZB	0x3,2
  01DF    29C1    JP	0x1C1
144:              		{
145:              			volatile unsigned long power_temp;
146:              			
147:              			power_temp = (unsigned long)((POWER_RATIO)/adresult);		//1.2*4096/AD=VDD，参数放大1000倍 
  01E0    3096    LDIA	0x96
  01E1    01A6    CLR	0x26
  01E2    00A7    LD	0x27,A
  01E3    304A    LDIA	0x4A
  01E4    00A8    LD	0x28,A
  01E5    0847    LD	A,0x47
  01E6    00A1    LD	0x21,A
  01E7    0846    LD	A,0x46
  01E8    00A0    LD	0x20,A
  01E9    2263    CALL	0x263
  01EA    0820    LD	A,0x20
  01EB    00A3    LD	0x23,A
  01EC    0821    LD	A,0x21
  01ED    00A4    LD	0x24,A
  01EE    0822    LD	A,0x22
  01EF    00A5    LD	0x25,A
  01F0    20FB    CALL	0xFB
  01F1    0823    LD	A,0x23
  01F2    00B2    LD	0x32,A
  01F3    0824    LD	A,0x24
  01F4    00B3    LD	0x33,A
  01F5    0825    LD	A,0x25
  01F6    00B4    LD	0x34,A
  01F7    2161    CALL	0x161
  01F8    0835    LD	A,0x35
  01F9    00C3    LD	0x43,A
  01FA    0834    LD	A,0x34
  01FB    00C2    LD	0x42,A
  01FC    0833    LD	A,0x33
  01FD    00C1    LD	0x41,A
  01FE    0832    LD	A,0x32
  01FF    00C0    LD	0x40,A
148:              			power_ad = (unsigned int)(power_temp);		//通过内部基准电压推出芯片VDD电压
  0200    0841    LD	A,0x41
  0201    00C5    LD	0x45,A
  0202    0840    LD	A,0x40
  0203    00C4    LD	0x44,A
  0204    29C1    JP	0x1C1
149:              		}	
150:              
151:              #endif
152:              	}
153:              }
154:              
155:              /**********************************************************
156:              函数名称：Init_System
157:              函数功能：系统初始化
158:              入口参数：无
159:              出口参数：无
160:              备    注：
161:              **********************************************************/
162:              void Init_System() 
  0246    0000    NOP
  0247    0064    CLRWDT
163:              {
164:              	asm("nop");
165:              	asm("clrwdt");
166:              	OPTION_REG = 0;					//预分频给TMR0 ，Timer0使用内部时钟Focs/4，预分频比为1:2
  0248    1283    CLRB	0x3,5
  0249    0181    CLR	0x1
  024A    0064    CLRWDT
167:              	asm("clrwdt");
168:              	OSCCON = 0X70;					//内部振荡器8M
  024B    3070    LDIA	0x70
  024C    1283    CLRB	0x3,5
  024D    0094    LD	0x14,A
169:              
170:              	WPUA = 0B00000000;				//配置上拉，1为使能上拉
  024E    1683    SETB	0x3,5
  024F    0188    CLR	0x8
171:              	WPUB = 0B00000000;
  0250    1283    CLRB	0x3,5
  0251    0188    CLR	0x8
172:              
173:              	TRISA = 0B00000000;				//配置IO状态，0为输出，1为输入
  0252    1683    SETB	0x3,5
  0253    0185    CLR	0x5
174:              	TRISB = 0B00000000;
  0254    1283    CLRB	0x3,5
  0255    0185    CLR	0x5
175:              
176:              	PORTA = 0X00;
  0256    1683    SETB	0x3,5
  0257    0186    CLR	0x6
177:              	PORTB = 0X00;
  0258    1283    CLRB	0x3,5
  0259    0186    CLR	0x6
178:              
179:              //---------------------------------------
180:              //125us中断初始化
181:              	PR2 = 249;					//设定Timer初始值，定时周期是250*4/8M=125uS
  025A    30F9    LDIA	0xF9
  025B    0091    LD	0x11,A
182:              	TMR2IF = 0;
  025C    108D    CLRB	0xD,1
183:              	TMR2IE = 1;					//使能Timer2溢出中断
  025D    148E    SETB	0xE,1
184:              
185:              	T2CON = 0B00000100;			//开启Timer2,设置TMR2的分频比为1:1
  025E    3004    LDIA	0x4
  025F    0093    LD	0x13,A
186:              	INTCON = 0XC0;				//开启总中断
  0260    30C0    LDIA	0xC0
  0261    008B    LD	0xB,A
  0262    0008    RET
187:              }
188:              
189:              /***********************************************************
190:              中断服务函数
191:              函数名称：Isr_Timer()
192:              函数功能：中断处理函数
193:              入口参数：
194:              出口参数：
195:              备    注：125US定时2中断
196:              			所有中断都是在这个函数里面处理
197:              ***********************************************************/
198:              void interrupt Isr_Timer() 
199:              {
200:              	if (TMR2IF) 
  0273    1283    CLRB	0x3,5
  0274    188D    SZB	0xD,1
201:              	{			//若只使能了一个中断源,可以略去判断
202:              		TMR2IF = 0;
  0275    108D    CLRB	0xD,1
  0276    0871    LD	A,0x71
  0277    008A    LD	0xA,A
  0278    0E70    SWAPA	0x70
  0279    0083    LD	0x3,A
  027A    0EFE    SWAPR	0x7E
  027B    0E7E    SWAPA	0x7E
  027C    0009    RETI
203:              
204:              	}
205:              
206:              }
207:              
208:              /***********************************************************
209:              中断服务函数
210:              函数名称：AD_Init()
211:              函数功能：AD初始化处理函数
212:              入口参数：
213:              出口参数：
214:              备    注：第一次打开AD允许位ADON，需延时20uS以上才能进入AD采样
215:              			如后继程序不关闭ADON，则不需要延时
216:              ***********************************************************/
217:              void AD_Init() 
218:              {
219:              	/*********** ADCON0 ****************************
220:              		Bit7~Bit6  ADCS<1:0>:  AD转换时钟选择位。
221:              			00=  F HSI /16
222:              			01=  F HSI /32
223:              			10=  F HSI /64
224:              			11=  F HSI /128
225:              		Bit5~Bit2  CHS<3:0>:  模拟通道选择位。与ADCON1寄存器CHS4组合CHS<3:0>
226:              			CHS<4:0>: 
227:              			00000=  AN0
228:              			00001=  AN1
229:              			00010=  AN2
230:              			00011=  AN3
231:              			00100=  AN4
232:              			00101=  AN5
233:              			00110=  保留
234:              			00111=  保留
235:              			01000=  AN8
236:              			… 
237:              			01101=  AN13
238:              			01110=  AN14
239:              			01111=  AN15
240:              			11111=  1.2V（固定参考电压）
241:              			其他=  保留
242:              		Bit1  GO/DONE: AD转换状态位。
243:              			1=  AD转换正在进行。将该位置1启动AD转换。当AD转换完成以后，该位由硬件自动清零。
244:              				当GO/DONE位从1变0或ADIF从0变1时，需至少等待两个TAD时间，才能再次启动AD转换。
245:              			0=  AD转换完成/或不在进行中。
246:              		Bit0  ADON:  ADC使能位。
247:              			1=  使能ADC；
248:              			0=  禁止ADC，不消耗工作电流。
249:              	*********************************************/
250:              	ADCON0 = 0X41;		//ADON开启，AD采样时间选为FSYS/16
  027D    3041    LDIA	0x41
  027E    1683    SETB	0x3,5
  027F    0095    LD	0x15,A
251:              	
252:              	/*********** ADCON1 ****************************
253:              		Bit7  ADFM:  AD转换结果格式选择位；
254:              			1=  右对齐；
255:              			0=  左对齐。
256:              		Bit6  CHS4:  通道选择位
257:              		Bit5~Bit3  未用 
258:              		Bit2  LDO_EN:  内部参考电压使能位。
259:              			1=  使能ADC内部LDO参考电压；
260:              				当选择内部LDO作参考电压时，ADC最大有效精度为8位。
261:              			0=  VDD作为ADC参考电压。
262:              		Bit1~Bit0  LDO_SEL<1:0>:  参考电压选择位
263:              			0X=  2.0V
264:              			10=  2.4V
265:              			11=  3.0V
266:              	*********************************************/
267:              	ADCON1 = 0;
  0280    0196    CLR	0x16
  0281    0008    RET
268:              }
---- H:\MyDownloads\IDE_RAR\SCMCU_IDE_V2.00.15_Alpha1\data\sources\common\lwtoft.c ----------------------------------------------------------------------
1:                /*	Floating point routines.
2:                
3:                	Copyright (c) 2012 Microchip Technology Inc. All rights reserved.
4:                */
5:                
6:                // this is bigendian code right now. Need to parameterise it.
7:                
8:                #include	"ftarith.h"
9:                
10:               
11:               // Convert unsigned int to float
12:               
13:               #ifdef _OLDLIB
14:               #define	f1_as_mant1	(*(unsigned short long *)&f1)
15:               float
16:               __lwtoft(unsigned int c)
17:               {
18:               	float	f1;
19:               	
20:               	if(c == 0)
21:               		return 0.0;
22:               	f1_as_mant1 = c;
23:               	__ftpack(&f1_as_mant1, 127+15);
24:               	return f1;
25:               }
26:               #else
27:               float
28:               __lwtoft(unsigned int c)
  0263    0820    LD	A,0x20
  0264    00F2    LD	0x72,A
  0265    0821    LD	A,0x21
  0266    00F3    LD	0x73,A
  0267    308E    LDIA	0x8E
  0268    01F4    CLR	0x74
  0269    00F5    LD	0x75,A
  026A    01F6    CLR	0x76
  026B    2205    CALL	0x205
  026C    0872    LD	A,0x72
  026D    00A0    LD	0x20,A
  026E    0873    LD	A,0x73
  026F    00A1    LD	0x21,A
  0270    0874    LD	A,0x74
  0271    00A2    LD	0x22,A
  0272    0008    RET
29:               {
30:               	return __ftpack(c, 127+15, 0);
31:               }
32:               #endif
---- H:\MyDownloads\IDE_RAR\SCMCU_IDE_V2.00.15_Alpha1\data\sources\common\fttol.c ----------------------------------------------------------------------
1:                /*	Floating point routines.
2:                
3:                	Copyright (c) 2012 Microchip Technology Inc. All rights reserved.
4:                */
5:                
6:                // this is bigendian code right now. Need to parameterise it.
7:                
8:                #include	"ftarith.h"
9:                
10:               #define	f1_as_mant1	(*(unsigned short long *)&f1)
11:               
12:               // Convert float to long
13:               
14:               #ifdef _OLDLIB
15:               long
16:               __fttol(float f1)
17:               {
18:               	unsigned char	sign1, exp1;
19:               	unsigned long	lval;
20:               
21:               	sign1 = __ftunpack(&f1_as_mant1, &exp1);
22:               	lval = f1_as_mant1;
23:               	exp1 -= 127+15;
24:               	if((signed char)exp1 < 0) {
25:               		if((signed char)exp1 < -15)
26:               			return 0;
27:               		do
28:               			lval >>= 1;
29:               		while(++exp1 != 0);
30:               	} else {
31:               		if(exp1 >= 32)
32:               			return 00;
33:               		while(exp1 != 0) {
34:               			lval <<= 1;
35:               			exp1--;
36:               		}
37:               	}
38:               	if(sign1)
39:               		lval = -lval;
40:               	return lval;
41:               }
42:               #else
43:               long
44:               __fttol(float f1)
  0161    21B8    CALL	0x1B8
  0162    1003    CLRB	0x3,0
  0163    0D37    RLCA	0x37
  0164    0D38    RLCA	0x38
  0165    00BE    LD	0x3E,A
  0166    083E    LD	A,0x3E
  0167    1D03    SNZB	0x3,2
  0168    296E    JP	0x16E
  0169    01B2    CLR	0x32
  016A    01B3    CLR	0x33
  016B    01B4    CLR	0x34
  016C    01B5    CLR	0x35
  016D    0008    RET
  016E    21B8    CALL	0x1B8
  016F    3017    LDIA	0x17
  0170    1003    CLRB	0x3,0
  0171    0CB8    RRCR	0x38
  0172    0CB7    RRCR	0x37
  0173    0CB6    RRCR	0x36
  0174    3EFF    ADDIA	0xFF
  0175    1D03    SNZB	0x3,2
  0176    2970    JP	0x170
  0177    0836    LD	A,0x36
  0178    00B9    LD	0x39,A
  0179    17B3    SETB	0x33,7
  017A    01B4    CLR	0x34
  017B    0832    LD	A,0x32
  017C    00BA    LD	0x3A,A
  017D    0833    LD	A,0x33
  017E    00BB    LD	0x3B,A
  017F    0834    LD	A,0x34
  0180    00BC    LD	0x3C,A
  0181    308E    LDIA	0x8E
  0182    01BD    CLR	0x3D
  0183    02BE    SUBR	0x3E
  0184    1FBE    SNZB	0x3E,7
  0185    2993    JP	0x193
  0186    083E    LD	A,0x3E
  0187    3A80    XORIA	0x80
  0188    3E8F    ADDIA	0x8F
  0189    1C03    SNZB	0x3,0
  018A    2969    JP	0x169
  018B    1003    CLRB	0x3,0
  018C    0CBD    RRCR	0x3D
  018D    0CBC    RRCR	0x3C
  018E    0CBB    RRCR	0x3B
  018F    0CBA    RRCR	0x3A
  0190    0FBE    SZINCR	0x3E
  0191    298B    JP	0x18B
  0192    29A1    JP	0x1A1
  0193    3018    LDIA	0x18
  0194    023E    SUBA	0x3E
  0195    1803    SZB	0x3,0
  0196    2969    JP	0x169
  0197    083E    LD	A,0x3E
  0198    1903    SZB	0x3,2
  0199    29A1    JP	0x1A1
  019A    1003    CLRB	0x3,0
  019B    0DBA    RLCR	0x3A
  019C    0DBB    RLCR	0x3B
  019D    0DBC    RLCR	0x3C
  019E    0DBD    RLCR	0x3D
  019F    03BE    DECR	0x3E
  01A0    2997    JP	0x197
  01A1    0839    LD	A,0x39
  01A2    1903    SZB	0x3,2
  01A3    29AF    JP	0x1AF
  01A4    09BA    COMR	0x3A
  01A5    09BB    COMR	0x3B
  01A6    09BC    COMR	0x3C
  01A7    09BD    COMR	0x3D
  01A8    0ABA    INCR	0x3A
  01A9    1903    SZB	0x3,2
  01AA    0ABB    INCR	0x3B
  01AB    1903    SZB	0x3,2
  01AC    0ABC    INCR	0x3C
  01AD    1903    SZB	0x3,2
  01AE    0ABD    INCR	0x3D
  01AF    083D    LD	A,0x3D
  01B0    00B5    LD	0x35,A
  01B1    083C    LD	A,0x3C
  01B2    00B4    LD	0x34,A
  01B3    083B    LD	A,0x3B
  01B4    00B3    LD	0x33,A
  01B5    083A    LD	A,0x3A
  01B6    00B2    LD	0x32,A
  01B7    0008    RET
45:               {
46:               	unsigned char	sign1, exp1;
47:               	unsigned long	lval;
48:               
49:               	if((exp1 = f1_as_mant1 >> 15) == 0)
50:               		return 0;
51:               	sign1 = f1_as_mant1 >> 23;
52:               	f1_as_mant1 |= 0x8000UL;
53:               	f1_as_mant1 &= 0xFFFFUL;
54:               	lval = f1_as_mant1;
55:               	exp1 -= 127+15;
56:               	if((signed char)exp1 < 0) {
57:               		if((signed char)exp1 < -15)
58:               			return 0;
59:               		do
60:               			lval >>= 1;
61:               		while(++exp1 != 0);
62:               	} else {
63:               		if(exp1 >= 24)
64:               			return 0;
65:               		while(exp1 != 0) {
66:               			lval <<= 1;
67:               			exp1--;
68:               		}
69:               	}
70:               	if(sign1)
71:               		lval = -lval;
72:               	return lval;
73:               }
74:               #endif
---- H:\MyDownloads\IDE_RAR\SCMCU_IDE_V2.00.15_Alpha1\data\sources\common\ftdiv.c ----------------------------------------------------------------------
1:                /*	Floating point routines.
2:                
3:                	Copyright (c) 2012 Microchip Technology Inc. All rights reserved.
4:                */
5:                
6:                // this is bigendian code right now. Need to parameterise it.
7:                
8:                #include	"ftarith.h"
9:                
10:               #define	f1_as_dividend	(*(unsigned short long *)&f1)
11:               #define	f2_as_divisor	(*(unsigned short long *)&f2)
12:               #define	f3_as_quot	(*(unsigned short long *)&f3)
13:               
14:               // floating addition
15:               #ifdef _OLDLIB
16:               #define	cntr		sign2
17:               float
18:               #ifdef _PIC18
19:               __ftdiv(float f1, float f2)
20:               #else
21:               __ftdiv(float f2, float f1)
22:               #endif
23:               {
24:               	unsigned char	exp1, exp2, sign1, sign2;
25:               	float	f3;
26:               	
27:               	f3_as_quot = 0;
28:               	sign1 = __ftunpack(&f1_as_dividend, &exp1);
29:               	if(exp1 == 0)
30:               		return f3;
31:               	sign2 = __ftunpack(&f2_as_divisor, &exp2);
32:               	if(exp2 == 0)
33:               		return f3;
34:               	exp1 -= exp2-127+8;	// compute new exponent
35:               	sign1 ^= sign2;
36:               	cntr = 16+8;
37:               	do {
38:               		f3_as_quot <<= 1;
39:               		if(f1_as_dividend >= f2_as_divisor) {
40:               			f1_as_dividend -= f2_as_divisor;
41:               			f3_as_quot |= 1;
42:               		}
43:               		f1_as_dividend <<= 1;
44:               	} while(--cntr != 0);
45:               	__ftpack(&f3_as_quot, exp1);
46:               	if(sign1)
47:               		f3_as_quot |= 0x800000;
48:               	return f3;
49:               }
50:               #else
51:               #define	exp2	sign
52:               float
53:               #ifdef _PIC18
54:               __ftdiv(float f1, float f2)
55:               #else
56:               __ftdiv(float f2, float f1)
  00FB    0826    LD	A,0x26
  00FC    00A9    LD	0x29,A
  00FD    0827    LD	A,0x27
  00FE    00AA    LD	0x2A,A
  00FF    0828    LD	A,0x28
  0100    00AB    LD	0x2B,A
  0101    1003    CLRB	0x3,0
  0102    0D2A    RLCA	0x2A
  0103    0D2B    RLCA	0x2B
  0104    00B0    LD	0x30,A
  0105    0830    LD	A,0x30
  0106    1D03    SNZB	0x3,2
  0107    2909    JP	0x109
  0108    295D    JP	0x15D
  0109    0823    LD	A,0x23
  010A    00A9    LD	0x29,A
  010B    0824    LD	A,0x24
  010C    00AA    LD	0x2A,A
  010D    0825    LD	A,0x25
  010E    00AB    LD	0x2B,A
  010F    1003    CLRB	0x3,0
  0110    0D2A    RLCA	0x2A
  0111    0D2B    RLCA	0x2B
  0112    00B1    LD	0x31,A
  0113    0831    LD	A,0x31
  0114    1D03    SNZB	0x3,2
  0115    2917    JP	0x117
  0116    295D    JP	0x15D
  0117    3089    LDIA	0x89
  0118    01AD    CLR	0x2D
  0119    01AE    CLR	0x2E
  011A    01AF    CLR	0x2F
  011B    0731    ADDA	0x31
  011C    00A9    LD	0x29,A
  011D    02B0    SUBR	0x30
  011E    0828    LD	A,0x28
  011F    00B1    LD	0x31,A
  0120    0825    LD	A,0x25
  0121    06B1    XORR	0x31
  0122    3080    LDIA	0x80
  0123    05B1    ANDR	0x31
  0124    3018    LDIA	0x18
  0125    17A7    SETB	0x27,7
  0126    01A8    CLR	0x28
  0127    17A4    SETB	0x24,7
  0128    01A5    CLR	0x25
  0129    00AC    LD	0x2C,A
  012A    1003    CLRB	0x3,0
  012B    0DAD    RLCR	0x2D
  012C    0DAE    RLCR	0x2E
  012D    0DAF    RLCR	0x2F
  012E    0825    LD	A,0x25
  012F    0228    SUBA	0x28
  0130    1D03    SNZB	0x3,2
  0131    2938    JP	0x138
  0132    0824    LD	A,0x24
  0133    0227    SUBA	0x27
  0134    1D03    SNZB	0x3,2
  0135    2938    JP	0x138
  0136    0823    LD	A,0x23
  0137    0226    SUBA	0x26
  0138    1C03    SNZB	0x3,0
  0139    2946    JP	0x146
  013A    0823    LD	A,0x23
  013B    02A6    SUBR	0x26
  013C    0824    LD	A,0x24
  013D    1C03    SNZB	0x3,0
  013E    0F24    SZINCA	0x24
  013F    02A7    SUBR	0x27
  0140    0825    LD	A,0x25
  0141    1C03    SNZB	0x3,0
  0142    0A25    INCA	0x25
  0143    02A8    SUBR	0x28
  0144    142D    SETB	0x2D,0
  0145    1003    CLRB	0x3,0
  0146    0DA6    RLCR	0x26
  0147    0DA7    RLCR	0x27
  0148    0DA8    RLCR	0x28
  0149    0BAC    SZDECR	0x2C
  014A    292A    JP	0x12A
  014B    082D    LD	A,0x2D
  014C    00F2    LD	0x72,A
  014D    082E    LD	A,0x2E
  014E    00F3    LD	0x73,A
  014F    082F    LD	A,0x2F
  0150    00F4    LD	0x74,A
  0151    0830    LD	A,0x30
  0152    00F5    LD	0x75,A
  0153    0831    LD	A,0x31
  0154    00F6    LD	0x76,A
  0155    2205    CALL	0x205
  0156    0872    LD	A,0x72
  0157    00A3    LD	0x23,A
  0158    0873    LD	A,0x73
  0159    00A4    LD	0x24,A
  015A    0874    LD	A,0x74
  015B    00A5    LD	0x25,A
  015C    0008    RET
57:               #endif
58:               {
59:               	unsigned char	exp, sign, cntr;
60:               	float	f3;
61:               	
62:               	// unpack the operands
63:               	if((exp = f1_as_dividend >> 15) == 0)
64:               		return 0.0;
65:               	if((exp2 = f2_as_divisor >> 15) == 0)
66:               		return 0.0;
67:               	f3_as_quot = 0;
68:               	exp -= exp2-127+8;	// compute new exponent
69:               	sign = f1_as_dividend >> 16;
70:               	sign ^= (unsigned char)(f2_as_divisor >> 16);
71:               	sign &= 0x80;
72:               	f1_as_dividend |= 0x8000UL;
73:               	f1_as_dividend &= 0xFFFFUL;
74:               	f2_as_divisor |= 0x8000UL;
75:               	f2_as_divisor &= 0xFFFFUL;
76:               	cntr = 16+8;
77:               	do {
78:               		f3_as_quot <<= 1;
79:               		if(f1_as_dividend >= f2_as_divisor) {
80:               			f1_as_dividend -= f2_as_divisor;
81:               			f3_as_quot |= 1;
82:               		}
83:               		f1_as_dividend <<= 1;
84:               	} while(--cntr != 0);
85:               	return __ftpack(f3_as_quot, exp, sign);
86:               }
87:               #endif	
---- H:\MyDownloads\IDE_RAR\SCMCU_IDE_V2.00.15_Alpha1\data\sources\common\float.c ----------------------------------------------------------------------
1:                /*	Floating point routines.
2:                
3:                	Copyright (c) 2012 Microchip Technology Inc. All rights reserved.
4:                */
5:                
6:                #include	"ftarith.h"
7:                
8:                
9:                //	unpack the operand pointed to. Store the exponent into the location pointed to by exp,
10:               //	and return the sign (zero is positive)
11:               
12:               #ifdef _OLDLIB
13:               
14:               unsigned char
15:               __ftunpack(unsigned short long * arg, unsigned char * exp)
16:               {
17:               	unsigned char	sign;
18:               
19:               	*exp = sign = *arg >> 15;
20:               	if(sign == 0) {
21:               		*arg = 0;
22:               		return 0;
23:               	}
24:               	sign = 0;
25:               	*arg |= 0x8000;
26:               	if(*arg & 0x800000)
27:               		sign++;
28:               	*arg &= 0xFFFF;
29:               	return sign;
30:               }
31:               
32:               // normalize and pack the supplied argument into floating point format
33:               
34:               void
35:               __ftpack(unsigned short long * arg, unsigned char exp)
36:               {
37:               	if(exp == 0 || *arg == 0) {
38:               		*arg = 0;
39:               		return;
40:               	}
41:               	while(*arg & 0xFE0000UL) {
42:               		exp++;
43:               		*arg >>= 1;
44:               	}
45:               	while(*arg & 0xFF0000UL) {
46:               		exp++;
47:               		(*arg)++;
48:               		*arg >>= 1;
49:               	}
50:               	while(!(*arg & 0x8000UL)) {
51:               		exp--;
52:               		*arg <<= 1;
53:               	}
54:               	if(!(exp & 1))
55:               		*arg &= ~0x8000L;
56:               	exp >>= 1;
57:               	*arg |= (unsigned short long)exp << 16;
58:               }
59:               
60:               #else
61:               float
62:               __ftpack(unsigned short long arg, unsigned char exp, unsigned char sign)
  0205    0875    LD	A,0x75
  0206    1903    SZB	0x3,2
  0207    2A0D    JP	0x20D
  0208    0874    LD	A,0x74
  0209    0473    ORA	0x73
  020A    0472    ORA	0x72
  020B    1D03    SNZB	0x3,2
  020C    2A13    JP	0x213
  020D    01F2    CLR	0x72
  020E    01F3    CLR	0x73
  020F    01F4    CLR	0x74
  0210    0008    RET
  0211    0AF5    INCR	0x75
  0212    2241    CALL	0x241
  0213    30FE    LDIA	0xFE
  0214    0574    ANDA	0x74
  0215    1903    SZB	0x3,2
  0216    2A1F    JP	0x21F
  0217    2A11    JP	0x211
  0218    0AF5    INCR	0x75
  0219    0AF2    INCR	0x72
  021A    1903    SZB	0x3,2
  021B    0AF3    INCR	0x73
  021C    1903    SZB	0x3,2
  021D    0AF4    INCR	0x74
  021E    2241    CALL	0x241
  021F    30FF    LDIA	0xFF
  0220    0574    ANDA	0x74
  0221    1903    SZB	0x3,2
  0222    2A2D    JP	0x22D
  0223    2A18    JP	0x218
  0224    3002    LDIA	0x2
  0225    0275    SUBA	0x75
  0226    1C03    SNZB	0x3,0
  0227    2A2F    JP	0x22F
  0228    03F5    DECR	0x75
  0229    1003    CLRB	0x3,0
  022A    0DF2    RLCR	0x72
  022B    0DF3    RLCR	0x73
  022C    0DF4    RLCR	0x74
  022D    1FF3    SNZB	0x73,7
  022E    2A24    JP	0x224
  022F    1C75    SNZB	0x75,0
  0230    13F3    CLRB	0x73,7
  0231    1003    CLRB	0x3,0
  0232    0CF5    RRCR	0x75
  0233    0875    LD	A,0x75
  0234    00F9    LD	0x79,A
  0235    01F8    CLR	0x78
  0236    01F7    CLR	0x77
  0237    0877    LD	A,0x77
  0238    04F2    ORR	0x72
  0239    0878    LD	A,0x78
  023A    04F3    ORR	0x73
  023B    0879    LD	A,0x79
  023C    04F4    ORR	0x74
  023D    0876    LD	A,0x76
  023E    1D03    SNZB	0x3,2
  023F    17F4    SETB	0x74,7
  0240    0008    RET
63:               {
64:               	if(exp == 0 || arg == 0)
65:               		return 0.0;
66:               	while(arg & 0xFE0000UL) {
67:               		exp++;
68:               		arg >>= 1;
69:               	}
70:               	while(arg & 0xFF0000UL) {
71:               		exp++;
72:               		(arg)++;
73:               		arg >>= 1;
74:               	}
75:               	while(!(arg & 0x8000UL) && exp > 1) {
76:               		exp--;
77:               		arg <<= 1;
78:               	}
79:               	if(!(exp & 1))
80:               		arg &= ~0x8000L;
81:               	exp >>= 1;
82:               	arg |= (unsigned short long)exp << 16;
83:               	if (sign)
84:               		arg |= 0x800000UL;
85:                  return *(float*)&arg;	
86:               }
87:               
88:               #endif
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    280A    JP	0xA
  000A    280B    JP	0xB
---- start_initialization ------------------------------------------------------------------
  000B    01FA    CLR	0x7A
  000C    01FB    CLR	0x7B
  000D    1283    CLRB	0x3,5
  000E    01C4    CLR	0x44
  000F    01C5    CLR	0x45
  0010    01C6    CLR	0x46
  0011    01C7    CLR	0x47
---- interrupt_function_enter ----------------------------------------------------------
  0004    00FE    LD	0x7E,A
  0005    0E03    SWAPA	0x3
  0006    00F0    LD	0x70,A
  0007    080A    LD	A,0xA
  0008    00F1    LD	0x71,A
  0009    2A73    JP	0x273
---- common_function ------------------------------------------------------------------
  0012    0183    CLR	0x3
  0013    29BF    JP	0x1BF
  00DE    00F4    LD	0x74,A
  00DF    01F5    CLR	0x75
  00E0    01F6    CLR	0x76
  00E1    0873    LD	A,0x73
  00E2    02A3    SUBR	0x23
  00E3    0874    LD	A,0x74
  00E4    1C03    SNZB	0x3,0
  00E5    0F74    SZINCA	0x74
  00E6    02A4    SUBR	0x24
  00E7    0875    LD	A,0x75
  00E8    1C03    SNZB	0x3,0
  00E9    0F75    SZINCA	0x75
  00EA    02A5    SUBR	0x25
  00EB    0876    LD	A,0x76
  00EC    0008    RET
  00ED    01A3    CLR	0x23
  00EE    01A4    CLR	0x24
  00EF    01A5    CLR	0x25
  00F0    01A6    CLR	0x26
  00F1    01A7    CLR	0x27
  00F2    01A8    CLR	0x28
  00F3    01A9    CLR	0x29
  00F4    01AA    CLR	0x2A
  00F5    0008    RET
  00F6    082C    LD	A,0x2C
  00F7    00AA    LD	0x2A,A
  00F8    082B    LD	A,0x2B
  00F9    00A9    LD	0x29,A
  00FA    0008    RET
  015D    01A3    CLR	0x23
  015E    01A4    CLR	0x24
  015F    01A5    CLR	0x25
  0160    0008    RET
  01B8    0832    LD	A,0x32
  01B9    00B6    LD	0x36,A
  01BA    0833    LD	A,0x33
  01BB    00B7    LD	0x37,A
  01BC    0834    LD	A,0x34
  01BD    00B8    LD	0x38,A
  01BE    0008    RET
  0241    1003    CLRB	0x3,0
  0242    0CF4    RRCR	0x74
  0243    0CF3    RRCR	0x73
  0244    0CF2    RRCR	0x72
  0245    0008    RET

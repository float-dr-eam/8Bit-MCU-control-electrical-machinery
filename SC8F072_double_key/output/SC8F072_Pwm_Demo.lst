

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Dec 03 00:22:03 2024

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F072
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	swtext1,local,class=CONST,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	swtext2,local,class=CONST,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	swtext3,local,class=CONST,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	swtext4,local,class=CONST,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	pa_nodes0,global,class=CODE,delta=2
    55                           	dabs	1,0x7E,2
    56  0000                     
    57                           ; Version 1.45
    58                           ; Generated 16/11/2017 GMT
    59                           ; 
    60                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC16F887 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     
    92                           	psect	idataBANK0
    93  0000                     __pidataBANK0:	
    94                           
    95                           	psect	idataBANK1
    96  0000                     __pidataBANK1:	
    97                           
    98                           	psect	strings
    99  000D                     __pstrings:	
   100  000D                     stringtab:	
   101  000D                     __stringtab:	
   102  000D                     stringcode:	
   103                           ;	String table - string pointers are 1 byte each
   104                           
   105  000D                     stringdir:	
   106  000D  3000               	movlw	high stringdir
   107  000E  008A               	movwf	10
   108  000F  0804               	movf	4,w
   109  0010  0A84               	incf	4,f
   110  0011  0782               	addwf	2,f
   111  0012                     __stringbase:	
   112  0012  3400               	retlw	0
   113  0013                     __end_of__stringtab:	
   114  0013                     _duty_steps:	
   115  0013  3442               	retlw	66
   116  0014  3449               	retlw	73
   117  0015  3455               	retlw	85
   118  0016  345B               	retlw	91
   119  0017  3461               	retlw	97
   120  0018  3400               	retlw	0
   121  0019                     __end_of_duty_steps:	
   122  001E                     _PWMD01H	set	30
   123  001D                     _PWMCON2	set	29
   124  001C                     _PWMT4L	set	28
   125  001B                     _PWMD4L	set	27
   126  001A                     _PWMD1L	set	26
   127  0019                     _PWMD0L	set	25
   128  0018                     _PWMTH	set	24
   129  0017                     _PWMTL	set	23
   130  0016                     _PWMCON1	set	22
   131  0015                     _PWMCON0	set	21
   132  0014                     _OSCCON	set	20
   133  0013                     _T2CON	set	19
   134  0011                     _PR2	set	17
   135  000B                     _INTCON	set	11
   136  0009                     _IOCB	set	9
   137  0008                     _WPUB	set	8
   138  0007                     _WPDB	set	7
   139  0006                     _PORTB	set	6
   140  0005                     _TRISB	set	5
   141  0001                     _OPTION_REG	set	1
   142  0071                     _TMR2IE	set	113
   143  0073                     _RAIE	set	115
   144  0069                     _TMR2IF	set	105
   145  006B                     _RAIF	set	107
   146  0058                     _RBIF	set	88
   147  005A                     _T0IF	set	90
   148  005B                     _RBIE	set	91
   149  005D                     _T0IE	set	93
   150  005F                     _GIE	set	95
   151  0030                     _RB0	set	48
   152  0031                     _RB1	set	49
   153  0032                     _RB2	set	50
   154  0033                     _RB3	set	51
   155  0034                     _RB4	set	52
   156  0028                     _TRISB0	set	40
   157  0029                     _TRISB1	set	41
   158  002A                     _TRISB2	set	42
   159  002B                     _TRISB3	set	43
   160  002C                     _TRISB4	set	44
   161  009E                     _PWMD23H	set	158
   162  009C                     _PWMD3L	set	156
   163  009B                     _PWMD2L	set	155
   164  0099                     _ADRESH	set	153
   165  0098                     _ADRESL	set	152
   166  0096                     _ADCON1	set	150
   167  0095                     _ADCON0	set	149
   168  0089                     _IOCA	set	137
   169  0088                     _WPUA	set	136
   170  0087                     _WPDA	set	135
   171  0086                     _PORTA	set	134
   172  0085                     _TRISA	set	133
   173  0081                     _TMR0	set	129
   174  04B2                     _LDO_EN	set	1202
   175  04B6                     _CHS4	set	1206
   176  04A9                     _GODONE	set	1193
   177                           
   178                           	psect	cinit
   179  07CE                     start_initialization:	
   180                           ; #config settings
   181                           
   182  07CE                     __initialization:	
   183  07CE  307E               	movlw	126
   184                           
   185                           ; Initialize objects allocated to BANK1
   186  07CF  1683               	bsf	3,5	;RP0=1, select bank1
   187                           
   188                           ;initializer for _nums
   189  07D0  00A0               	movwf	__pdataBANK1& (0+127)
   190  07D1  3030               	movlw	48
   191  07D2  00A1               	movwf	(__pdataBANK1+1)& (0+127)
   192  07D3  306D               	movlw	109
   193  07D4  00A2               	movwf	(__pdataBANK1+2)& (0+127)
   194  07D5  3079               	movlw	121
   195  07D6  00A3               	movwf	(__pdataBANK1+3)& (0+127)
   196  07D7  3033               	movlw	51
   197  07D8  00A4               	movwf	(__pdataBANK1+4)& (0+127)
   198  07D9  305B               	movlw	91
   199  07DA  00A5               	movwf	(__pdataBANK1+5)& (0+127)
   200  07DB  305F               	movlw	95
   201  07DC  00A6               	movwf	(__pdataBANK1+6)& (0+127)
   202  07DD  3070               	movlw	112
   203  07DE  00A7               	movwf	(__pdataBANK1+7)& (0+127)
   204  07DF  307F               	movlw	127
   205  07E0  00A8               	movwf	(__pdataBANK1+8)& (0+127)
   206  07E1  307B               	movlw	123
   207  07E2  00A9               	movwf	(__pdataBANK1+9)& (0+127)
   208  07E3  3047               	movlw	71
   209  07E4  00AA               	movwf	(__pdataBANK1+10)& (0+127)
   210  07E5  3001               	movlw	1
   211  07E6  01AB               	clrf	(__pdataBANK1+11)& (0+127)
   212                           
   213                           ;initializer for _num_hund
   214  07E7  01AC               	clrf	(__pdataBANK1+12)& (0+127)
   215  07E8  00AD               	movwf	(__pdataBANK1+13)& (0+127)
   216  07E9  3003               	movlw	3
   217  07EA  00AE               	movwf	(__pdataBANK1+14)& (0+127)
   218  07EB  300D               	movlw	13
   219  07EC  00AF               	movwf	(__pdataBANK1+15)& (0+127)
   220  07ED  300F               	movlw	15
   221  07EE  00B0               	movwf	(__pdataBANK1+16)& (0+127)
   222  07EF  3002               	movlw	2
   223                           
   224                           ; Initialize objects allocated to BANK0
   225  07F0  1283               	bcf	3,5	;RP0=0, select bank0
   226                           
   227                           ;initializer for _unit
   228  07F1  00E3               	movwf	__pdataBANK0& (0+127)
   229                           
   230                           ;initializer for _tens
   231  07F2  3004               	movlw	4
   232  07F3  00E4               	movwf	(__pdataBANK0+1)& (0+127)
   233                           
   234                           ;initializer for _hundreds
   235  07F4  00E5               	movwf	(__pdataBANK0+2)& (0+127)
   236  07F5  30BB               	movlw	low __pbssBANK1
   237                           
   238                           ; Clear objects allocated to BANK1
   239  07F6  1383               	bcf	3,7	;select IRP bank0
   240  07F7  0084               	movwf	4
   241  07F8  30C4               	movlw	low (__pbssBANK1+9)
   242  07F9  203A               	fcall	clear_ram0
   243                           
   244                           ; Clear objects allocated to BANK0
   245  07FA  3056               	movlw	low __pbssBANK0
   246  07FB  0084               	movwf	4
   247  07FC  3063               	movlw	low (__pbssBANK0+13)
   248  07FD  203A               	fcall	clear_ram0
   249  07FE                     end_of_initialization:	
   250                           ;End of C runtime variable initialization code
   251                           
   252  07FE                     __end_of__initialization:	
   253  07FE  0183               	clrf	3
   254  07FF  2842               	ljmp	_main	;jump to C main() function
   255                           
   256                           	psect	bssBANK0
   257  0056                     __pbssBANK0:	
   258  0056                     _LED_delay:	
   259  0056                     	ds	2
   260  0058                     _long_press_counter:	
   261  0058                     	ds	2
   262  005A                     Display@scan_cnt:	
   263  005A                     	ds	1
   264  005B                     _T_flag:	
   265  005B                     	ds	1
   266  005C                     _button_lflag:	
   267  005C                     	ds	1
   268  005D                     _button_sflag:	
   269  005D                     	ds	1
   270  005E                     _debounce_counter:	
   271  005E                     	ds	1
   272  005F                     _pwm_duty:	
   273  005F                     	ds	1
   274  0060                     _ADC_Flag:	
   275  0060                     	ds	1
   276  0061                     _power_percent:	
   277  0061                     	ds	1
   278  0062                     _test_adc:	
   279  0062                     	ds	1
   280                           
   281                           	psect	dataBANK0
   282  0063                     __pdataBANK0:	
   283  0063                     _unit:	
   284  0063                     	ds	1
   285  0064                     _tens:	
   286  0064                     	ds	1
   287  0065                     _hundreds:	
   288  0065                     	ds	1
   289                           
   290                           	psect	bssBANK1
   291  00BB                     __pbssBANK1:	
   292  00BB                     _Time_delay:	
   293  00BB                     	ds	2
   294  00BD                     _ADC_delay:	
   295  00BD                     	ds	2
   296  00BF                     _power_ad:	
   297  00BF                     	ds	2
   298  00C1                     _LED_flag:	
   299  00C1                     	ds	1
   300  00C2                     _adresult:	
   301  00C2                     	ds	2
   302                           
   303                           	psect	dataBANK1
   304  00A0                     __pdataBANK1:	
   305  00A0                     _nums:	
   306  00A0                     	ds	12
   307  00AC                     _num_hund:	
   308  00AC                     	ds	5
   309                           
   310                           	psect	clrtext
   311  003A                     clear_ram0:	
   312                           ;	Called with FSR containing the base address, and
   313                           ;	W with the last address+1
   314                           
   315  003A  0064               	clrwdt	;clear the watchdog before getting into this loop
   316  003B                     clrloop0:	
   317  003B  0180               	clrf	0	;clear RAM location pointed to by FSR
   318  003C  0A84               	incf	4,f	;increment pointer
   319  003D  0604               	xorwf	4,w	;XOR with final address
   320  003E  1903               	btfsc	3,2	;have we reached the end yet?
   321  003F  3400               	retlw	0	;all done for this memory range, return
   322  0040  0604               	xorwf	4,w	;XOR again to restore value
   323  0041  283B               	goto	clrloop0	;do the next byte
   324                           
   325                           	psect	cstackBANK1
   326  00B1                     __pcstackBANK1:	
   327  00B1                     ___fttol@sign1:	
   328                           
   329                           ; 1 bytes @ 0x0
   330  00B1                     	ds	1
   331  00B2                     ___fttol@lval:	
   332                           
   333                           ; 4 bytes @ 0x1
   334  00B2                     	ds	4
   335  00B6                     ___fttol@exp1:	
   336                           
   337                           ; 1 bytes @ 0x5
   338  00B6                     	ds	1
   339  00B7                     ADC_read@power_temp:	
   340                           
   341                           ; 4 bytes @ 0x6
   342  00B7                     	ds	4
   343                           
   344                           	psect	cstackCOMMON
   345  0070                     __pcstackCOMMON:	
   346  0070                     ?_Init_System:	
   347  0070                     ?_Led_Gpio_Init:	
   348                           ; 1 bytes @ 0x0
   349                           
   350  0070                     ?_PWM_Init:	
   351                           ; 1 bytes @ 0x0
   352                           
   353  0070                     ?_Button_response:	
   354                           ; 1 bytes @ 0x0
   355                           
   356  0070                     ?_ADC_read:	
   357                           ; 1 bytes @ 0x0
   358                           
   359  0070                     ?_Motor_num:	
   360                           ; 1 bytes @ 0x0
   361                           
   362  0070                     ?_Set_AllPin_INPUT:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ?_Charge_num:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ?_Uncharge_num:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     ?_Display:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ??_Display:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     ?_main:	
   378                           ; 1 bytes @ 0x0
   379                           
   380  0070                     ?_Isr_Timer:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0070                     ?_Display_Scan1:	
   384                           ; 1 bytes @ 0x0
   385                           
   386  0070                     ??_Display_Scan1:	
   387                           ; 1 bytes @ 0x0
   388                           
   389  0070                     ?_Display_Scan2:	
   390                           ; 1 bytes @ 0x0
   391                           
   392  0070                     ??_Display_Scan2:	
   393                           ; 1 bytes @ 0x0
   394                           
   395  0070                     ?_Display_Scan3:	
   396                           ; 1 bytes @ 0x0
   397                           
   398  0070                     ??_Display_Scan3:	
   399                           ; 1 bytes @ 0x0
   400                           
   401  0070                     ?_Display_Scan4:	
   402                           ; 1 bytes @ 0x0
   403                           
   404  0070                     ??_Display_Scan4:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0070                     ?_Display_Scan5:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0070                     ??_Display_Scan5:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0070                     ?___lbmod:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0070                     ?i1_Set_AllPin_INPUT:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0070                     ??i1_Set_AllPin_INPUT:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ?i1___wmul:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0070                     ___lbmod@divisor:	
   426                           ; 2 bytes @ 0x0
   427                           
   428  0070                     i1___wmul@multiplier:	
   429                           ; 1 bytes @ 0x0
   430                           
   431                           
   432                           ; 2 bytes @ 0x0
   433  0070                     	ds	1
   434  0071                     ??___lbmod:	
   435                           
   436                           ; 1 bytes @ 0x1
   437  0071                     	ds	1
   438  0072                     ___lbmod@dividend:	
   439  0072                     i1___wmul@multiplicand:	
   440                           ; 1 bytes @ 0x2
   441                           
   442                           
   443                           ; 2 bytes @ 0x2
   444  0072                     	ds	1
   445  0073                     ___lbmod@counter:	
   446                           
   447                           ; 1 bytes @ 0x3
   448  0073                     	ds	1
   449  0074                     ??i1___wmul:	
   450  0074                     ___lbmod@rem:	
   451                           ; 1 bytes @ 0x4
   452                           
   453  0074                     i1___wmul@product:	
   454                           ; 1 bytes @ 0x4
   455                           
   456                           
   457                           ; 2 bytes @ 0x4
   458  0074                     	ds	1
   459  0075                     ?___lbdiv:	
   460  0075                     ___lbdiv@divisor:	
   461                           ; 1 bytes @ 0x5
   462                           
   463                           
   464                           ; 1 bytes @ 0x5
   465  0075                     	ds	1
   466  0076                     ??___lbdiv:	
   467  0076                     ?i1___awdiv:	
   468                           ; 1 bytes @ 0x6
   469                           
   470  0076                     ___lbdiv@dividend:	
   471                           ; 2 bytes @ 0x6
   472                           
   473  0076                     i1___awdiv@divisor:	
   474                           ; 1 bytes @ 0x6
   475                           
   476                           
   477                           ; 2 bytes @ 0x6
   478  0076                     	ds	1
   479  0077                     ___lbdiv@counter:	
   480                           
   481                           ; 1 bytes @ 0x7
   482  0077                     	ds	1
   483  0078                     ___lbdiv@quotient:	
   484  0078                     i1___awdiv@dividend:	
   485                           ; 1 bytes @ 0x8
   486                           
   487                           
   488                           ; 2 bytes @ 0x8
   489  0078                     	ds	1
   490  0079                     ??_Charge_num:	
   491  0079                     ??_Uncharge_num:	
   492                           ; 1 bytes @ 0x9
   493                           
   494  0079                     Charge_num@hundred:	
   495                           ; 1 bytes @ 0x9
   496                           
   497  0079                     Uncharge_num@hundred:	
   498                           ; 1 bytes @ 0x9
   499                           
   500                           
   501                           ; 1 bytes @ 0x9
   502  0079                     	ds	1
   503  007A                     ??i1___awdiv:	
   504  007A                     i1___awdiv@counter:	
   505                           ; 1 bytes @ 0xA
   506                           
   507                           
   508                           ; 1 bytes @ 0xA
   509  007A                     	ds	1
   510  007B                     i1___awdiv@sign:	
   511                           
   512                           ; 1 bytes @ 0xB
   513  007B                     	ds	1
   514  007C                     i1___awdiv@quotient:	
   515                           
   516                           ; 2 bytes @ 0xC
   517  007C                     	ds	2
   518  007E                     ??i1_Set_PWM:	
   519                           
   520                           	psect	cstackBANK0
   521  0020                     __pcstackBANK0:	
   522                           ; 1 bytes @ 0xE
   523                           
   524  0020                     ?i1_Set_PWM:	
   525  0020                     i1Set_PWM@duty:	
   526                           ; 1 bytes @ 0x0
   527                           
   528                           
   529                           ; 1 bytes @ 0x0
   530  0020                     	ds	1
   531  0021                     i1Set_PWM@channel:	
   532                           
   533                           ; 1 bytes @ 0x1
   534  0021                     	ds	1
   535  0022                     i1Set_PWM@pulse_width:	
   536                           
   537                           ; 2 bytes @ 0x2
   538  0022                     	ds	2
   539  0024                     ??_Isr_Timer:	
   540                           
   541                           ; 1 bytes @ 0x4
   542  0024                     	ds	4
   543  0028                     ??_Init_System:	
   544  0028                     ??_Led_Gpio_Init:	
   545                           ; 1 bytes @ 0x8
   546                           
   547  0028                     ??_PWM_Init:	
   548                           ; 1 bytes @ 0x8
   549                           
   550  0028                     ??_Motor_num:	
   551                           ; 1 bytes @ 0x8
   552                           
   553  0028                     ??_Set_AllPin_INPUT:	
   554                           ; 1 bytes @ 0x8
   555                           
   556  0028                     ?_ADC_Sample:	
   557                           ; 1 bytes @ 0x8
   558                           
   559  0028                     ?___wmul:	
   560                           ; 1 bytes @ 0x8
   561                           
   562  0028                     ?___awmod:	
   563                           ; 2 bytes @ 0x8
   564                           
   565  0028                     ?___ftpack:	
   566                           ; 2 bytes @ 0x8
   567                           
   568  0028                     ADC_Sample@adldo:	
   569                           ; 3 bytes @ 0x8
   570                           
   571  0028                     ___wmul@multiplier:	
   572                           ; 1 bytes @ 0x8
   573                           
   574  0028                     ___awmod@divisor:	
   575                           ; 2 bytes @ 0x8
   576                           
   577  0028                     ___ftpack@arg:	
   578                           ; 2 bytes @ 0x8
   579                           
   580                           
   581                           ; 3 bytes @ 0x8
   582  0028                     	ds	1
   583  0029                     ??_ADC_Sample:	
   584                           
   585                           ; 1 bytes @ 0x9
   586  0029                     	ds	1
   587  002A                     ___wmul@multiplicand:	
   588  002A                     ___awmod@dividend:	
   589                           ; 2 bytes @ 0xA
   590                           
   591                           
   592                           ; 2 bytes @ 0xA
   593  002A                     	ds	1
   594  002B                     ___ftpack@exp:	
   595                           
   596                           ; 1 bytes @ 0xB
   597  002B                     	ds	1
   598  002C                     ??___wmul:	
   599  002C                     ??___awmod:	
   600                           ; 1 bytes @ 0xC
   601                           
   602  002C                     ___awmod@counter:	
   603                           ; 1 bytes @ 0xC
   604                           
   605  002C                     ___ftpack@sign:	
   606                           ; 1 bytes @ 0xC
   607                           
   608  002C                     ___wmul@product:	
   609                           ; 1 bytes @ 0xC
   610                           
   611                           
   612                           ; 2 bytes @ 0xC
   613  002C                     	ds	1
   614  002D                     ??___ftpack:	
   615  002D                     ADC_Sample@j:	
   616                           ; 1 bytes @ 0xD
   617                           
   618  002D                     ___awmod@sign:	
   619                           ; 1 bytes @ 0xD
   620                           
   621                           
   622                           ; 1 bytes @ 0xD
   623  002D                     	ds	1
   624  002E                     ?___awdiv:	
   625  002E                     ADC_Sample@adch:	
   626                           ; 2 bytes @ 0xE
   627                           
   628  002E                     ___awdiv@divisor:	
   629                           ; 1 bytes @ 0xE
   630                           
   631                           
   632                           ; 2 bytes @ 0xE
   633  002E                     	ds	1
   634  002F                     ADC_Sample@i:	
   635                           
   636                           ; 1 bytes @ 0xF
   637  002F                     	ds	1
   638  0030                     ?___lwtoft:	
   639  0030                     ___awdiv@dividend:	
   640                           ; 3 bytes @ 0x10
   641                           
   642  0030                     ___lwtoft@c:	
   643                           ; 2 bytes @ 0x10
   644                           
   645  0030                     ADC_Sample@adsum:	
   646                           ; 2 bytes @ 0x10
   647                           
   648                           
   649                           ; 4 bytes @ 0x10
   650  0030                     	ds	2
   651  0032                     ??___awdiv:	
   652  0032                     ___awdiv@counter:	
   653                           ; 1 bytes @ 0x12
   654                           
   655                           
   656                           ; 1 bytes @ 0x12
   657  0032                     	ds	1
   658  0033                     ??___lwtoft:	
   659  0033                     ?___ftadd:	
   660                           ; 1 bytes @ 0x13
   661                           
   662  0033                     ___awdiv@sign:	
   663                           ; 3 bytes @ 0x13
   664                           
   665  0033                     ___ftadd@f1:	
   666                           ; 1 bytes @ 0x13
   667                           
   668                           
   669                           ; 3 bytes @ 0x13
   670  0033                     	ds	1
   671  0034                     ADC_Sample@admin:	
   672  0034                     ___awdiv@quotient:	
   673                           ; 2 bytes @ 0x14
   674                           
   675                           
   676                           ; 2 bytes @ 0x14
   677  0034                     	ds	2
   678  0036                     ?_Set_PWM:	
   679  0036                     Set_PWM@duty:	
   680                           ; 1 bytes @ 0x16
   681                           
   682  0036                     ADC_Sample@admax:	
   683                           ; 1 bytes @ 0x16
   684                           
   685  0036                     ___ftadd@f2:	
   686                           ; 2 bytes @ 0x16
   687                           
   688                           
   689                           ; 3 bytes @ 0x16
   690  0036                     	ds	1
   691  0037                     ??_Set_PWM:	
   692  0037                     Set_PWM@channel:	
   693                           ; 1 bytes @ 0x17
   694                           
   695                           
   696                           ; 1 bytes @ 0x17
   697  0037                     	ds	1
   698  0038                     Set_PWM@pulse_width:	
   699  0038                     ADC_Sample@ad_temp:	
   700                           ; 2 bytes @ 0x18
   701                           
   702                           
   703                           ; 2 bytes @ 0x18
   704  0038                     	ds	1
   705  0039                     ??___ftadd:	
   706                           
   707                           ; 1 bytes @ 0x19
   708  0039                     	ds	1
   709  003A                     ??_Button_response:	
   710                           
   711                           ; 1 bytes @ 0x1A
   712  003A                     	ds	2
   713  003C                     ___ftadd@sign:	
   714                           
   715                           ; 1 bytes @ 0x1C
   716  003C                     	ds	1
   717  003D                     ___ftadd@exp2:	
   718                           
   719                           ; 1 bytes @ 0x1D
   720  003D                     	ds	1
   721  003E                     ___ftadd@exp1:	
   722                           
   723                           ; 1 bytes @ 0x1E
   724  003E                     	ds	1
   725  003F                     ?___ftdiv:	
   726  003F                     ___ftdiv@f2:	
   727                           ; 3 bytes @ 0x1F
   728                           
   729                           
   730                           ; 3 bytes @ 0x1F
   731  003F                     	ds	3
   732  0042                     ___ftdiv@f1:	
   733                           
   734                           ; 3 bytes @ 0x22
   735  0042                     	ds	3
   736  0045                     ??___ftdiv:	
   737                           
   738                           ; 1 bytes @ 0x25
   739  0045                     	ds	3
   740  0048                     ___ftdiv@cntr:	
   741                           
   742                           ; 1 bytes @ 0x28
   743  0048                     	ds	1
   744  0049                     ___ftdiv@f3:	
   745                           
   746                           ; 3 bytes @ 0x29
   747  0049                     	ds	3
   748  004C                     ___ftdiv@exp:	
   749                           
   750                           ; 1 bytes @ 0x2C
   751  004C                     	ds	1
   752  004D                     ___ftdiv@sign:	
   753                           
   754                           ; 1 bytes @ 0x2D
   755  004D                     	ds	1
   756  004E                     ?___fttol:	
   757  004E                     ___fttol@f1:	
   758                           ; 4 bytes @ 0x2E
   759                           
   760                           
   761                           ; 3 bytes @ 0x2E
   762  004E                     	ds	4
   763  0052                     ??___fttol:	
   764                           
   765                           ; 1 bytes @ 0x32
   766  0052                     	ds	3
   767  0055                     ??_ADC_read:	
   768                           
   769                           ; 1 bytes @ 0x35
   770  0055                     	ds	1
   771  0056                     ??_main:	
   772                           
   773                           	psect	maintext
   774  0042                     __pmaintext:	
   775                           ; 1 bytes @ 0x36
   776 ;;
   777 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   778 ;;
   779 ;; *************** function _main *****************
   780 ;; Defined at:
   781 ;;		line 56 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SC8F072_double_key\SC8F072_Pwm_Demo.c"
   782 ;; Parameters:    Size  Location     Type
   783 ;;		None
   784 ;; Auto vars:     Size  Location     Type
   785 ;;		None
   786 ;; Return value:  Size  Location     Type
   787 ;;                  1    wreg      void 
   788 ;; Registers used:
   789 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   790 ;; Tracked objects:
   791 ;;		On entry : B00/0
   792 ;;		On exit  : 0/0
   793 ;;		Unchanged: 0/0
   794 ;; Data sizes:     COMMON   BANK0   BANK1
   795 ;;      Params:         0       0       0
   796 ;;      Locals:         0       0       0
   797 ;;      Temps:          0       0       0
   798 ;;      Totals:         0       0       0
   799 ;;Total ram usage:        0 bytes
   800 ;; Hardware stack levels required when called:    6
   801 ;; This function calls:
   802 ;;		_ADC_read
   803 ;;		_Button_response
   804 ;;		_Init_System
   805 ;;		_Led_Gpio_Init
   806 ;;		_PWM_Init
   807 ;; This function is called by:
   808 ;;		Startup code after reset
   809 ;; This function uses a non-reentrant model
   810 ;;
   811                           
   812                           
   813                           ;psect for function _main
   814  0042                     _main:	
   815                           
   816                           ;SC8F072_Pwm_Demo.c: 58: Init_System();
   817                           
   818                           ;incstack = 0
   819                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   820  0042  220F               	fcall	_Init_System
   821                           
   822                           ;SC8F072_Pwm_Demo.c: 59: Led_Gpio_Init();
   823  0043  202A               	fcall	_Led_Gpio_Init
   824                           
   825                           ;SC8F072_Pwm_Demo.c: 60: PWM_Init();
   826  0044  2080               	fcall	_PWM_Init
   827  0045                     l661:	
   828                           ;SC8F072_Pwm_Demo.c: 61: while(1)
   829                           
   830  0045  0064               	clrwdt	;# 
   831                           
   832                           ;SC8F072_Pwm_Demo.c: 64: Button_response();
   833  0046  25FB               	fcall	_Button_response
   834                           
   835                           ;SC8F072_Pwm_Demo.c: 65: if(ADC_Flag)
   836  0047  1283               	bcf	3,5	;RP0=0, select bank0
   837  0048  0860               	movf	_ADC_Flag,w	;volatile
   838  0049  1903               	btfsc	3,2
   839  004A  284C               	goto	l662
   840                           
   841                           ;SC8F072_Pwm_Demo.c: 66: {
   842                           ;SC8F072_Pwm_Demo.c: 67: ADC_read();
   843  004B  23B6               	fcall	_ADC_read
   844  004C                     l662:	
   845  004C  0064               	clrwdt	;# 
   846  004D  2845               	goto	l661
   847  004E                     __end_of_main:	
   848                           
   849                           	psect	text1
   850  0080                     __ptext1:	
   851 ;; *************** function _PWM_Init *****************
   852 ;; Defined at:
   853 ;;		line 132 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SC8F072_double_key\SC8F072_Pwm_Demo.c"
   854 ;; Parameters:    Size  Location     Type
   855 ;;		None
   856 ;; Auto vars:     Size  Location     Type
   857 ;;		None
   858 ;; Return value:  Size  Location     Type
   859 ;;                  1    wreg      void 
   860 ;; Registers used:
   861 ;;		wreg, status,2
   862 ;; Tracked objects:
   863 ;;		On entry : 100/0
   864 ;;		On exit  : 100/0
   865 ;;		Unchanged: 0/0
   866 ;; Data sizes:     COMMON   BANK0   BANK1
   867 ;;      Params:         0       0       0
   868 ;;      Locals:         0       0       0
   869 ;;      Temps:          0       0       0
   870 ;;      Totals:         0       0       0
   871 ;;Total ram usage:        0 bytes
   872 ;; Hardware stack levels used:    1
   873 ;; Hardware stack levels required when called:    3
   874 ;; This function calls:
   875 ;;		Nothing
   876 ;; This function is called by:
   877 ;;		_main
   878 ;; This function uses a non-reentrant model
   879 ;;
   880                           
   881                           
   882                           ;psect for function _PWM_Init
   883  0080                     _PWM_Init:	
   884                           
   885                           ;SC8F072_Pwm_Demo.c: 134: PWMCON1 = 0B11000000;
   886                           
   887                           ;incstack = 0
   888                           ; Regs used in _PWM_Init: [wreg+status,2]
   889  0080  30C0               	movlw	192
   890  0081  0096               	movwf	22	;volatile
   891                           
   892                           ;SC8F072_Pwm_Demo.c: 135: TRISA = 0B00111111;
   893  0082  303F               	movlw	63
   894  0083  1683               	bsf	3,5	;RP0=1, select bank1
   895  0084  0085               	movwf	5	;volatile
   896                           
   897                           ;SC8F072_Pwm_Demo.c: 136: PWMTL = 0XFF;
   898  0085  30FF               	movlw	255
   899  0086  1283               	bcf	3,5	;RP0=0, select bank0
   900  0087  0097               	movwf	23	;volatile
   901                           
   902                           ;SC8F072_Pwm_Demo.c: 137: PWMT4L = 0XFF;
   903  0088  009C               	movwf	28	;volatile
   904                           
   905                           ;SC8F072_Pwm_Demo.c: 138: PWMTH = 0X00;
   906  0089  0198               	clrf	24	;volatile
   907                           
   908                           ;SC8F072_Pwm_Demo.c: 143: PWMD0L = 0X00;
   909  008A  0199               	clrf	25	;volatile
   910                           
   911                           ;SC8F072_Pwm_Demo.c: 146: PWMD1L = 0X00;
   912  008B  019A               	clrf	26	;volatile
   913                           
   914                           ;SC8F072_Pwm_Demo.c: 147: PWMD01H = 0X00;
   915  008C  019E               	clrf	30	;volatile
   916                           
   917                           ;SC8F072_Pwm_Demo.c: 150: PWMD2L = 0X00;
   918  008D  1683               	bsf	3,5	;RP0=1, select bank1
   919  008E  019B               	clrf	27	;volatile
   920                           
   921                           ;SC8F072_Pwm_Demo.c: 152: PWMD23H = 0X00;
   922  008F  019E               	clrf	30	;volatile
   923                           
   924                           ;SC8F072_Pwm_Demo.c: 154: PWMD4L = 0X00;
   925  0090  1283               	bcf	3,5	;RP0=0, select bank0
   926  0091  019B               	clrf	27	;volatile
   927                           
   928                           ;SC8F072_Pwm_Demo.c: 170: PWMCON0 = 0X17;
   929  0092  3017               	movlw	23
   930  0093  0095               	movwf	21	;volatile
   931                           
   932                           ;SC8F072_Pwm_Demo.c: 171: PWMCON2 =0X00;
   933  0094  019D               	clrf	29	;volatile
   934  0095  0008               	return
   935  0096                     __end_of_PWM_Init:	
   936                           
   937                           	psect	text2
   938  002A                     __ptext2:	
   939 ;; *************** function _Led_Gpio_Init *****************
   940 ;; Defined at:
   941 ;;		line 76 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SC8F072_double_key\LED_188.c"
   942 ;; Parameters:    Size  Location     Type
   943 ;;		None
   944 ;; Auto vars:     Size  Location     Type
   945 ;;		None
   946 ;; Return value:  Size  Location     Type
   947 ;;                  1    wreg      void 
   948 ;; Registers used:
   949 ;;		None
   950 ;; Tracked objects:
   951 ;;		On entry : 100/100
   952 ;;		On exit  : 100/0
   953 ;;		Unchanged: 0/0
   954 ;; Data sizes:     COMMON   BANK0   BANK1
   955 ;;      Params:         0       0       0
   956 ;;      Locals:         0       0       0
   957 ;;      Temps:          0       0       0
   958 ;;      Totals:         0       0       0
   959 ;;Total ram usage:        0 bytes
   960 ;; Hardware stack levels used:    1
   961 ;; Hardware stack levels required when called:    3
   962 ;; This function calls:
   963 ;;		Nothing
   964 ;; This function is called by:
   965 ;;		_main
   966 ;; This function uses a non-reentrant model
   967 ;;
   968                           
   969                           
   970                           ;psect for function _Led_Gpio_Init
   971  002A                     _Led_Gpio_Init:	
   972                           
   973                           ;LED_188.c: 78: TRISB0 = 1;;
   974                           
   975                           ;incstack = 0
   976                           ; Regs used in _Led_Gpio_Init: []
   977  002A  1283               	bcf	3,5	;RP0=0, select bank0
   978                           
   979                           ;LED_188.c: 79: TRISB1 = 1;;
   980                           
   981                           ;LED_188.c: 80: TRISB2 = 1;;
   982                           
   983                           ;LED_188.c: 81: TRISB3 = 1;;
   984                           
   985                           ;LED_188.c: 82: TRISB4 = 1;;
   986  002B  2834               	ljmp	PL4	;call to abstracted procedure
   987  002C                     __end_of_Led_Gpio_Init:	
   988                           
   989                           	psect	text3
   990  020F                     __ptext3:	
   991 ;; *************** function _Init_System *****************
   992 ;; Defined at:
   993 ;;		line 81 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SC8F072_double_key\SC8F072_Pwm_Demo.c"
   994 ;; Parameters:    Size  Location     Type
   995 ;;		None
   996 ;; Auto vars:     Size  Location     Type
   997 ;;		None
   998 ;; Return value:  Size  Location     Type
   999 ;;                  1    wreg      void 
  1000 ;; Registers used:
  1001 ;;		wreg, status,2
  1002 ;; Tracked objects:
  1003 ;;		On entry : B00/0
  1004 ;;		On exit  : 100/100
  1005 ;;		Unchanged: 0/0
  1006 ;; Data sizes:     COMMON   BANK0   BANK1
  1007 ;;      Params:         0       0       0
  1008 ;;      Locals:         0       0       0
  1009 ;;      Temps:          0       0       0
  1010 ;;      Totals:         0       0       0
  1011 ;;Total ram usage:        0 bytes
  1012 ;; Hardware stack levels used:    1
  1013 ;; Hardware stack levels required when called:    3
  1014 ;; This function calls:
  1015 ;;		Nothing
  1016 ;; This function is called by:
  1017 ;;		_main
  1018 ;; This function uses a non-reentrant model
  1019 ;;
  1020                           
  1021                           
  1022                           ;psect for function _Init_System
  1023  020F                     _Init_System:	
  1024                           
  1025                           ;incstack = 0
  1026                           ; Regs used in _Init_System: [wreg+status,2]
  1027  020F  0000               	nop	;# 
  1028  0210  0064               	clrwdt	;# 
  1029                           
  1030                           ;SC8F072_Pwm_Demo.c: 85: INTCON = 0;
  1031  0211  018B               	clrf	11	;volatile
  1032                           
  1033                           ;SC8F072_Pwm_Demo.c: 86: OSCCON = 0X72;
  1034  0212  3072               	movlw	114
  1035  0213  1283               	bcf	3,5	;RP0=0, select bank0
  1036  0214  0094               	movwf	20	;volatile
  1037                           
  1038                           ;SC8F072_Pwm_Demo.c: 87: OPTION_REG = 0B00000100;
  1039  0215  3004               	movlw	4
  1040  0216  0081               	movwf	1	;volatile
  1041  0217  0064               	clrwdt	;# 
  1042                           
  1043                           ;SC8F072_Pwm_Demo.c: 90: WPUA = 0B00000000;
  1044  0218  1683               	bsf	3,5	;RP0=1, select bank1
  1045  0219  0188               	clrf	8	;volatile
  1046                           
  1047                           ;SC8F072_Pwm_Demo.c: 91: WPUB = 0B00000000;
  1048  021A  1283               	bcf	3,5	;RP0=0, select bank0
  1049  021B  0188               	clrf	8	;volatile
  1050                           
  1051                           ;SC8F072_Pwm_Demo.c: 92: WPDA = 0B00000000;
  1052  021C  1683               	bsf	3,5	;RP0=1, select bank1
  1053  021D  0187               	clrf	7	;volatile
  1054                           
  1055                           ;SC8F072_Pwm_Demo.c: 93: WPDB = 0B00000000;
  1056  021E  1283               	bcf	3,5	;RP0=0, select bank0
  1057  021F  0187               	clrf	7	;volatile
  1058                           
  1059                           ;SC8F072_Pwm_Demo.c: 94: TRISA = 0B00000000;
  1060  0220  1683               	bsf	3,5	;RP0=1, select bank1
  1061  0221  0185               	clrf	5	;volatile
  1062                           
  1063                           ;SC8F072_Pwm_Demo.c: 95: TRISB = 0B00000000;
  1064  0222  1283               	bcf	3,5	;RP0=0, select bank0
  1065  0223  0185               	clrf	5	;volatile
  1066                           
  1067                           ;SC8F072_Pwm_Demo.c: 96: PORTA = 0B00000000;
  1068  0224  1683               	bsf	3,5	;RP0=1, select bank1
  1069  0225  0186               	clrf	6	;volatile
  1070                           
  1071                           ;SC8F072_Pwm_Demo.c: 97: PORTB = 0B00000000;
  1072  0226  1283               	bcf	3,5	;RP0=0, select bank0
  1073  0227  0186               	clrf	6	;volatile
  1074                           
  1075                           ;SC8F072_Pwm_Demo.c: 99: TMR0 = 6;
  1076  0228  3006               	movlw	6
  1077  0229  1683               	bsf	3,5	;RP0=1, select bank1
  1078  022A  0081               	movwf	1	;volatile
  1079                           
  1080                           ;SC8F072_Pwm_Demo.c: 100: T0IF = 0;
  1081  022B  110B               	bcf	11,2	;volatile
  1082                           
  1083                           ;SC8F072_Pwm_Demo.c: 101: T0IE = 1;
  1084  022C  168B               	bsf	11,5	;volatile
  1085                           
  1086                           ;SC8F072_Pwm_Demo.c: 102: GIE = 1;
  1087  022D  178B               	bsf	11,7	;volatile
  1088                           
  1089                           ;SC8F072_Pwm_Demo.c: 105: PR2 = 249;
  1090  022E  30F9               	movlw	249
  1091  022F  1283               	bcf	3,5	;RP0=0, select bank0
  1092  0230  0091               	movwf	17	;volatile
  1093                           
  1094                           ;SC8F072_Pwm_Demo.c: 106: TMR2IF = 0;
  1095  0231  108D               	bcf	13,1	;volatile
  1096                           
  1097                           ;SC8F072_Pwm_Demo.c: 107: TMR2IE = 1;
  1098  0232  148E               	bsf	14,1	;volatile
  1099                           
  1100                           ;SC8F072_Pwm_Demo.c: 108: T2CON = 0B00000111;
  1101  0233  3007               	movlw	7
  1102  0234  0093               	movwf	19	;volatile
  1103                           
  1104                           ;SC8F072_Pwm_Demo.c: 112: WPUB = 0B00100000;
  1105  0235  3020               	movlw	32
  1106  0236  0088               	movwf	8	;volatile
  1107                           
  1108                           ;SC8F072_Pwm_Demo.c: 113: TRISB= 0B00100000;
  1109  0237  0085               	movwf	5	;volatile
  1110                           
  1111                           ;SC8F072_Pwm_Demo.c: 114: IOCB = 0B00100000;
  1112  0238  0089               	movwf	9	;volatile
  1113                           
  1114                           ;SC8F072_Pwm_Demo.c: 115: RBIE = 1;
  1115  0239  158B               	bsf	11,3	;volatile
  1116                           
  1117                           ;SC8F072_Pwm_Demo.c: 116: PORTB;
  1118  023A  0806               	movf	6,w	;volatile
  1119                           
  1120                           ;SC8F072_Pwm_Demo.c: 120: WPUA = 0B00101000;
  1121  023B  3028               	movlw	40
  1122  023C  1683               	bsf	3,5	;RP0=1, select bank1
  1123  023D  0088               	movwf	8	;volatile
  1124                           
  1125                           ;SC8F072_Pwm_Demo.c: 121: TRISA= 0B00101000;
  1126  023E  0085               	movwf	5	;volatile
  1127                           
  1128                           ;SC8F072_Pwm_Demo.c: 122: IOCA = 0B00101000;
  1129  023F  0089               	movwf	9	;volatile
  1130                           
  1131                           ;SC8F072_Pwm_Demo.c: 123: RAIE = 1;
  1132  0240  1283               	bcf	3,5	;RP0=0, select bank0
  1133  0241  158E               	bsf	14,3	;volatile
  1134                           
  1135                           ;SC8F072_Pwm_Demo.c: 125: RAIF = 0;
  1136  0242  118D               	bcf	13,3	;volatile
  1137                           
  1138                           ;SC8F072_Pwm_Demo.c: 126: PORTA;
  1139  0243  1683               	bsf	3,5	;RP0=1, select bank1
  1140  0244  0806               	movf	6,w	;volatile
  1141                           
  1142                           ;SC8F072_Pwm_Demo.c: 128: INTCON = 0xE8;
  1143  0245  30E8               	movlw	232
  1144  0246  008B               	movwf	11	;volatile
  1145  0247  0008               	return
  1146  0248                     __end_of_Init_System:	
  1147                           
  1148                           	psect	text4
  1149  05FB                     __ptext4:	
  1150 ;; *************** function _Button_response *****************
  1151 ;; Defined at:
  1152 ;;		line 310 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SC8F072_double_key\SC8F072_Pwm_Demo.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;		None
  1155 ;; Auto vars:     Size  Location     Type
  1156 ;;		None
  1157 ;; Return value:  Size  Location     Type
  1158 ;;                  1    wreg      void 
  1159 ;; Registers used:
  1160 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1161 ;; Tracked objects:
  1162 ;;		On entry : 0/0
  1163 ;;		On exit  : 0/0
  1164 ;;		Unchanged: 0/0
  1165 ;; Data sizes:     COMMON   BANK0   BANK1
  1166 ;;      Params:         0       0       0
  1167 ;;      Locals:         0       0       0
  1168 ;;      Temps:          0       1       0
  1169 ;;      Totals:         0       1       0
  1170 ;;Total ram usage:        1 bytes
  1171 ;; Hardware stack levels used:    1
  1172 ;; Hardware stack levels required when called:    5
  1173 ;; This function calls:
  1174 ;;		_Motor_num
  1175 ;;		_Set_AllPin_INPUT
  1176 ;;		_Set_PWM
  1177 ;;		___awmod
  1178 ;; This function is called by:
  1179 ;;		_main
  1180 ;; This function uses a non-reentrant model
  1181 ;;
  1182                           
  1183                           
  1184                           ;psect for function _Button_response
  1185  05FB                     _Button_response:	
  1186                           
  1187                           ;SC8F072_Pwm_Demo.c: 312: if (button_sflag)
  1188                           
  1189                           ;incstack = 0
  1190                           ; Regs used in _Button_response: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1191  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  1192  05FC  085D               	movf	_button_sflag,w	;volatile
  1193  05FD  1903               	btfsc	3,2
  1194  05FE  2EAD               	goto	l3413
  1195                           
  1196                           ;SC8F072_Pwm_Demo.c: 313: {
  1197                           ;SC8F072_Pwm_Demo.c: 314: TRISA = 0B00101000;
  1198  05FF  3028               	movlw	40
  1199  0600  1683               	bsf	3,5	;RP0=1, select bank1
  1200  0601  0085               	movwf	5	;volatile
  1201                           
  1202                           ;SC8F072_Pwm_Demo.c: 315: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1203  0602  3084               	movlw	132
  1204  0603  1283               	bcf	3,5	;RP0=0, select bank0
  1205  0604  00BA               	movwf	??_Button_response
  1206  0605                     u3207:	
  1207  0605  0BBA               	decfsz	??_Button_response,f
  1208  0606  2E05               	goto	u3207
  1209  0607  2E08               	nop2
  1210                           
  1211                           ;SC8F072_Pwm_Demo.c: 316: button_sflag = 0;
  1212  0608  1283               	bcf	3,5	;RP0=0, select bank0
  1213  0609  01DD               	clrf	_button_sflag	;volatile
  1214                           
  1215                           ;SC8F072_Pwm_Demo.c: 317: switch (pwm_duty)
  1216  060A  2E8D               	goto	l3405
  1217  060B                     l3391:	
  1218                           
  1219                           ;SC8F072_Pwm_Demo.c: 320: Set_PWM(0, duty_steps[pwm_duty]);
  1220  060B  085F               	movf	_pwm_duty,w
  1221  060C  3E01               	addlw	low ((_duty_steps-__stringbase)| (0+32768))
  1222  060D  0084               	movwf	4
  1223  060E  200D               	fcall	stringdir
  1224  060F  00B6               	movwf	Set_PWM@duty
  1225  0610  3000               	movlw	0
  1226  0611  21DD               	fcall	_Set_PWM
  1227                           
  1228                           ;SC8F072_Pwm_Demo.c: 321: Set_PWM(1, duty_steps[5]);
  1229  0612  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1230  0613  0084               	movwf	4
  1231  0614  200D               	fcall	stringdir
  1232  0615  1283               	bcf	3,5	;RP0=0, select bank0
  1233  0616  00B6               	movwf	Set_PWM@duty
  1234  0617  3001               	movlw	1
  1235  0618  21DD               	fcall	_Set_PWM
  1236                           
  1237                           ;SC8F072_Pwm_Demo.c: 322: Set_PWM(2, duty_steps[5]);
  1238  0619  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1239  061A  0084               	movwf	4
  1240  061B  200D               	fcall	stringdir
  1241  061C  1283               	bcf	3,5	;RP0=0, select bank0
  1242  061D  00B6               	movwf	Set_PWM@duty
  1243  061E  3002               	movlw	2
  1244  061F  21DD               	fcall	_Set_PWM
  1245                           
  1246                           ;SC8F072_Pwm_Demo.c: 323: Set_PWM(4, duty_steps[pwm_duty]);
  1247  0620  26D8               	fcall	PL8	;call to abstracted procedure
  1248  0621  200D               	fcall	stringdir
  1249  0622  00B6               	movwf	Set_PWM@duty
  1250  0623  3004               	movlw	4
  1251  0624  21DD               	fcall	_Set_PWM
  1252                           
  1253                           ;SC8F072_Pwm_Demo.c: 324: break;
  1254  0625  2E98               	goto	l3407
  1255  0626                     l3393:	
  1256                           
  1257                           ;SC8F072_Pwm_Demo.c: 326: Set_PWM(0, duty_steps[pwm_duty]);
  1258  0626  085F               	movf	_pwm_duty,w
  1259  0627  3E01               	addlw	low ((_duty_steps-__stringbase)| (0+32768))
  1260  0628  0084               	movwf	4
  1261  0629  200D               	fcall	stringdir
  1262  062A  00B6               	movwf	Set_PWM@duty
  1263  062B  3000               	movlw	0
  1264  062C  21DD               	fcall	_Set_PWM
  1265                           
  1266                           ;SC8F072_Pwm_Demo.c: 327: Set_PWM(1, duty_steps[pwm_duty]);
  1267  062D  26D8               	fcall	PL8	;call to abstracted procedure
  1268  062E  200D               	fcall	stringdir
  1269  062F  00B6               	movwf	Set_PWM@duty
  1270  0630  3001               	movlw	1
  1271  0631  21DD               	fcall	_Set_PWM
  1272                           
  1273                           ;SC8F072_Pwm_Demo.c: 328: Set_PWM(2, duty_steps[5]);
  1274  0632  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1275  0633  0084               	movwf	4
  1276  0634  200D               	fcall	stringdir
  1277  0635  1283               	bcf	3,5	;RP0=0, select bank0
  1278  0636  00B6               	movwf	Set_PWM@duty
  1279  0637  3002               	movlw	2
  1280  0638  21DD               	fcall	_Set_PWM
  1281                           
  1282                           ;SC8F072_Pwm_Demo.c: 329: Set_PWM(4, duty_steps[pwm_duty]);
  1283  0639  26D8               	fcall	PL8	;call to abstracted procedure
  1284  063A  200D               	fcall	stringdir
  1285  063B  00B6               	movwf	Set_PWM@duty
  1286  063C  3004               	movlw	4
  1287  063D  21DD               	fcall	_Set_PWM
  1288                           
  1289                           ;SC8F072_Pwm_Demo.c: 330: break;
  1290  063E  2E98               	goto	l3407
  1291  063F                     l3395:	
  1292                           
  1293                           ;SC8F072_Pwm_Demo.c: 332: Set_PWM(0, duty_steps[pwm_duty]);
  1294  063F  085F               	movf	_pwm_duty,w
  1295  0640  3E01               	addlw	low ((_duty_steps-__stringbase)| (0+32768))
  1296  0641  0084               	movwf	4
  1297  0642  200D               	fcall	stringdir
  1298  0643  00B6               	movwf	Set_PWM@duty
  1299  0644  3000               	movlw	0
  1300  0645  21DD               	fcall	_Set_PWM
  1301                           
  1302                           ;SC8F072_Pwm_Demo.c: 333: Set_PWM(1, duty_steps[5]);
  1303  0646  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1304  0647  0084               	movwf	4
  1305  0648  200D               	fcall	stringdir
  1306  0649  1283               	bcf	3,5	;RP0=0, select bank0
  1307  064A  00B6               	movwf	Set_PWM@duty
  1308  064B  3001               	movlw	1
  1309  064C  21DD               	fcall	_Set_PWM
  1310                           
  1311                           ;SC8F072_Pwm_Demo.c: 334: Set_PWM(2, duty_steps[pwm_duty]);
  1312  064D  26D8               	fcall	PL8	;call to abstracted procedure
  1313  064E  200D               	fcall	stringdir
  1314  064F  00B6               	movwf	Set_PWM@duty
  1315  0650  3002               	movlw	2
  1316  0651  21DD               	fcall	_Set_PWM
  1317                           
  1318                           ;SC8F072_Pwm_Demo.c: 335: Set_PWM(4, duty_steps[pwm_duty]);
  1319  0652  26D8               	fcall	PL8	;call to abstracted procedure
  1320  0653  200D               	fcall	stringdir
  1321  0654  00B6               	movwf	Set_PWM@duty
  1322  0655  3004               	movlw	4
  1323  0656  21DD               	fcall	_Set_PWM
  1324                           
  1325                           ;SC8F072_Pwm_Demo.c: 336: break;
  1326  0657  2E98               	goto	l3407
  1327  0658                     l3397:	
  1328                           
  1329                           ;SC8F072_Pwm_Demo.c: 338: Set_PWM(0, duty_steps[5]);
  1330  0658  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1331  0659  0084               	movwf	4
  1332  065A  200D               	fcall	stringdir
  1333  065B  00B6               	movwf	Set_PWM@duty
  1334  065C  3000               	movlw	0
  1335  065D  21DD               	fcall	_Set_PWM
  1336                           
  1337                           ;SC8F072_Pwm_Demo.c: 339: Set_PWM(1, duty_steps[pwm_duty]);
  1338  065E  26D8               	fcall	PL8	;call to abstracted procedure
  1339  065F  200D               	fcall	stringdir
  1340  0660  00B6               	movwf	Set_PWM@duty
  1341  0661  3001               	movlw	1
  1342  0662  21DD               	fcall	_Set_PWM
  1343                           
  1344                           ;SC8F072_Pwm_Demo.c: 340: Set_PWM(2, duty_steps[pwm_duty]);
  1345  0663  26D8               	fcall	PL8	;call to abstracted procedure
  1346  0664  200D               	fcall	stringdir
  1347  0665  00B6               	movwf	Set_PWM@duty
  1348  0666  3002               	movlw	2
  1349  0667  21DD               	fcall	_Set_PWM
  1350                           
  1351                           ;SC8F072_Pwm_Demo.c: 341: Set_PWM(4, duty_steps[pwm_duty]);
  1352  0668  26D8               	fcall	PL8	;call to abstracted procedure
  1353  0669  200D               	fcall	stringdir
  1354  066A  00B6               	movwf	Set_PWM@duty
  1355  066B  3004               	movlw	4
  1356  066C  21DD               	fcall	_Set_PWM
  1357                           
  1358                           ;SC8F072_Pwm_Demo.c: 342: break;
  1359  066D  2E98               	goto	l3407
  1360  066E                     l3399:	
  1361                           
  1362                           ;SC8F072_Pwm_Demo.c: 344: Set_PWM(0, duty_steps[5]);
  1363  066E  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1364  066F  0084               	movwf	4
  1365  0670  200D               	fcall	stringdir
  1366  0671  00B6               	movwf	Set_PWM@duty
  1367  0672  3000               	movlw	0
  1368  0673  21DD               	fcall	_Set_PWM
  1369                           
  1370                           ;SC8F072_Pwm_Demo.c: 345: Set_PWM(1, duty_steps[5]);
  1371  0674  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1372  0675  0084               	movwf	4
  1373  0676  200D               	fcall	stringdir
  1374  0677  1283               	bcf	3,5	;RP0=0, select bank0
  1375  0678  00B6               	movwf	Set_PWM@duty
  1376  0679  3001               	movlw	1
  1377  067A  21DD               	fcall	_Set_PWM
  1378                           
  1379                           ;SC8F072_Pwm_Demo.c: 346: Set_PWM(2, duty_steps[5]);
  1380  067B  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1381  067C  0084               	movwf	4
  1382  067D  200D               	fcall	stringdir
  1383  067E  1283               	bcf	3,5	;RP0=0, select bank0
  1384  067F  00B6               	movwf	Set_PWM@duty
  1385  0680  3002               	movlw	2
  1386  0681  21DD               	fcall	_Set_PWM
  1387                           
  1388                           ;SC8F072_Pwm_Demo.c: 347: Set_PWM(4, duty_steps[5]);
  1389  0682  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1390  0683  0084               	movwf	4
  1391  0684  200D               	fcall	stringdir
  1392  0685  1283               	bcf	3,5	;RP0=0, select bank0
  1393  0686  00B6               	movwf	Set_PWM@duty
  1394  0687  3004               	movlw	4
  1395  0688  21DD               	fcall	_Set_PWM
  1396                           
  1397                           ;SC8F072_Pwm_Demo.c: 348: TRISA = 0B00111111;
  1398  0689  303F               	movlw	63
  1399  068A  1683               	bsf	3,5	;RP0=1, select bank1
  1400  068B  0085               	movwf	5	;volatile
  1401                           
  1402                           ;SC8F072_Pwm_Demo.c: 349: break;
  1403  068C  2E98               	goto	l3407
  1404  068D                     l3405:	
  1405  068D  085F               	movf	_pwm_duty,w	;volatile
  1406                           
  1407                           ; Switch size 1, requested type "space"
  1408                           ; Number of cases is 5, Range of values is 0 to 4
  1409                           ; switch strategies available:
  1410                           ; Name         Instructions Cycles
  1411                           ; direct_byte           11     6 (fixed)
  1412                           ; simple_byte           16     9 (average)
  1413                           ; jumptable            260     6 (fixed)
  1414                           ;	Chosen strategy is direct_byte
  1415  068E  0084               	movwf	4
  1416  068F  3005               	movlw	5
  1417  0690  0204               	subwf	4,w
  1418  0691  1803               	skipnc
  1419  0692  2E98               	goto	l3407
  1420  0693  3000               	movlw	high S4085
  1421  0694  008A               	movwf	10
  1422  0695  3019               	movlw	low S4085
  1423  0696  0704               	addwf	4,w
  1424  0697  0082               	movwf	2
  1425  0698                     l3407:	
  1426                           
  1427                           ;SC8F072_Pwm_Demo.c: 353: Motor_num();
  1428  0698  202C               	fcall	_Motor_num
  1429                           
  1430                           ;SC8F072_Pwm_Demo.c: 354: pwm_duty = (pwm_duty + 1) % 5;
  1431  0699  085F               	movf	_pwm_duty,w	;volatile
  1432  069A  00AA               	movwf	___awmod@dividend
  1433  069B  01AB               	clrf	___awmod@dividend+1
  1434  069C  0AAA               	incf	___awmod@dividend,f
  1435  069D  1903               	skipnz
  1436  069E  0AAB               	incf	___awmod@dividend+1,f
  1437  069F  3005               	movlw	5
  1438  06A0  00A8               	movwf	___awmod@divisor
  1439  06A1  01A9               	clrf	___awmod@divisor+1
  1440  06A2  2248               	fcall	___awmod
  1441  06A3  0828               	movf	?___awmod,w
  1442  06A4  00DF               	movwf	_pwm_duty	;volatile
  1443                           
  1444                           ;SC8F072_Pwm_Demo.c: 355: Time_delay=2500;
  1445  06A5  30C4               	movlw	196
  1446  06A6  1683               	bsf	3,5	;RP0=1, select bank1
  1447  06A7  00BB               	movwf	_Time_delay^(0+128)	;volatile
  1448  06A8  3009               	movlw	9
  1449  06A9  00BC               	movwf	(_Time_delay^(0+128)+1)	;volatile
  1450                           
  1451                           ;SC8F072_Pwm_Demo.c: 356: T_flag=1;
  1452  06AA  3001               	movlw	1
  1453  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  1454  06AC  00DB               	movwf	_T_flag	;volatile
  1455  06AD                     l3413:	
  1456                           
  1457                           ;SC8F072_Pwm_Demo.c: 358: }
  1458                           ;SC8F072_Pwm_Demo.c: 359: if (button_lflag)
  1459  06AD  085C               	movf	_button_lflag,w	;volatile
  1460  06AE  1903               	btfsc	3,2
  1461  06AF  0008               	return
  1462                           
  1463                           ;SC8F072_Pwm_Demo.c: 360: {
  1464                           ;SC8F072_Pwm_Demo.c: 361: button_lflag = 0;
  1465  06B0  01DC               	clrf	_button_lflag	;volatile
  1466                           
  1467                           ;SC8F072_Pwm_Demo.c: 362: Set_PWM(0, duty_steps[5]);
  1468  06B1  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1469  06B2  0084               	movwf	4
  1470  06B3  200D               	fcall	stringdir
  1471  06B4  00B6               	movwf	Set_PWM@duty
  1472  06B5  3000               	movlw	0
  1473  06B6  21DD               	fcall	_Set_PWM
  1474                           
  1475                           ;SC8F072_Pwm_Demo.c: 363: Set_PWM(1, duty_steps[5]);
  1476  06B7  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1477  06B8  0084               	movwf	4
  1478  06B9  200D               	fcall	stringdir
  1479  06BA  1283               	bcf	3,5	;RP0=0, select bank0
  1480  06BB  00B6               	movwf	Set_PWM@duty
  1481  06BC  3001               	movlw	1
  1482  06BD  21DD               	fcall	_Set_PWM
  1483                           
  1484                           ;SC8F072_Pwm_Demo.c: 364: Set_PWM(2, duty_steps[5]);
  1485  06BE  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1486  06BF  0084               	movwf	4
  1487  06C0  200D               	fcall	stringdir
  1488  06C1  1283               	bcf	3,5	;RP0=0, select bank0
  1489  06C2  00B6               	movwf	Set_PWM@duty
  1490  06C3  3002               	movlw	2
  1491  06C4  21DD               	fcall	_Set_PWM
  1492                           
  1493                           ;SC8F072_Pwm_Demo.c: 365: Set_PWM(4, duty_steps[5]);
  1494  06C5  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1495  06C6  0084               	movwf	4
  1496  06C7  200D               	fcall	stringdir
  1497  06C8  1283               	bcf	3,5	;RP0=0, select bank0
  1498  06C9  00B6               	movwf	Set_PWM@duty
  1499  06CA  3004               	movlw	4
  1500  06CB  21DD               	fcall	_Set_PWM
  1501                           
  1502                           ;SC8F072_Pwm_Demo.c: 366: pwm_duty =0;
  1503  06CC  1283               	bcf	3,5	;RP0=0, select bank0
  1504  06CD  01DF               	clrf	_pwm_duty	;volatile
  1505                           
  1506                           ;SC8F072_Pwm_Demo.c: 367: TRISA = 0B00111111;
  1507  06CE  303F               	movlw	63
  1508  06CF  1683               	bsf	3,5	;RP0=1, select bank1
  1509  06D0  0085               	movwf	5	;volatile
  1510                           
  1511                           ;SC8F072_Pwm_Demo.c: 368: T_flag=0;
  1512  06D1  1283               	bcf	3,5	;RP0=0, select bank0
  1513  06D2  01DB               	clrf	_T_flag	;volatile
  1514                           
  1515                           ;SC8F072_Pwm_Demo.c: 369: Set_AllPin_INPUT();
  1516  06D3  2033               	fcall	_Set_AllPin_INPUT
  1517  06D4  0064               	clrwdt	;# 
  1518  06D5                     stop:	
  1519                           
  1520                           ;# 
  1521  06D5  0000               	nop	;# 
  1522  06D6  0000               	nop	;# 
  1523  06D7  0008               	return
  1524  06D8                     __end_of_Button_response:	
  1525  06D8                     PL8:	
  1526  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  1527  06D9  085F               	movf	_pwm_duty,w
  1528  06DA  3E01               	addlw	low ((_duty_steps-__stringbase)| (0+32768))
  1529  06DB  0084               	movwf	4
  1530  06DC  0008               	return
  1531  06DD                     __end_ofPL8:	
  1532                           
  1533                           	psect	swtext1
  1534  0019                     __pswtext1:	
  1535  0019                     S4085:	
  1536  0019  2E0B               	ljmp	l3391
  1537  001A  2E26               	ljmp	l3393
  1538  001B  2E3F               	ljmp	l3395
  1539  001C  2E58               	ljmp	l3397
  1540  001D  2E6E               	ljmp	l3399
  1541                           
  1542                           	psect	text5
  1543  0248                     __ptext5:	
  1544 ;; *************** function ___awmod *****************
  1545 ;; Defined at:
  1546 ;;		line 6 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\awmod.c"
  1547 ;; Parameters:    Size  Location     Type
  1548 ;;  divisor         2    8[BANK0 ] int 
  1549 ;;  dividend        2   10[BANK0 ] int 
  1550 ;; Auto vars:     Size  Location     Type
  1551 ;;  sign            1   13[BANK0 ] unsigned char 
  1552 ;;  counter         1   12[BANK0 ] unsigned char 
  1553 ;; Return value:  Size  Location     Type
  1554 ;;                  2    8[BANK0 ] int 
  1555 ;; Registers used:
  1556 ;;		wreg, status,2, status,0
  1557 ;; Tracked objects:
  1558 ;;		On entry : 100/0
  1559 ;;		On exit  : 100/0
  1560 ;;		Unchanged: 0/0
  1561 ;; Data sizes:     COMMON   BANK0   BANK1
  1562 ;;      Params:         0       4       0
  1563 ;;      Locals:         0       2       0
  1564 ;;      Temps:          0       0       0
  1565 ;;      Totals:         0       6       0
  1566 ;;Total ram usage:        6 bytes
  1567 ;; Hardware stack levels used:    1
  1568 ;; Hardware stack levels required when called:    3
  1569 ;; This function calls:
  1570 ;;		Nothing
  1571 ;; This function is called by:
  1572 ;;		_Button_response
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576                           
  1577                           ;psect for function ___awmod
  1578  0248                     ___awmod:	
  1579                           
  1580                           ;incstack = 0
  1581                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1582  0248  01AD               	clrf	___awmod@sign
  1583  0249  1FAB               	btfss	___awmod@dividend+1,7
  1584  024A  2A52               	goto	l3025
  1585  024B  09AA               	comf	___awmod@dividend,f
  1586  024C  09AB               	comf	___awmod@dividend+1,f
  1587  024D  0AAA               	incf	___awmod@dividend,f
  1588  024E  1903               	skipnz
  1589  024F  0AAB               	incf	___awmod@dividend+1,f
  1590  0250  01AD               	clrf	___awmod@sign
  1591  0251  0AAD               	incf	___awmod@sign,f
  1592  0252                     l3025:	
  1593  0252  1FA9               	btfss	___awmod@divisor+1,7
  1594  0253  2A59               	goto	l3029
  1595  0254  09A8               	comf	___awmod@divisor,f
  1596  0255  09A9               	comf	___awmod@divisor+1,f
  1597  0256  0AA8               	incf	___awmod@divisor,f
  1598  0257  1903               	skipnz
  1599  0258  0AA9               	incf	___awmod@divisor+1,f
  1600  0259                     l3029:	
  1601  0259  0828               	movf	___awmod@divisor,w
  1602  025A  0429               	iorwf	___awmod@divisor+1,w
  1603  025B  1903               	btfsc	3,2
  1604  025C  2A78               	goto	l3045
  1605  025D  01AC               	clrf	___awmod@counter
  1606  025E                     L1:	
  1607  025E  0AAC               	incf	___awmod@counter,f
  1608  025F  1BA9               	btfsc	___awmod@divisor+1,7
  1609  0260  2A65               	goto	l3037
  1610  0261  1003               	clrc
  1611  0262  0DA8               	rlf	___awmod@divisor,f
  1612  0263  0DA9               	rlf	___awmod@divisor+1,f
  1613  0264  2A5E               	goto	L1
  1614  0265                     l3037:	
  1615  0265  0829               	movf	___awmod@divisor+1,w
  1616  0266  022B               	subwf	___awmod@dividend+1,w
  1617  0267  1D03               	skipz
  1618  0268  2A6B               	goto	u1865
  1619  0269  0828               	movf	___awmod@divisor,w
  1620  026A  022A               	subwf	___awmod@dividend,w
  1621  026B                     u1865:	
  1622  026B  1C03               	skipc
  1623  026C  2A74               	goto	L2
  1624  026D  0828               	movf	___awmod@divisor,w
  1625  026E  02AA               	subwf	___awmod@dividend,f
  1626  026F  0829               	movf	___awmod@divisor+1,w
  1627  0270  1C03               	skipc
  1628  0271  03AB               	decf	___awmod@dividend+1,f
  1629  0272  02AB               	subwf	___awmod@dividend+1,f
  1630  0273  1003               	clrc
  1631  0274                     L2:	
  1632  0274  0CA9               	rrf	___awmod@divisor+1,f
  1633  0275  0CA8               	rrf	___awmod@divisor,f
  1634  0276  0BAC               	decfsz	___awmod@counter,f
  1635  0277  2A65               	goto	l3037
  1636  0278                     l3045:	
  1637  0278  082D               	movf	___awmod@sign,w
  1638  0279  1903               	btfsc	3,2
  1639  027A  2A80               	goto	l3049
  1640  027B  09AA               	comf	___awmod@dividend,f
  1641  027C  09AB               	comf	___awmod@dividend+1,f
  1642  027D  0AAA               	incf	___awmod@dividend,f
  1643  027E  1903               	skipnz
  1644  027F  0AAB               	incf	___awmod@dividend+1,f
  1645  0280                     l3049:	
  1646  0280  082B               	movf	___awmod@dividend+1,w
  1647  0281  00A9               	movwf	?___awmod+1
  1648  0282  082A               	movf	___awmod@dividend,w
  1649  0283  00A8               	movwf	?___awmod
  1650  0284  0008               	return
  1651  0285                     __end_of___awmod:	
  1652                           
  1653                           	psect	text6
  1654  01DD                     __ptext6:	
  1655 ;; *************** function _Set_PWM *****************
  1656 ;; Defined at:
  1657 ;;		line 183 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SC8F072_double_key\SC8F072_Pwm_Demo.c"
  1658 ;; Parameters:    Size  Location     Type
  1659 ;;  channel         1    wreg     unsigned char 
  1660 ;;  duty            1   22[BANK0 ] unsigned char 
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;  channel         1   23[BANK0 ] unsigned char 
  1663 ;;  pulse_width     2   24[BANK0 ] unsigned short 
  1664 ;; Return value:  Size  Location     Type
  1665 ;;                  1    wreg      void 
  1666 ;; Registers used:
  1667 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1668 ;; Tracked objects:
  1669 ;;		On entry : 100/0
  1670 ;;		On exit  : 0/0
  1671 ;;		Unchanged: 0/0
  1672 ;; Data sizes:     COMMON   BANK0   BANK1
  1673 ;;      Params:         0       1       0
  1674 ;;      Locals:         0       3       0
  1675 ;;      Temps:          0       0       0
  1676 ;;      Totals:         0       4       0
  1677 ;;Total ram usage:        4 bytes
  1678 ;; Hardware stack levels used:    1
  1679 ;; Hardware stack levels required when called:    4
  1680 ;; This function calls:
  1681 ;;		___awdiv
  1682 ;;		___wmul
  1683 ;; This function is called by:
  1684 ;;		_Button_response
  1685 ;; This function uses a non-reentrant model
  1686 ;;
  1687                           
  1688                           
  1689                           ;psect for function _Set_PWM
  1690  01DD                     _Set_PWM:	
  1691                           
  1692                           ;incstack = 0
  1693                           ; Regs used in _Set_PWM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1694                           ;Set_PWM@channel stored from wreg
  1695  01DD  00B7               	movwf	Set_PWM@channel
  1696                           
  1697                           ;SC8F072_Pwm_Demo.c: 185: unsigned short pulse_width = (duty * 255) / 100;
  1698  01DE  3064               	movlw	100
  1699  01DF  00AE               	movwf	___awdiv@divisor
  1700  01E0  01AF               	clrf	___awdiv@divisor+1
  1701  01E1  0836               	movf	Set_PWM@duty,w
  1702  01E2  00A8               	movwf	___wmul@multiplier
  1703  01E3  30FF               	movlw	255
  1704  01E4  01A9               	clrf	___wmul@multiplier+1
  1705  01E5  00AA               	movwf	___wmul@multiplicand
  1706  01E6  01AB               	clrf	___wmul@multiplicand+1
  1707  01E7  20AF               	fcall	___wmul
  1708  01E8  0829               	movf	?___wmul+1,w
  1709  01E9  00B1               	movwf	___awdiv@dividend+1
  1710  01EA  0828               	movf	?___wmul,w
  1711  01EB  00B0               	movwf	___awdiv@dividend
  1712  01EC  230B               	fcall	___awdiv
  1713  01ED  082F               	movf	?___awdiv+1,w
  1714  01EE  00B9               	movwf	Set_PWM@pulse_width+1
  1715  01EF  082E               	movf	?___awdiv,w
  1716  01F0  00B8               	movwf	Set_PWM@pulse_width
  1717                           
  1718                           ;SC8F072_Pwm_Demo.c: 186: switch (channel)
  1719  01F1  2A03               	goto	l2851
  1720  01F2                     l2839:	
  1721                           
  1722                           ;SC8F072_Pwm_Demo.c: 189: PWMD0L = pulse_width & 0xFF;
  1723  01F2  0838               	movf	Set_PWM@pulse_width,w
  1724  01F3  0099               	movwf	25	;volatile
  1725                           
  1726                           ;SC8F072_Pwm_Demo.c: 191: break;
  1727  01F4  0008               	return
  1728  01F5                     l2841:	
  1729                           
  1730                           ;SC8F072_Pwm_Demo.c: 193: PWMD1L = pulse_width & 0xFF;
  1731  01F5  0838               	movf	Set_PWM@pulse_width,w
  1732  01F6  009A               	movwf	26	;volatile
  1733                           
  1734                           ;SC8F072_Pwm_Demo.c: 195: break;
  1735  01F7  0008               	return
  1736  01F8                     l2843:	
  1737                           
  1738                           ;SC8F072_Pwm_Demo.c: 197: PWMD2L = pulse_width & 0xFF;
  1739  01F8  0838               	movf	Set_PWM@pulse_width,w
  1740  01F9  1683               	bsf	3,5	;RP0=1, select bank1
  1741  01FA  009B               	movwf	27	;volatile
  1742                           
  1743                           ;SC8F072_Pwm_Demo.c: 199: break;
  1744  01FB  0008               	return
  1745  01FC                     l2845:	
  1746                           
  1747                           ;SC8F072_Pwm_Demo.c: 201: PWMD3L = pulse_width & 0xFF;
  1748  01FC  0838               	movf	Set_PWM@pulse_width,w
  1749  01FD  1683               	bsf	3,5	;RP0=1, select bank1
  1750  01FE  009C               	movwf	28	;volatile
  1751                           
  1752                           ;SC8F072_Pwm_Demo.c: 203: break;
  1753  01FF  0008               	return
  1754  0200                     l2847:	
  1755                           
  1756                           ;SC8F072_Pwm_Demo.c: 205: PWMD4L = pulse_width & 0xFF;
  1757  0200  0838               	movf	Set_PWM@pulse_width,w
  1758  0201  009B               	movwf	27	;volatile
  1759                           
  1760                           ;SC8F072_Pwm_Demo.c: 207: break;
  1761  0202  0008               	return
  1762  0203                     l2851:	
  1763  0203  0837               	movf	Set_PWM@channel,w
  1764                           
  1765                           ; Switch size 1, requested type "space"
  1766                           ; Number of cases is 5, Range of values is 0 to 4
  1767                           ; switch strategies available:
  1768                           ; Name         Instructions Cycles
  1769                           ; direct_byte           11     6 (fixed)
  1770                           ; simple_byte           16     9 (average)
  1771                           ; jumptable            260     6 (fixed)
  1772                           ;	Chosen strategy is direct_byte
  1773  0204  0084               	movwf	4
  1774  0205  3005               	movlw	5
  1775  0206  0204               	subwf	4,w
  1776  0207  1803               	skipnc
  1777  0208  0008               	return
  1778  0209  3000               	movlw	high S4087
  1779  020A  008A               	movwf	10
  1780  020B  301E               	movlw	low S4087
  1781  020C  0704               	addwf	4,w
  1782  020D  0082               	movwf	2
  1783  020E  0008               	return
  1784  020F                     __end_of_Set_PWM:	
  1785                           
  1786                           	psect	swtext2
  1787  001E                     __pswtext2:	
  1788  001E                     S4087:	
  1789  001E  29F2               	ljmp	l2839
  1790  001F  29F5               	ljmp	l2841
  1791  0020  29F8               	ljmp	l2843
  1792  0021  29FC               	ljmp	l2845
  1793  0022  2A00               	ljmp	l2847
  1794                           
  1795                           	psect	text7
  1796  00AF                     __ptext7:	
  1797 ;; *************** function ___wmul *****************
  1798 ;; Defined at:
  1799 ;;		line 15 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\Umul16.c"
  1800 ;; Parameters:    Size  Location     Type
  1801 ;;  multiplier      2    8[BANK0 ] unsigned int 
  1802 ;;  multiplicand    2   10[BANK0 ] unsigned int 
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;  product         2   12[BANK0 ] unsigned int 
  1805 ;; Return value:  Size  Location     Type
  1806 ;;                  2    8[BANK0 ] unsigned int 
  1807 ;; Registers used:
  1808 ;;		wreg, status,2, status,0
  1809 ;; Tracked objects:
  1810 ;;		On entry : 100/0
  1811 ;;		On exit  : 100/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMMON   BANK0   BANK1
  1814 ;;      Params:         0       4       0
  1815 ;;      Locals:         0       2       0
  1816 ;;      Temps:          0       0       0
  1817 ;;      Totals:         0       6       0
  1818 ;;Total ram usage:        6 bytes
  1819 ;; Hardware stack levels used:    1
  1820 ;; Hardware stack levels required when called:    3
  1821 ;; This function calls:
  1822 ;;		Nothing
  1823 ;; This function is called by:
  1824 ;;		_Set_PWM
  1825 ;; This function uses a non-reentrant model
  1826 ;;
  1827                           
  1828                           
  1829                           ;psect for function ___wmul
  1830  00AF                     ___wmul:	
  1831                           
  1832                           ;incstack = 0
  1833                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1834  00AF  01AC               	clrf	___wmul@product
  1835  00B0  01AD               	clrf	___wmul@product+1
  1836  00B1                     l2755:	
  1837  00B1  1C28               	btfss	___wmul@multiplier,0
  1838  00B2  28B9               	goto	l2759
  1839  00B3  082A               	movf	___wmul@multiplicand,w
  1840  00B4  07AC               	addwf	___wmul@product,f
  1841  00B5  1803               	skipnc
  1842  00B6  0AAD               	incf	___wmul@product+1,f
  1843  00B7  082B               	movf	___wmul@multiplicand+1,w
  1844  00B8  07AD               	addwf	___wmul@product+1,f
  1845  00B9                     l2759:	
  1846  00B9  1003               	clrc
  1847  00BA  0DAA               	rlf	___wmul@multiplicand,f
  1848  00BB  0DAB               	rlf	___wmul@multiplicand+1,f
  1849  00BC  1003               	clrc
  1850  00BD  0CA9               	rrf	___wmul@multiplier+1,f
  1851  00BE  0CA8               	rrf	___wmul@multiplier,f
  1852  00BF  0828               	movf	___wmul@multiplier,w
  1853  00C0  0429               	iorwf	___wmul@multiplier+1,w
  1854  00C1  1D03               	btfss	3,2
  1855  00C2  28B1               	goto	l2755
  1856  00C3  082D               	movf	___wmul@product+1,w
  1857  00C4  00A9               	movwf	?___wmul+1
  1858  00C5  082C               	movf	___wmul@product,w
  1859  00C6  00A8               	movwf	?___wmul
  1860  00C7  0008               	return
  1861  00C8                     __end_of___wmul:	
  1862                           
  1863                           	psect	text8
  1864  030B                     __ptext8:	
  1865 ;; *************** function ___awdiv *****************
  1866 ;; Defined at:
  1867 ;;		line 6 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\awdiv.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;  divisor         2   14[BANK0 ] int 
  1870 ;;  dividend        2   16[BANK0 ] int 
  1871 ;; Auto vars:     Size  Location     Type
  1872 ;;  quotient        2   20[BANK0 ] int 
  1873 ;;  sign            1   19[BANK0 ] unsigned char 
  1874 ;;  counter         1   18[BANK0 ] unsigned char 
  1875 ;; Return value:  Size  Location     Type
  1876 ;;                  2   14[BANK0 ] int 
  1877 ;; Registers used:
  1878 ;;		wreg, status,2, status,0
  1879 ;; Tracked objects:
  1880 ;;		On entry : 100/0
  1881 ;;		On exit  : 100/0
  1882 ;;		Unchanged: 0/0
  1883 ;; Data sizes:     COMMON   BANK0   BANK1
  1884 ;;      Params:         0       4       0
  1885 ;;      Locals:         0       4       0
  1886 ;;      Temps:          0       0       0
  1887 ;;      Totals:         0       8       0
  1888 ;;Total ram usage:        8 bytes
  1889 ;; Hardware stack levels used:    1
  1890 ;; Hardware stack levels required when called:    3
  1891 ;; This function calls:
  1892 ;;		Nothing
  1893 ;; This function is called by:
  1894 ;;		_Set_PWM
  1895 ;; This function uses a non-reentrant model
  1896 ;;
  1897                           
  1898                           
  1899                           ;psect for function ___awdiv
  1900  030B                     ___awdiv:	
  1901                           
  1902                           ;incstack = 0
  1903                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1904  030B  01B3               	clrf	___awdiv@sign
  1905  030C  1FAF               	btfss	___awdiv@divisor+1,7
  1906  030D  2B15               	goto	l2801
  1907  030E  09AE               	comf	___awdiv@divisor,f
  1908  030F  09AF               	comf	___awdiv@divisor+1,f
  1909  0310  0AAE               	incf	___awdiv@divisor,f
  1910  0311  1903               	skipnz
  1911  0312  0AAF               	incf	___awdiv@divisor+1,f
  1912  0313  01B3               	clrf	___awdiv@sign
  1913  0314  0AB3               	incf	___awdiv@sign,f
  1914  0315                     l2801:	
  1915  0315  1FB1               	btfss	___awdiv@dividend+1,7
  1916  0316  2B1E               	goto	l2807
  1917  0317  09B0               	comf	___awdiv@dividend,f
  1918  0318  09B1               	comf	___awdiv@dividend+1,f
  1919  0319  0AB0               	incf	___awdiv@dividend,f
  1920  031A  1903               	skipnz
  1921  031B  0AB1               	incf	___awdiv@dividend+1,f
  1922  031C  3001               	movlw	1
  1923  031D  06B3               	xorwf	___awdiv@sign,f
  1924  031E                     l2807:	
  1925  031E  01B4               	clrf	___awdiv@quotient
  1926  031F  01B5               	clrf	___awdiv@quotient+1
  1927  0320  082E               	movf	___awdiv@divisor,w
  1928  0321  042F               	iorwf	___awdiv@divisor+1,w
  1929  0322  1903               	btfsc	3,2
  1930  0323  2B43               	goto	l2829
  1931  0324  01B2               	clrf	___awdiv@counter
  1932  0325                     L3:	
  1933  0325  0AB2               	incf	___awdiv@counter,f
  1934  0326  1BAF               	btfsc	___awdiv@divisor+1,7
  1935  0327  2B2C               	goto	l2817
  1936  0328  1003               	clrc
  1937  0329  0DAE               	rlf	___awdiv@divisor,f
  1938  032A  0DAF               	rlf	___awdiv@divisor+1,f
  1939  032B  2B25               	goto	L3
  1940  032C                     l2817:	
  1941  032C  1003               	clrc
  1942  032D  0DB4               	rlf	___awdiv@quotient,f
  1943  032E  0DB5               	rlf	___awdiv@quotient+1,f
  1944  032F  082F               	movf	___awdiv@divisor+1,w
  1945  0330  0231               	subwf	___awdiv@dividend+1,w
  1946  0331  1D03               	skipz
  1947  0332  2B35               	goto	u1465
  1948  0333  082E               	movf	___awdiv@divisor,w
  1949  0334  0230               	subwf	___awdiv@dividend,w
  1950  0335                     u1465:	
  1951  0335  1C03               	skipc
  1952  0336  2B3F               	goto	L4
  1953  0337  082E               	movf	___awdiv@divisor,w
  1954  0338  02B0               	subwf	___awdiv@dividend,f
  1955  0339  082F               	movf	___awdiv@divisor+1,w
  1956  033A  1C03               	skipc
  1957  033B  03B1               	decf	___awdiv@dividend+1,f
  1958  033C  02B1               	subwf	___awdiv@dividend+1,f
  1959  033D  1434               	bsf	___awdiv@quotient,0
  1960  033E  1003               	clrc
  1961  033F                     L4:	
  1962  033F  0CAF               	rrf	___awdiv@divisor+1,f
  1963  0340  0CAE               	rrf	___awdiv@divisor,f
  1964  0341  0BB2               	decfsz	___awdiv@counter,f
  1965  0342  2B2C               	goto	l2817
  1966  0343                     l2829:	
  1967  0343  0833               	movf	___awdiv@sign,w
  1968  0344  1903               	btfsc	3,2
  1969  0345  2B4B               	goto	l2833
  1970  0346  09B4               	comf	___awdiv@quotient,f
  1971  0347  09B5               	comf	___awdiv@quotient+1,f
  1972  0348  0AB4               	incf	___awdiv@quotient,f
  1973  0349  1903               	skipnz
  1974  034A  0AB5               	incf	___awdiv@quotient+1,f
  1975  034B                     l2833:	
  1976  034B  0835               	movf	___awdiv@quotient+1,w
  1977  034C  00AF               	movwf	?___awdiv+1
  1978  034D  0834               	movf	___awdiv@quotient,w
  1979  034E  00AE               	movwf	?___awdiv
  1980  034F  0008               	return
  1981  0350                     __end_of___awdiv:	
  1982                           
  1983                           	psect	text9
  1984  0033                     __ptext9:	
  1985 ;; *************** function _Set_AllPin_INPUT *****************
  1986 ;; Defined at:
  1987 ;;		line 85 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SC8F072_double_key\LED_188.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;		None
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;		None
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      void 
  1994 ;; Registers used:
  1995 ;;		None
  1996 ;; Tracked objects:
  1997 ;;		On entry : 100/0
  1998 ;;		On exit  : 100/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMMON   BANK0   BANK1
  2001 ;;      Params:         0       0       0
  2002 ;;      Locals:         0       0       0
  2003 ;;      Temps:          0       0       0
  2004 ;;      Totals:         0       0       0
  2005 ;;Total ram usage:        0 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; Hardware stack levels required when called:    3
  2008 ;; This function calls:
  2009 ;;		Nothing
  2010 ;; This function is called by:
  2011 ;;		_Button_response
  2012 ;; This function uses a non-reentrant model
  2013 ;;
  2014                           
  2015                           
  2016                           ;psect for function _Set_AllPin_INPUT
  2017  0033                     _Set_AllPin_INPUT:	
  2018                           
  2019                           ;LED_188.c: 87: TRISB0 = 1;;
  2020                           
  2021                           ;incstack = 0
  2022                           ; Regs used in _Set_AllPin_INPUT: []
  2023                           
  2024                           ;LED_188.c: 88: TRISB1 = 1;;
  2025                           
  2026                           ;LED_188.c: 89: TRISB2 = 1;;
  2027                           
  2028                           ;LED_188.c: 90: TRISB3 = 1;;
  2029                           
  2030                           ;LED_188.c: 91: TRISB4 = 1;;
  2031  0033  2834               	ljmp	PL4	;call to abstracted procedure
  2032  0034                     __end_of_Set_AllPin_INPUT:	
  2033  0034                     PL4:	
  2034  0034  1405               	bsf	5,0	;volatile
  2035  0035  1485               	bsf	5,1	;volatile
  2036  0036  1505               	bsf	5,2	;volatile
  2037  0037  1585               	bsf	5,3	;volatile
  2038  0038  1605               	bsf	5,4	;volatile
  2039  0039  0008               	return
  2040  003A                     __end_ofPL4:	
  2041                           
  2042                           	psect	text10
  2043  002C                     __ptext10:	
  2044 ;; *************** function _Motor_num *****************
  2045 ;; Defined at:
  2046 ;;		line 39 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SC8F072_double_key\LED_188.c"
  2047 ;; Parameters:    Size  Location     Type
  2048 ;;		None
  2049 ;; Auto vars:     Size  Location     Type
  2050 ;;		None
  2051 ;; Return value:  Size  Location     Type
  2052 ;;                  1    wreg      void 
  2053 ;; Registers used:
  2054 ;;		wreg, status,2, status,0
  2055 ;; Tracked objects:
  2056 ;;		On entry : 0/0
  2057 ;;		On exit  : 100/0
  2058 ;;		Unchanged: 0/0
  2059 ;; Data sizes:     COMMON   BANK0   BANK1
  2060 ;;      Params:         0       0       0
  2061 ;;      Locals:         0       0       0
  2062 ;;      Temps:          0       0       0
  2063 ;;      Totals:         0       0       0
  2064 ;;Total ram usage:        0 bytes
  2065 ;; Hardware stack levels used:    1
  2066 ;; Hardware stack levels required when called:    3
  2067 ;; This function calls:
  2068 ;;		Nothing
  2069 ;; This function is called by:
  2070 ;;		_Button_response
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074                           
  2075                           ;psect for function _Motor_num
  2076  002C                     _Motor_num:	
  2077                           
  2078                           ;LED_188.c: 41: hundreds =0;
  2079                           
  2080                           ;incstack = 0
  2081                           ; Regs used in _Motor_num: [wreg+status,2+status,0]
  2082  002C  1283               	bcf	3,5	;RP0=0, select bank0
  2083  002D  01E5               	clrf	_hundreds	;volatile
  2084                           
  2085                           ;LED_188.c: 42: tens = 0;
  2086  002E  01E4               	clrf	_tens	;volatile
  2087                           
  2088                           ;LED_188.c: 43: unit = (unsigned char)(pwm_duty+1) ;
  2089  002F  085F               	movf	_pwm_duty,w	;volatile
  2090  0030  3E01               	addlw	1
  2091  0031  00E3               	movwf	_unit	;volatile
  2092  0032  0008               	return
  2093  0033                     __end_of_Motor_num:	
  2094                           
  2095                           	psect	text11
  2096  03B6                     __ptext11:	
  2097 ;; *************** function _ADC_read *****************
  2098 ;; Defined at:
  2099 ;;		line 291 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SC8F072_double_key\SC8F072_Pwm_Demo.c"
  2100 ;; Parameters:    Size  Location     Type
  2101 ;;		None
  2102 ;; Auto vars:     Size  Location     Type
  2103 ;;  power_temp      4    6[BANK1 ] volatile unsigned long 
  2104 ;; Return value:  Size  Location     Type
  2105 ;;                  1    wreg      void 
  2106 ;; Registers used:
  2107 ;;		wreg, status,2, status,0, pclath, cstack
  2108 ;; Tracked objects:
  2109 ;;		On entry : 100/0
  2110 ;;		On exit  : 100/0
  2111 ;;		Unchanged: 0/0
  2112 ;; Data sizes:     COMMON   BANK0   BANK1
  2113 ;;      Params:         0       0       0
  2114 ;;      Locals:         0       0       4
  2115 ;;      Temps:          0       1       0
  2116 ;;      Totals:         0       1       4
  2117 ;;Total ram usage:        5 bytes
  2118 ;; Hardware stack levels used:    1
  2119 ;; Hardware stack levels required when called:    5
  2120 ;; This function calls:
  2121 ;;		_ADC_Sample
  2122 ;;		___ftadd
  2123 ;;		___ftdiv
  2124 ;;		___fttol
  2125 ;;		___lwtoft
  2126 ;; This function is called by:
  2127 ;;		_main
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131                           
  2132                           ;psect for function _ADC_read
  2133  03B6                     _ADC_read:	
  2134                           
  2135                           ;incstack = 0
  2136                           ; Regs used in _ADC_read: [wreg+status,2+status,0+pclath+cstack]
  2137  03B6  301F               	movlw	31
  2138                           
  2139                           ;SC8F072_Pwm_Demo.c: 293: test_adc = ADC_Sample(31, 0);
  2140  03B7  01A8               	clrf	ADC_Sample@adldo
  2141  03B8  26DD               	fcall	_ADC_Sample
  2142  03B9  00E2               	movwf	_test_adc	;volatile
  2143                           
  2144                           ;SC8F072_Pwm_Demo.c: 295: if (0xA5 == test_adc)
  2145  03BA  30A5               	movlw	165
  2146  03BB  0662               	xorwf	_test_adc,w	;volatile
  2147  03BC  1D03               	btfss	3,2
  2148  03BD  2C0D               	goto	l3977
  2149                           
  2150                           ;SC8F072_Pwm_Demo.c: 296: {
  2151                           ;SC8F072_Pwm_Demo.c: 297: volatile unsigned long power_temp;
  2152                           ;SC8F072_Pwm_Demo.c: 298: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
  2153  03BE  3096               	movlw	150
  2154  03BF  01C2               	clrf	___ftdiv@f1
  2155  03C0  00C3               	movwf	___ftdiv@f1+1
  2156  03C1  304A               	movlw	74
  2157  03C2  00C4               	movwf	___ftdiv@f1+2
  2158  03C3  1683               	bsf	3,5	;RP0=1, select bank1
  2159  03C4  0843               	movf	(_adresult+1)^(0+128),w	;volatile
  2160  03C5  1283               	bcf	3,5	;RP0=0, select bank0
  2161  03C6  00B1               	movwf	___lwtoft@c+1
  2162  03C7  1683               	bsf	3,5	;RP0=1, select bank1
  2163  03C8  0842               	movf	_adresult^(0+128),w	;volatile
  2164  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  2165  03CA  00B0               	movwf	___lwtoft@c
  2166  03CB  205E               	fcall	___lwtoft
  2167  03CC  0830               	movf	?___lwtoft,w
  2168  03CD  00BF               	movwf	___ftdiv@f2
  2169  03CE  0831               	movf	?___lwtoft+1,w
  2170  03CF  00C0               	movwf	___ftdiv@f2+1
  2171  03D0  0832               	movf	?___lwtoft+2,w
  2172  03D1  00C1               	movwf	___ftdiv@f2+2
  2173  03D2  2350               	fcall	___ftdiv
  2174  03D3  2419               	fcall	PL10	;call to abstracted procedure
  2175  03D4  2420               	fcall	___fttol
  2176  03D5  0851               	movf	?___fttol+3,w
  2177  03D6  1683               	bsf	3,5	;RP0=1, select bank1
  2178  03D7  00BA               	movwf	(ADC_read@power_temp+3)^(0+128)	;volatile
  2179  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  2180  03D9  0850               	movf	?___fttol+2,w
  2181  03DA  1683               	bsf	3,5	;RP0=1, select bank1
  2182  03DB  00B9               	movwf	(ADC_read@power_temp+2)^(0+128)	;volatile
  2183  03DC  1283               	bcf	3,5	;RP0=0, select bank0
  2184  03DD  084F               	movf	?___fttol+1,w
  2185  03DE  1683               	bsf	3,5	;RP0=1, select bank1
  2186  03DF  00B8               	movwf	(ADC_read@power_temp+1)^(0+128)	;volatile
  2187  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  2188  03E1  084E               	movf	?___fttol,w
  2189  03E2  1683               	bsf	3,5	;RP0=1, select bank1
  2190  03E3  00B7               	movwf	ADC_read@power_temp^(0+128)	;volatile
  2191                           
  2192                           ;SC8F072_Pwm_Demo.c: 299: power_ad = (unsigned int)(power_temp);
  2193  03E4  0838               	movf	(ADC_read@power_temp+1)^(0+128),w	;volatile
  2194  03E5  00C0               	movwf	(_power_ad+1)^(0+128)	;volatile
  2195  03E6  0837               	movf	ADC_read@power_temp^(0+128),w	;volatile
  2196  03E7  00BF               	movwf	_power_ad^(0+128)	;volatile
  2197                           
  2198                           ;SC8F072_Pwm_Demo.c: 300: power_percent = (unsigned char)((power_ad-(1000UL*2.8))/(10UL*
      +                          1.4));
  2199  03E8  0840               	movf	(_power_ad+1)^(0+128),w	;volatile
  2200  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  2201  03EA  00B1               	movwf	___lwtoft@c+1
  2202  03EB  1683               	bsf	3,5	;RP0=1, select bank1
  2203  03EC  083F               	movf	_power_ad^(0+128),w	;volatile
  2204  03ED  1283               	bcf	3,5	;RP0=0, select bank0
  2205  03EE  00B0               	movwf	___lwtoft@c
  2206  03EF  205E               	fcall	___lwtoft
  2207  03F0  0830               	movf	?___lwtoft,w
  2208  03F1  00B6               	movwf	___ftadd@f2
  2209  03F2  0831               	movf	?___lwtoft+1,w
  2210  03F3  00B7               	movwf	___ftadd@f2+1
  2211  03F4  0832               	movf	?___lwtoft+2,w
  2212  03F5  00B8               	movwf	___ftadd@f2+2
  2213  03F6  302F               	movlw	47
  2214  03F7  01B3               	clrf	___ftadd@f1
  2215  03F8  00B4               	movwf	___ftadd@f1+1
  2216  03F9  30C5               	movlw	197
  2217  03FA  00B5               	movwf	___ftadd@f1+2
  2218  03FB  253D               	fcall	___ftadd
  2219  03FC  0833               	movf	?___ftadd,w
  2220  03FD  00C2               	movwf	___ftdiv@f1
  2221  03FE  0834               	movf	?___ftadd+1,w
  2222  03FF  00C3               	movwf	___ftdiv@f1+1
  2223  0400  0835               	movf	?___ftadd+2,w
  2224  0401  00C4               	movwf	___ftdiv@f1+2
  2225  0402  3060               	movlw	96
  2226  0403  01BF               	clrf	___ftdiv@f2
  2227  0404  00C0               	movwf	___ftdiv@f2+1
  2228  0405  3041               	movlw	65
  2229  0406  00C1               	movwf	___ftdiv@f2+2
  2230  0407  2350               	fcall	___ftdiv
  2231  0408  2419               	fcall	PL10	;call to abstracted procedure
  2232  0409  2420               	fcall	___fttol
  2233  040A  084E               	movf	?___fttol,w
  2234  040B  00E1               	movwf	_power_percent	;volatile
  2235                           
  2236                           ;SC8F072_Pwm_Demo.c: 301: }
  2237  040C  2C16               	goto	l3981
  2238  040D                     l3977:	
  2239                           
  2240                           ;SC8F072_Pwm_Demo.c: 302: else
  2241                           ;SC8F072_Pwm_Demo.c: 303: {
  2242                           ;SC8F072_Pwm_Demo.c: 304: ADCON0 = 0;
  2243  040D  1683               	bsf	3,5	;RP0=1, select bank1
  2244  040E  0195               	clrf	21	;volatile
  2245                           
  2246                           ;SC8F072_Pwm_Demo.c: 305: ADCON1 = 0;
  2247  040F  0196               	clrf	22	;volatile
  2248                           
  2249                           ;SC8F072_Pwm_Demo.c: 306: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2250  0410  3084               	movlw	132
  2251  0411  1283               	bcf	3,5	;RP0=0, select bank0
  2252  0412  00D5               	movwf	??_ADC_read
  2253  0413                     u3217:	
  2254  0413  0BD5               	decfsz	??_ADC_read,f
  2255  0414  2C13               	goto	u3217
  2256  0415  2C16               	nop2
  2257  0416                     l3981:	
  2258                           
  2259                           ;SC8F072_Pwm_Demo.c: 307: }
  2260                           ;SC8F072_Pwm_Demo.c: 308: ADC_Flag=0;
  2261  0416  1283               	bcf	3,5	;RP0=0, select bank0
  2262  0417  01E0               	clrf	_ADC_Flag	;volatile
  2263  0418  0008               	return
  2264  0419                     __end_of_ADC_read:	
  2265  0419                     PL10:	
  2266  0419  083F               	movf	?___ftdiv,w
  2267  041A  00CE               	movwf	___fttol@f1
  2268  041B  0840               	movf	?___ftdiv+1,w
  2269  041C  00CF               	movwf	___fttol@f1+1
  2270  041D  0841               	movf	?___ftdiv+2,w
  2271  041E  00D0               	movwf	___fttol@f1+2
  2272  041F  0008               	return
  2273  0420                     __end_ofPL10:	
  2274                           
  2275                           	psect	text12
  2276  005E                     __ptext12:	
  2277 ;; *************** function ___lwtoft *****************
  2278 ;; Defined at:
  2279 ;;		line 28 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\lwtoft.c"
  2280 ;; Parameters:    Size  Location     Type
  2281 ;;  c               2   16[BANK0 ] unsigned int 
  2282 ;; Auto vars:     Size  Location     Type
  2283 ;;		None
  2284 ;; Return value:  Size  Location     Type
  2285 ;;                  3   16[BANK0 ] float 
  2286 ;; Registers used:
  2287 ;;		wreg, status,2, status,0, pclath, cstack
  2288 ;; Tracked objects:
  2289 ;;		On entry : 100/0
  2290 ;;		On exit  : 100/0
  2291 ;;		Unchanged: 0/0
  2292 ;; Data sizes:     COMMON   BANK0   BANK1
  2293 ;;      Params:         0       3       0
  2294 ;;      Locals:         0       0       0
  2295 ;;      Temps:          0       0       0
  2296 ;;      Totals:         0       3       0
  2297 ;;Total ram usage:        3 bytes
  2298 ;; Hardware stack levels used:    1
  2299 ;; Hardware stack levels required when called:    4
  2300 ;; This function calls:
  2301 ;;		___ftpack
  2302 ;; This function is called by:
  2303 ;;		_ADC_read
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307                           
  2308                           ;psect for function ___lwtoft
  2309  005E                     ___lwtoft:	
  2310                           
  2311                           ;incstack = 0
  2312                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  2313  005E  0830               	movf	___lwtoft@c,w
  2314  005F  00A8               	movwf	___ftpack@arg
  2315  0060  0831               	movf	___lwtoft@c+1,w
  2316  0061  00A9               	movwf	___ftpack@arg+1
  2317  0062  308E               	movlw	142
  2318  0063  01AA               	clrf	___ftpack@arg+2
  2319  0064  00AB               	movwf	___ftpack@exp
  2320  0065  01AC               	clrf	___ftpack@sign
  2321  0066  2285               	fcall	___ftpack
  2322  0067  0828               	movf	?___ftpack,w
  2323  0068  00B0               	movwf	?___lwtoft
  2324  0069  0829               	movf	?___ftpack+1,w
  2325  006A  00B1               	movwf	?___lwtoft+1
  2326  006B  082A               	movf	?___ftpack+2,w
  2327  006C  00B2               	movwf	?___lwtoft+2
  2328  006D  0008               	return
  2329  006E                     __end_of___lwtoft:	
  2330                           
  2331                           	psect	text13
  2332  0420                     __ptext13:	
  2333 ;; *************** function ___fttol *****************
  2334 ;; Defined at:
  2335 ;;		line 44 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\fttol.c"
  2336 ;; Parameters:    Size  Location     Type
  2337 ;;  f1              3   46[BANK0 ] float 
  2338 ;; Auto vars:     Size  Location     Type
  2339 ;;  lval            4    1[BANK1 ] unsigned long 
  2340 ;;  exp1            1    5[BANK1 ] unsigned char 
  2341 ;;  sign1           1    0[BANK1 ] unsigned char 
  2342 ;; Return value:  Size  Location     Type
  2343 ;;                  4   46[BANK0 ] long 
  2344 ;; Registers used:
  2345 ;;		wreg, status,2, status,0
  2346 ;; Tracked objects:
  2347 ;;		On entry : 100/0
  2348 ;;		On exit  : 100/0
  2349 ;;		Unchanged: 0/0
  2350 ;; Data sizes:     COMMON   BANK0   BANK1
  2351 ;;      Params:         0       4       0
  2352 ;;      Locals:         0       0       6
  2353 ;;      Temps:          0       3       0
  2354 ;;      Totals:         0       7       6
  2355 ;;Total ram usage:       13 bytes
  2356 ;; Hardware stack levels used:    1
  2357 ;; Hardware stack levels required when called:    3
  2358 ;; This function calls:
  2359 ;;		Nothing
  2360 ;; This function is called by:
  2361 ;;		_ADC_read
  2362 ;; This function uses a non-reentrant model
  2363 ;;
  2364                           
  2365                           
  2366                           ;psect for function ___fttol
  2367  0420                     ___fttol:	
  2368                           
  2369                           ;incstack = 0
  2370                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2371  0420  2488               	fcall	PL12	;call to abstracted procedure
  2372  0421  1003               	clrc
  2373  0422  0D53               	rlf	??___fttol+1,w
  2374  0423  0D54               	rlf	??___fttol+2,w
  2375  0424  1683               	bsf	3,5	;RP0=1, select bank1
  2376  0425  00B6               	movwf	___fttol@exp1^(0+128)
  2377  0426  0836               	movf	___fttol@exp1^(0+128),w
  2378  0427  1D03               	btfss	3,2
  2379  0428  2C2F               	goto	l3927
  2380  0429                     l3925:	
  2381  0429  1283               	bcf	3,5	;RP0=0, select bank0
  2382  042A  01CE               	clrf	?___fttol
  2383  042B  01CF               	clrf	?___fttol+1
  2384  042C  01D0               	clrf	?___fttol+2
  2385  042D  01D1               	clrf	?___fttol+3
  2386  042E  0008               	return
  2387  042F                     l3927:	
  2388  042F  1283               	bcf	3,5	;RP0=0, select bank0
  2389  0430  2488               	fcall	PL12	;call to abstracted procedure
  2390  0431  3017               	movlw	23
  2391  0432                     u3115:	
  2392  0432  1003               	clrc
  2393  0433  0CD4               	rrf	??___fttol+2,f
  2394  0434  0CD3               	rrf	??___fttol+1,f
  2395  0435  0CD2               	rrf	??___fttol,f
  2396  0436  3EFF               	addlw	-1
  2397  0437  1D03               	skipz
  2398  0438  2C32               	goto	u3115
  2399  0439  0852               	movf	??___fttol,w
  2400  043A  1683               	bsf	3,5	;RP0=1, select bank1
  2401  043B  00B1               	movwf	___fttol@sign1^(0+128)
  2402  043C  1283               	bcf	3,5	;RP0=0, select bank0
  2403  043D  17CF               	bsf	___fttol@f1+1,7
  2404  043E  01D0               	clrf	___fttol@f1+2
  2405  043F  084E               	movf	___fttol@f1,w
  2406  0440  1683               	bsf	3,5	;RP0=1, select bank1
  2407  0441  00B2               	movwf	___fttol@lval^(0+128)
  2408  0442  1283               	bcf	3,5	;RP0=0, select bank0
  2409  0443  084F               	movf	___fttol@f1+1,w
  2410  0444  1683               	bsf	3,5	;RP0=1, select bank1
  2411  0445  00B3               	movwf	(___fttol@lval^(0+128)+1)
  2412  0446  1283               	bcf	3,5	;RP0=0, select bank0
  2413  0447  0850               	movf	___fttol@f1+2,w
  2414  0448  1683               	bsf	3,5	;RP0=1, select bank1
  2415  0449  00B4               	movwf	(___fttol@lval^(0+128)+2)
  2416  044A  308E               	movlw	142
  2417  044B  01B5               	clrf	(___fttol@lval^(0+128)+3)
  2418  044C  02B6               	subwf	___fttol@exp1^(0+128),f
  2419  044D  1FB6               	btfss	___fttol@exp1^(0+128),7
  2420  044E  2C5C               	goto	l3947
  2421  044F  0836               	movf	___fttol@exp1^(0+128),w
  2422  0450  3A80               	xorlw	128
  2423  0451  3E8F               	addlw	143
  2424  0452  1C03               	btfss	3,0
  2425  0453  2C29               	goto	l3925
  2426  0454                     l3943:	
  2427  0454  1003               	clrc
  2428  0455  0CB5               	rrf	(___fttol@lval+3)^(0+128),f
  2429  0456  0CB4               	rrf	(___fttol@lval+2)^(0+128),f
  2430  0457  0CB3               	rrf	(___fttol@lval+1)^(0+128),f
  2431  0458  0CB2               	rrf	___fttol@lval^(0+128),f
  2432  0459  0FB6               	incfsz	___fttol@exp1^(0+128),f
  2433  045A  2C54               	goto	l3943
  2434  045B  2C6A               	goto	l3955
  2435  045C                     l3947:	
  2436  045C  3018               	movlw	24
  2437  045D  0236               	subwf	___fttol@exp1^(0+128),w
  2438  045E  1803               	btfsc	3,0
  2439  045F  2C29               	goto	l3925
  2440  0460                     l3953:	
  2441  0460  0836               	movf	___fttol@exp1^(0+128),w
  2442  0461  1903               	btfsc	3,2
  2443  0462  2C6A               	goto	l3955
  2444  0463  1003               	clrc
  2445  0464  0DB2               	rlf	___fttol@lval^(0+128),f
  2446  0465  0DB3               	rlf	(___fttol@lval+1)^(0+128),f
  2447  0466  0DB4               	rlf	(___fttol@lval+2)^(0+128),f
  2448  0467  0DB5               	rlf	(___fttol@lval+3)^(0+128),f
  2449  0468  03B6               	decf	___fttol@exp1^(0+128),f
  2450  0469  2C60               	goto	l3953
  2451  046A                     l3955:	
  2452  046A  0831               	movf	___fttol@sign1^(0+128),w
  2453  046B  1903               	btfsc	3,2
  2454  046C  2C78               	goto	l3959
  2455  046D  09B2               	comf	___fttol@lval^(0+128),f
  2456  046E  09B3               	comf	(___fttol@lval+1)^(0+128),f
  2457  046F  09B4               	comf	(___fttol@lval+2)^(0+128),f
  2458  0470  09B5               	comf	(___fttol@lval+3)^(0+128),f
  2459  0471  0AB2               	incf	___fttol@lval^(0+128),f
  2460  0472  1903               	skipnz
  2461  0473  0AB3               	incf	(___fttol@lval+1)^(0+128),f
  2462  0474  1903               	skipnz
  2463  0475  0AB4               	incf	(___fttol@lval+2)^(0+128),f
  2464  0476  1903               	skipnz
  2465  0477  0AB5               	incf	(___fttol@lval+3)^(0+128),f
  2466  0478                     l3959:	
  2467  0478  0835               	movf	(___fttol@lval+3)^(0+128),w
  2468  0479  1283               	bcf	3,5	;RP0=0, select bank0
  2469  047A  00D1               	movwf	?___fttol+3
  2470  047B  1683               	bsf	3,5	;RP0=1, select bank1
  2471  047C  0834               	movf	(___fttol@lval+2)^(0+128),w
  2472  047D  1283               	bcf	3,5	;RP0=0, select bank0
  2473  047E  00D0               	movwf	?___fttol+2
  2474  047F  1683               	bsf	3,5	;RP0=1, select bank1
  2475  0480  0833               	movf	(___fttol@lval+1)^(0+128),w
  2476  0481  1283               	bcf	3,5	;RP0=0, select bank0
  2477  0482  00CF               	movwf	?___fttol+1
  2478  0483  1683               	bsf	3,5	;RP0=1, select bank1
  2479  0484  0832               	movf	___fttol@lval^(0+128),w
  2480  0485  1283               	bcf	3,5	;RP0=0, select bank0
  2481  0486  00CE               	movwf	?___fttol
  2482  0487  0008               	return
  2483  0488                     __end_of___fttol:	
  2484  0488                     PL12:	
  2485  0488  084E               	movf	___fttol@f1,w
  2486  0489  00D2               	movwf	??___fttol
  2487  048A  084F               	movf	___fttol@f1+1,w
  2488  048B  00D3               	movwf	??___fttol+1
  2489  048C  0850               	movf	___fttol@f1+2,w
  2490  048D  00D4               	movwf	??___fttol+2
  2491  048E  0008               	return
  2492  048F                     __end_ofPL12:	
  2493                           
  2494                           	psect	text14
  2495  0350                     __ptext14:	
  2496 ;; *************** function ___ftdiv *****************
  2497 ;; Defined at:
  2498 ;;		line 56 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\ftdiv.c"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;  f2              3   31[BANK0 ] float 
  2501 ;;  f1              3   34[BANK0 ] float 
  2502 ;; Auto vars:     Size  Location     Type
  2503 ;;  f3              3   41[BANK0 ] float 
  2504 ;;  sign            1   45[BANK0 ] unsigned char 
  2505 ;;  exp             1   44[BANK0 ] unsigned char 
  2506 ;;  cntr            1   40[BANK0 ] unsigned char 
  2507 ;; Return value:  Size  Location     Type
  2508 ;;                  3   31[BANK0 ] float 
  2509 ;; Registers used:
  2510 ;;		wreg, status,2, status,0, pclath, cstack
  2511 ;; Tracked objects:
  2512 ;;		On entry : 100/0
  2513 ;;		On exit  : 100/0
  2514 ;;		Unchanged: 0/0
  2515 ;; Data sizes:     COMMON   BANK0   BANK1
  2516 ;;      Params:         0       6       0
  2517 ;;      Locals:         0       6       0
  2518 ;;      Temps:          0       3       0
  2519 ;;      Totals:         0      15       0
  2520 ;;Total ram usage:       15 bytes
  2521 ;; Hardware stack levels used:    1
  2522 ;; Hardware stack levels required when called:    4
  2523 ;; This function calls:
  2524 ;;		___ftpack
  2525 ;; This function is called by:
  2526 ;;		_ADC_read
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           
  2531                           ;psect for function ___ftdiv
  2532  0350                     ___ftdiv:	
  2533                           
  2534                           ;incstack = 0
  2535                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2536  0350  0842               	movf	___ftdiv@f1,w
  2537  0351  00C5               	movwf	??___ftdiv
  2538  0352  0843               	movf	___ftdiv@f1+1,w
  2539  0353  00C6               	movwf	??___ftdiv+1
  2540  0354  0844               	movf	___ftdiv@f1+2,w
  2541  0355  00C7               	movwf	??___ftdiv+2
  2542  0356  1003               	clrc
  2543  0357  0D46               	rlf	??___ftdiv+1,w
  2544  0358  0D47               	rlf	??___ftdiv+2,w
  2545  0359  00CC               	movwf	___ftdiv@exp
  2546  035A  084C               	movf	___ftdiv@exp,w
  2547  035B  1D03               	btfss	3,2
  2548  035C  2B5E               	goto	l3887
  2549  035D  2BB2               	ljmp	PL18	;call to abstracted procedure
  2550  035E                     l3887:	
  2551  035E  083F               	movf	___ftdiv@f2,w
  2552  035F  00C5               	movwf	??___ftdiv
  2553  0360  0840               	movf	___ftdiv@f2+1,w
  2554  0361  00C6               	movwf	??___ftdiv+1
  2555  0362  0841               	movf	___ftdiv@f2+2,w
  2556  0363  00C7               	movwf	??___ftdiv+2
  2557  0364  1003               	clrc
  2558  0365  0D46               	rlf	??___ftdiv+1,w
  2559  0366  0D47               	rlf	??___ftdiv+2,w
  2560  0367  00CD               	movwf	___ftdiv@sign
  2561  0368  084D               	movf	___ftdiv@sign,w
  2562  0369  1D03               	btfss	3,2
  2563  036A  2B6C               	goto	l1639
  2564  036B  2BB2               	ljmp	PL18	;call to abstracted procedure
  2565  036C                     l1639:	
  2566  036C  3089               	movlw	137
  2567  036D  01C9               	clrf	___ftdiv@f3
  2568  036E  01CA               	clrf	___ftdiv@f3+1
  2569  036F  01CB               	clrf	___ftdiv@f3+2
  2570  0370  074D               	addwf	___ftdiv@sign,w
  2571  0371  00C5               	movwf	??___ftdiv
  2572  0372  02CC               	subwf	___ftdiv@exp,f
  2573  0373  0844               	movf	___ftdiv@f1+2,w
  2574  0374  00CD               	movwf	___ftdiv@sign
  2575  0375  0841               	movf	___ftdiv@f2+2,w
  2576  0376  06CD               	xorwf	___ftdiv@sign,f
  2577  0377  3080               	movlw	128
  2578  0378  05CD               	andwf	___ftdiv@sign,f
  2579  0379  3018               	movlw	24
  2580  037A  17C3               	bsf	___ftdiv@f1+1,7
  2581  037B  01C4               	clrf	___ftdiv@f1+2
  2582  037C  17C0               	bsf	___ftdiv@f2+1,7
  2583  037D  01C1               	clrf	___ftdiv@f2+2
  2584  037E  00C8               	movwf	___ftdiv@cntr
  2585  037F                     l3909:	
  2586  037F  1003               	clrc
  2587  0380  0DC9               	rlf	___ftdiv@f3,f
  2588  0381  0DCA               	rlf	___ftdiv@f3+1,f
  2589  0382  0DCB               	rlf	___ftdiv@f3+2,f
  2590  0383  0841               	movf	___ftdiv@f2+2,w
  2591  0384  0244               	subwf	___ftdiv@f1+2,w
  2592  0385  1D03               	skipz
  2593  0386  2B8D               	goto	u3085
  2594  0387  0840               	movf	___ftdiv@f2+1,w
  2595  0388  0243               	subwf	___ftdiv@f1+1,w
  2596  0389  1D03               	skipz
  2597  038A  2B8D               	goto	u3085
  2598  038B  083F               	movf	___ftdiv@f2,w
  2599  038C  0242               	subwf	___ftdiv@f1,w
  2600  038D                     u3085:	
  2601  038D  1C03               	skipc
  2602  038E  2B9B               	goto	L5
  2603  038F  083F               	movf	___ftdiv@f2,w
  2604  0390  02C2               	subwf	___ftdiv@f1,f
  2605  0391  0840               	movf	___ftdiv@f2+1,w
  2606  0392  1C03               	skipc
  2607  0393  0F40               	incfsz	___ftdiv@f2+1,w
  2608  0394  02C3               	subwf	___ftdiv@f1+1,f
  2609  0395  0841               	movf	___ftdiv@f2+2,w
  2610  0396  1C03               	skipc
  2611  0397  0A41               	incf	___ftdiv@f2+2,w
  2612  0398  02C4               	subwf	___ftdiv@f1+2,f
  2613  0399  1449               	bsf	___ftdiv@f3,0
  2614  039A  1003               	clrc
  2615  039B                     L5:	
  2616  039B  0DC2               	rlf	___ftdiv@f1,f
  2617  039C  0DC3               	rlf	___ftdiv@f1+1,f
  2618  039D  0DC4               	rlf	___ftdiv@f1+2,f
  2619  039E  0BC8               	decfsz	___ftdiv@cntr,f
  2620  039F  2B7F               	goto	l3909
  2621  03A0  0849               	movf	___ftdiv@f3,w
  2622  03A1  00A8               	movwf	___ftpack@arg
  2623  03A2  084A               	movf	___ftdiv@f3+1,w
  2624  03A3  00A9               	movwf	___ftpack@arg+1
  2625  03A4  084B               	movf	___ftdiv@f3+2,w
  2626  03A5  00AA               	movwf	___ftpack@arg+2
  2627  03A6  084C               	movf	___ftdiv@exp,w
  2628  03A7  00AB               	movwf	___ftpack@exp
  2629  03A8  084D               	movf	___ftdiv@sign,w
  2630  03A9  00AC               	movwf	___ftpack@sign
  2631  03AA  2285               	fcall	___ftpack
  2632  03AB  0828               	movf	?___ftpack,w
  2633  03AC  00BF               	movwf	?___ftdiv
  2634  03AD  0829               	movf	?___ftpack+1,w
  2635  03AE  00C0               	movwf	?___ftdiv+1
  2636  03AF  082A               	movf	?___ftpack+2,w
  2637  03B0  00C1               	movwf	?___ftdiv+2
  2638  03B1  0008               	return
  2639  03B2                     __end_of___ftdiv:	
  2640  03B2                     PL18:	
  2641  03B2  01BF               	clrf	?___ftdiv
  2642  03B3  01C0               	clrf	?___ftdiv+1
  2643  03B4  01C1               	clrf	?___ftdiv+2
  2644  03B5  0008               	return
  2645  03B6                     __end_ofPL18:	
  2646                           
  2647                           	psect	text15
  2648  053D                     __ptext15:	
  2649 ;; *************** function ___ftadd *****************
  2650 ;; Defined at:
  2651 ;;		line 86 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\ftadd.c"
  2652 ;; Parameters:    Size  Location     Type
  2653 ;;  f1              3   19[BANK0 ] float 
  2654 ;;  f2              3   22[BANK0 ] float 
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;  exp1            1   30[BANK0 ] unsigned char 
  2657 ;;  exp2            1   29[BANK0 ] unsigned char 
  2658 ;;  sign            1   28[BANK0 ] unsigned char 
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  3   19[BANK0 ] float 
  2661 ;; Registers used:
  2662 ;;		wreg, status,2, status,0, pclath, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 100/0
  2665 ;;		On exit  : 100/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMMON   BANK0   BANK1
  2668 ;;      Params:         0       6       0
  2669 ;;      Locals:         0       3       0
  2670 ;;      Temps:          0       3       0
  2671 ;;      Totals:         0      12       0
  2672 ;;Total ram usage:       12 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    4
  2675 ;; This function calls:
  2676 ;;		___ftpack
  2677 ;; This function is called by:
  2678 ;;		_ADC_read
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           
  2683                           ;psect for function ___ftadd
  2684  053D                     ___ftadd:	
  2685                           
  2686                           ;incstack = 0
  2687                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  2688  053D  0833               	movf	___ftadd@f1,w
  2689  053E  00B9               	movwf	??___ftadd
  2690  053F  0834               	movf	___ftadd@f1+1,w
  2691  0540  00BA               	movwf	??___ftadd+1
  2692  0541  0835               	movf	___ftadd@f1+2,w
  2693  0542  00BB               	movwf	??___ftadd+2
  2694  0543  1003               	clrc
  2695  0544  0D3A               	rlf	??___ftadd+1,w
  2696  0545  0D3B               	rlf	??___ftadd+2,w
  2697  0546  00BE               	movwf	___ftadd@exp1
  2698  0547  0836               	movf	___ftadd@f2,w
  2699  0548  00B9               	movwf	??___ftadd
  2700  0549  0837               	movf	___ftadd@f2+1,w
  2701  054A  00BA               	movwf	??___ftadd+1
  2702  054B  0838               	movf	___ftadd@f2+2,w
  2703  054C  00BB               	movwf	??___ftadd+2
  2704  054D  1003               	clrc
  2705  054E  0D3A               	rlf	??___ftadd+1,w
  2706  054F  0D3B               	rlf	??___ftadd+2,w
  2707  0550  00BD               	movwf	___ftadd@exp2
  2708  0551  083E               	movf	___ftadd@exp1,w
  2709  0552  1903               	btfsc	3,2
  2710  0553  2D60               	goto	l3813
  2711  0554  083D               	movf	___ftadd@exp2,w
  2712  0555  023E               	subwf	___ftadd@exp1,w
  2713  0556  083D               	movf	___ftadd@exp2,w
  2714  0557  1803               	skipnc
  2715  0558  2D68               	goto	L6
  2716  0559  00B9               	movwf	??___ftadd
  2717  055A  083E               	movf	___ftadd@exp1,w
  2718  055B  02B9               	subwf	??___ftadd,f
  2719  055C  3019               	movlw	25
  2720  055D  0239               	subwf	??___ftadd,w
  2721  055E  1C03               	skipc
  2722  055F  2D67               	goto	l3817
  2723  0560                     l3813:	
  2724  0560  0836               	movf	___ftadd@f2,w
  2725  0561  00B3               	movwf	?___ftadd
  2726  0562  0837               	movf	___ftadd@f2+1,w
  2727  0563  00B4               	movwf	?___ftadd+1
  2728  0564  0838               	movf	___ftadd@f2+2,w
  2729  0565  00B5               	movwf	?___ftadd+2
  2730  0566  0008               	return
  2731  0567                     l3817:	
  2732  0567  083D               	movf	___ftadd@exp2,w
  2733  0568                     L6:	
  2734  0568  1903               	btfsc	3,2
  2735  0569  0008               	return
  2736  056A  083E               	movf	___ftadd@exp1,w
  2737  056B  023D               	subwf	___ftadd@exp2,w
  2738  056C  1803               	skipnc
  2739  056D  2D76               	goto	l3823
  2740  056E  083E               	movf	___ftadd@exp1,w
  2741  056F  00B9               	movwf	??___ftadd
  2742  0570  083D               	movf	___ftadd@exp2,w
  2743  0571  02B9               	subwf	??___ftadd,f
  2744  0572  3019               	movlw	25
  2745  0573  0239               	subwf	??___ftadd,w
  2746  0574  1803               	btfsc	3,0
  2747  0575  0008               	return
  2748  0576                     l3823:	
  2749  0576  3006               	movlw	6
  2750  0577  00BC               	movwf	___ftadd@sign
  2751  0578  1BB5               	btfsc	___ftadd@f1+2,7
  2752  0579  17BC               	bsf	___ftadd@sign,7
  2753  057A  1BB8               	btfsc	___ftadd@f2+2,7
  2754  057B  173C               	bsf	___ftadd@sign,6
  2755  057C  17B4               	bsf	___ftadd@f1+1,7
  2756  057D  01B5               	clrf	___ftadd@f1+2
  2757  057E  17B7               	bsf	___ftadd@f2+1,7
  2758  057F  01B8               	clrf	___ftadd@f2+2
  2759  0580  083D               	movf	___ftadd@exp2,w
  2760  0581  023E               	subwf	___ftadd@exp1,w
  2761  0582  1803               	skipnc
  2762  0583  2D9D               	goto	l3845
  2763  0584                     l3835:	
  2764  0584  1003               	clrc
  2765  0585  0DB6               	rlf	___ftadd@f2,f
  2766  0586  0DB7               	rlf	___ftadd@f2+1,f
  2767  0587  0DB8               	rlf	___ftadd@f2+2,f
  2768  0588  03BD               	decf	___ftadd@exp2,f
  2769  0589  083D               	movf	___ftadd@exp2,w
  2770  058A  063E               	xorwf	___ftadd@exp1,w
  2771  058B  1903               	skipnz
  2772  058C  2D98               	goto	l3843
  2773  058D  03BC               	decf	___ftadd@sign,f
  2774  058E  083C               	movf	___ftadd@sign,w
  2775  058F  3907               	andlw	7
  2776  0590  1903               	btfsc	3,2
  2777  0591  2D98               	goto	l3843
  2778  0592  2D84               	goto	l3835
  2779  0593                     l3841:	
  2780  0593  1003               	clrc
  2781  0594  0CB5               	rrf	___ftadd@f1+2,f
  2782  0595  0CB4               	rrf	___ftadd@f1+1,f
  2783  0596  0CB3               	rrf	___ftadd@f1,f
  2784  0597  0ABE               	incf	___ftadd@exp1,f
  2785  0598                     l3843:	
  2786  0598  083E               	movf	___ftadd@exp1,w
  2787  0599  063D               	xorwf	___ftadd@exp2,w
  2788  059A  1903               	btfsc	3,2
  2789  059B  2DB9               	goto	l1621
  2790  059C  2D93               	goto	l3841
  2791  059D                     l3845:	
  2792  059D  083E               	movf	___ftadd@exp1,w
  2793  059E  023D               	subwf	___ftadd@exp2,w
  2794  059F  1803               	skipnc
  2795  05A0  2DB9               	goto	l1621
  2796  05A1                     l3847:	
  2797  05A1  1003               	clrc
  2798  05A2  0DB3               	rlf	___ftadd@f1,f
  2799  05A3  0DB4               	rlf	___ftadd@f1+1,f
  2800  05A4  0DB5               	rlf	___ftadd@f1+2,f
  2801  05A5  03BE               	decf	___ftadd@exp1,f
  2802  05A6  083D               	movf	___ftadd@exp2,w
  2803  05A7  063E               	xorwf	___ftadd@exp1,w
  2804  05A8  1903               	skipnz
  2805  05A9  2DB5               	goto	l3855
  2806  05AA  03BC               	decf	___ftadd@sign,f
  2807  05AB  083C               	movf	___ftadd@sign,w
  2808  05AC  3907               	andlw	7
  2809  05AD  1903               	btfsc	3,2
  2810  05AE  2DB5               	goto	l3855
  2811  05AF  2DA1               	goto	l3847
  2812  05B0                     l3853:	
  2813  05B0  1003               	clrc
  2814  05B1  0CB8               	rrf	___ftadd@f2+2,f
  2815  05B2  0CB7               	rrf	___ftadd@f2+1,f
  2816  05B3  0CB6               	rrf	___ftadd@f2,f
  2817  05B4  0ABD               	incf	___ftadd@exp2,f
  2818  05B5                     l3855:	
  2819  05B5  083E               	movf	___ftadd@exp1,w
  2820  05B6  063D               	xorwf	___ftadd@exp2,w
  2821  05B7  1D03               	skipz
  2822  05B8  2DB0               	goto	l3853
  2823  05B9                     l1621:	
  2824  05B9  1FBC               	btfss	___ftadd@sign,7
  2825  05BA  2DC4               	goto	l3861
  2826  05BB  30FF               	movlw	255
  2827  05BC  06B3               	xorwf	___ftadd@f1,f
  2828  05BD  06B4               	xorwf	___ftadd@f1+1,f
  2829  05BE  06B5               	xorwf	___ftadd@f1+2,f
  2830  05BF  0AB3               	incf	___ftadd@f1,f
  2831  05C0  1903               	skipnz
  2832  05C1  0AB4               	incf	___ftadd@f1+1,f
  2833  05C2  1903               	skipnz
  2834  05C3  0AB5               	incf	___ftadd@f1+2,f
  2835  05C4                     l3861:	
  2836  05C4  1F3C               	btfss	___ftadd@sign,6
  2837  05C5  2DCB               	goto	l3867
  2838  05C6  25F5               	fcall	PL14	;call to abstracted procedure
  2839  05C7  1903               	skipnz
  2840  05C8  0AB7               	incf	___ftadd@f2+1,f
  2841  05C9  1903               	skipnz
  2842  05CA  0AB8               	incf	___ftadd@f2+2,f
  2843  05CB                     l3867:	
  2844  05CB  01BC               	clrf	___ftadd@sign
  2845  05CC  0833               	movf	___ftadd@f1,w
  2846  05CD  07B6               	addwf	___ftadd@f2,f
  2847  05CE  0834               	movf	___ftadd@f1+1,w
  2848  05CF  1103               	clrz
  2849  05D0  1803               	skipnc
  2850  05D1  0A34               	incf	___ftadd@f1+1,w
  2851  05D2  1D03               	btfss	3,2
  2852  05D3  07B7               	addwf	___ftadd@f2+1,f
  2853  05D4  0835               	movf	___ftadd@f1+2,w
  2854  05D5  1103               	clrz
  2855  05D6  1803               	skipnc
  2856  05D7  0A35               	incf	___ftadd@f1+2,w
  2857  05D8  1D03               	btfss	3,2
  2858  05D9  07B8               	addwf	___ftadd@f2+2,f
  2859  05DA  1FB8               	btfss	___ftadd@f2+2,7
  2860  05DB  2DE3               	goto	l3879
  2861  05DC  25F5               	fcall	PL14	;call to abstracted procedure
  2862  05DD  1903               	skipnz
  2863  05DE  0AB7               	incf	___ftadd@f2+1,f
  2864  05DF  1903               	skipnz
  2865  05E0  0AB8               	incf	___ftadd@f2+2,f
  2866  05E1  01BC               	clrf	___ftadd@sign
  2867  05E2  0ABC               	incf	___ftadd@sign,f
  2868  05E3                     l3879:	
  2869  05E3  0836               	movf	___ftadd@f2,w
  2870  05E4  00A8               	movwf	___ftpack@arg
  2871  05E5  0837               	movf	___ftadd@f2+1,w
  2872  05E6  00A9               	movwf	___ftpack@arg+1
  2873  05E7  0838               	movf	___ftadd@f2+2,w
  2874  05E8  00AA               	movwf	___ftpack@arg+2
  2875  05E9  083E               	movf	___ftadd@exp1,w
  2876  05EA  00AB               	movwf	___ftpack@exp
  2877  05EB  083C               	movf	___ftadd@sign,w
  2878  05EC  00AC               	movwf	___ftpack@sign
  2879  05ED  2285               	fcall	___ftpack
  2880  05EE  0828               	movf	?___ftpack,w
  2881  05EF  00B3               	movwf	?___ftadd
  2882  05F0  0829               	movf	?___ftpack+1,w
  2883  05F1  00B4               	movwf	?___ftadd+1
  2884  05F2  082A               	movf	?___ftpack+2,w
  2885  05F3  00B5               	movwf	?___ftadd+2
  2886  05F4  0008               	return
  2887  05F5                     __end_of___ftadd:	
  2888  05F5                     PL14:	
  2889  05F5  30FF               	movlw	255
  2890  05F6  06B6               	xorwf	___ftadd@f2,f
  2891  05F7  06B7               	xorwf	___ftadd@f2+1,f
  2892  05F8  06B8               	xorwf	___ftadd@f2+2,f
  2893  05F9  0AB6               	incf	___ftadd@f2,f
  2894  05FA  0008               	return
  2895  05FB                     __end_ofPL14:	
  2896                           
  2897                           	psect	text16
  2898  0285                     __ptext16:	
  2899 ;; *************** function ___ftpack *****************
  2900 ;; Defined at:
  2901 ;;		line 62 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\float.c"
  2902 ;; Parameters:    Size  Location     Type
  2903 ;;  arg             3    8[BANK0 ] unsigned um
  2904 ;;  exp             1   11[BANK0 ] unsigned char 
  2905 ;;  sign            1   12[BANK0 ] unsigned char 
  2906 ;; Auto vars:     Size  Location     Type
  2907 ;;		None
  2908 ;; Return value:  Size  Location     Type
  2909 ;;                  3    8[BANK0 ] float 
  2910 ;; Registers used:
  2911 ;;		wreg, status,2, status,0
  2912 ;; Tracked objects:
  2913 ;;		On entry : 100/0
  2914 ;;		On exit  : 100/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMMON   BANK0   BANK1
  2917 ;;      Params:         0       5       0
  2918 ;;      Locals:         0       0       0
  2919 ;;      Temps:          0       3       0
  2920 ;;      Totals:         0       8       0
  2921 ;;Total ram usage:        8 bytes
  2922 ;; Hardware stack levels used:    1
  2923 ;; Hardware stack levels required when called:    3
  2924 ;; This function calls:
  2925 ;;		Nothing
  2926 ;; This function is called by:
  2927 ;;		___ftadd
  2928 ;;		___ftdiv
  2929 ;;		___lwtoft
  2930 ;; This function uses a non-reentrant model
  2931 ;;
  2932                           
  2933                           
  2934                           ;psect for function ___ftpack
  2935  0285                     ___ftpack:	
  2936                           
  2937                           ;incstack = 0
  2938                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2939  0285  082B               	movf	___ftpack@exp,w
  2940  0286  1903               	btfsc	3,2
  2941  0287  2A8D               	goto	l1585
  2942  0288  082A               	movf	___ftpack@arg+2,w
  2943  0289  0429               	iorwf	___ftpack@arg+1,w
  2944  028A  0428               	iorwf	___ftpack@arg,w
  2945  028B  1D03               	skipz
  2946  028C  2A93               	goto	l3717
  2947  028D                     l1585:	
  2948  028D  01A8               	clrf	?___ftpack
  2949  028E  01A9               	clrf	?___ftpack+1
  2950  028F  01AA               	clrf	?___ftpack+2
  2951  0290  0008               	return
  2952  0291                     l3715:	
  2953  0291  0AAB               	incf	___ftpack@exp,f
  2954  0292  22C1               	fcall	PL24	;call to abstracted procedure
  2955  0293                     l3717:	
  2956  0293  30FE               	movlw	254
  2957  0294  052A               	andwf	___ftpack@arg+2,w
  2958  0295  1903               	btfsc	3,2
  2959  0296  2A9F               	goto	l3721
  2960  0297  2A91               	goto	l3715
  2961  0298                     l3719:	
  2962  0298  0AAB               	incf	___ftpack@exp,f
  2963  0299  0AA8               	incf	___ftpack@arg,f
  2964  029A  1903               	skipnz
  2965  029B  0AA9               	incf	___ftpack@arg+1,f
  2966  029C  1903               	skipnz
  2967  029D  0AAA               	incf	___ftpack@arg+2,f
  2968  029E  22C1               	fcall	PL24	;call to abstracted procedure
  2969  029F                     l3721:	
  2970  029F  30FF               	movlw	255
  2971  02A0  052A               	andwf	___ftpack@arg+2,w
  2972  02A1  1903               	btfsc	3,2
  2973  02A2  2AAD               	goto	l3725
  2974  02A3  2A98               	goto	l3719
  2975  02A4                     l3727:	
  2976  02A4  3002               	movlw	2
  2977  02A5  022B               	subwf	___ftpack@exp,w
  2978  02A6  1C03               	btfss	3,0
  2979  02A7  2AAF               	goto	l1597
  2980  02A8  03AB               	decf	___ftpack@exp,f
  2981  02A9  1003               	clrc
  2982  02AA  0DA8               	rlf	___ftpack@arg,f
  2983  02AB  0DA9               	rlf	___ftpack@arg+1,f
  2984  02AC  0DAA               	rlf	___ftpack@arg+2,f
  2985  02AD                     l3725:	
  2986  02AD  1FA9               	btfss	___ftpack@arg+1,7
  2987  02AE  2AA4               	goto	l3727
  2988  02AF                     l1597:	
  2989  02AF  1C2B               	btfss	___ftpack@exp,0
  2990  02B0  13A9               	bcf	___ftpack@arg+1,7
  2991  02B1  1003               	clrc
  2992  02B2  0CAB               	rrf	___ftpack@exp,f
  2993  02B3  082B               	movf	___ftpack@exp,w
  2994  02B4  00AF               	movwf	??___ftpack+2
  2995  02B5  01AE               	clrf	??___ftpack+1
  2996  02B6  01AD               	clrf	??___ftpack
  2997  02B7  082D               	movf	??___ftpack,w
  2998  02B8  04A8               	iorwf	___ftpack@arg,f
  2999  02B9  082E               	movf	??___ftpack+1,w
  3000  02BA  04A9               	iorwf	___ftpack@arg+1,f
  3001  02BB  082F               	movf	??___ftpack+2,w
  3002  02BC  04AA               	iorwf	___ftpack@arg+2,f
  3003  02BD  082C               	movf	___ftpack@sign,w
  3004  02BE  1D03               	btfss	3,2
  3005  02BF  17AA               	bsf	___ftpack@arg+2,7
  3006  02C0  0008               	return
  3007  02C1                     __end_of___ftpack:	
  3008  02C1                     PL24:	
  3009  02C1  1003               	clrc
  3010  02C2  0CAA               	rrf	___ftpack@arg+2,f
  3011  02C3  0CA9               	rrf	___ftpack@arg+1,f
  3012  02C4  0CA8               	rrf	___ftpack@arg,f
  3013  02C5  0008               	return
  3014  02C6                     __end_ofPL24:	
  3015                           
  3016                           	psect	text17
  3017  06DD                     __ptext17:	
  3018 ;; *************** function _ADC_Sample *****************
  3019 ;; Defined at:
  3020 ;;		line 231 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SC8F072_double_key\SC8F072_Pwm_Demo.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;  adch            1    wreg     unsigned char 
  3023 ;;  adldo           1    8[BANK0 ] unsigned char 
  3024 ;; Auto vars:     Size  Location     Type
  3025 ;;  adch            1   14[BANK0 ] unsigned char 
  3026 ;;  j               1   13[BANK0 ] unsigned char 
  3027 ;;  adsum           4   16[BANK0 ] volatile unsigned long 
  3028 ;;  ad_temp         2   24[BANK0 ] volatile unsigned int 
  3029 ;;  admax           2   22[BANK0 ] volatile unsigned int 
  3030 ;;  admin           2   20[BANK0 ] volatile unsigned int 
  3031 ;;  i               1   15[BANK0 ] unsigned char 
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  1    wreg      unsigned char 
  3034 ;; Registers used:
  3035 ;;		wreg, status,2, status,0
  3036 ;; Tracked objects:
  3037 ;;		On entry : 100/0
  3038 ;;		On exit  : 100/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMMON   BANK0   BANK1
  3041 ;;      Params:         0       1       0
  3042 ;;      Locals:         0      13       0
  3043 ;;      Temps:          0       4       0
  3044 ;;      Totals:         0      18       0
  3045 ;;Total ram usage:       18 bytes
  3046 ;; Hardware stack levels used:    1
  3047 ;; Hardware stack levels required when called:    3
  3048 ;; This function calls:
  3049 ;;		Nothing
  3050 ;; This function is called by:
  3051 ;;		_ADC_read
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           
  3056                           ;psect for function _ADC_Sample
  3057  06DD                     _ADC_Sample:	
  3058                           
  3059                           ;incstack = 0
  3060                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  3061                           ;ADC_Sample@adch stored from wreg
  3062  06DD  00AE               	movwf	ADC_Sample@adch
  3063                           
  3064                           ;SC8F072_Pwm_Demo.c: 233: volatile unsigned long adsum = 0;
  3065                           
  3066                           ;SC8F072_Pwm_Demo.c: 234: volatile unsigned int admin = 0, admax = 0;
  3067  06DE  27C0               	fcall	PL6	;call to abstracted procedure
  3068                           
  3069                           ;SC8F072_Pwm_Demo.c: 235: volatile unsigned int ad_temp = 0;
  3070  06DF  01B8               	clrf	ADC_Sample@ad_temp	;volatile
  3071  06E0  01B9               	clrf	ADC_Sample@ad_temp+1	;volatile
  3072                           
  3073                           ;SC8F072_Pwm_Demo.c: 237: if ((!LDO_EN) && (adldo & 0x04) )
  3074  06E1  1683               	bsf	3,5	;RP0=1, select bank1
  3075  06E2  1916               	btfsc	22,2	;volatile
  3076  06E3  2EF1               	goto	l3745
  3077  06E4  1283               	bcf	3,5	;RP0=0, select bank0
  3078  06E5  1D28               	btfss	ADC_Sample@adldo,2
  3079  06E6  2EF1               	goto	l3745
  3080                           
  3081                           ;SC8F072_Pwm_Demo.c: 238: {
  3082                           ;SC8F072_Pwm_Demo.c: 240: ADCON1 = adldo;
  3083  06E7  0828               	movf	ADC_Sample@adldo,w
  3084  06E8  1683               	bsf	3,5	;RP0=1, select bank1
  3085  06E9  0096               	movwf	22	;volatile
  3086                           
  3087                           ;SC8F072_Pwm_Demo.c: 241: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3088  06EA  3084               	movlw	132
  3089  06EB  1283               	bcf	3,5	;RP0=0, select bank0
  3090  06EC  00A9               	movwf	??_ADC_Sample
  3091  06ED                     u3227:	
  3092  06ED  0BA9               	decfsz	??_ADC_Sample,f
  3093  06EE  2EED               	goto	u3227
  3094  06EF  2EF0               	nop2
  3095                           
  3096                           ;SC8F072_Pwm_Demo.c: 242: }
  3097  06F0  2EF5               	goto	l3747
  3098  06F1                     l3745:	
  3099                           
  3100                           ;SC8F072_Pwm_Demo.c: 243: else
  3101                           ;SC8F072_Pwm_Demo.c: 244: ADCON1 = adldo;
  3102  06F1  1283               	bcf	3,5	;RP0=0, select bank0
  3103  06F2  0828               	movf	ADC_Sample@adldo,w
  3104  06F3  1683               	bsf	3,5	;RP0=1, select bank1
  3105  06F4  0096               	movwf	22	;volatile
  3106  06F5                     l3747:	
  3107                           
  3108                           ;SC8F072_Pwm_Demo.c: 245: if(adch & 0x10)
  3109  06F5  1283               	bcf	3,5	;RP0=0, select bank0
  3110  06F6  1E2E               	btfss	ADC_Sample@adch,4
  3111  06F7  2EFD               	goto	l3755
  3112                           
  3113                           ;SC8F072_Pwm_Demo.c: 246: {
  3114                           ;SC8F072_Pwm_Demo.c: 247: CHS4 = 1;
  3115  06F8  1683               	bsf	3,5	;RP0=1, select bank1
  3116  06F9  1716               	bsf	22,6	;volatile
  3117                           
  3118                           ;SC8F072_Pwm_Demo.c: 248: adch &= 0x0f;
  3119  06FA  300F               	movlw	15
  3120  06FB  1283               	bcf	3,5	;RP0=0, select bank0
  3121  06FC  05AE               	andwf	ADC_Sample@adch,f
  3122  06FD                     l3755:	
  3123                           
  3124                           ;SC8F072_Pwm_Demo.c: 251: for (i = 0; i < 10; i++)
  3125  06FD  01AF               	clrf	ADC_Sample@i
  3126  06FE                     l3761:	
  3127                           
  3128                           ;SC8F072_Pwm_Demo.c: 252: {
  3129                           ;SC8F072_Pwm_Demo.c: 253: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  3130  06FE  082E               	movf	ADC_Sample@adch,w
  3131  06FF  00A9               	movwf	??_ADC_Sample
  3132  0700  3001               	movlw	1
  3133  0701  1003               	clrc
  3134  0702                     L7:	
  3135  0702  0DA9               	rlf	??_ADC_Sample,f
  3136  0703  3EFF               	addlw	-1
  3137  0704  1003               	clrc
  3138  0705  1D03               	skipz
  3139  0706  2F02               	goto	L7
  3140  0707  0D29               	rlf	??_ADC_Sample,w
  3141  0708  3841               	iorlw	65
  3142  0709  1683               	bsf	3,5	;RP0=1, select bank1
  3143  070A  0095               	movwf	21	;volatile
  3144  070B  0000               	nop	;# 
  3145  070C  0000               	nop	;# 
  3146  070D  0000               	nop	;# 
  3147  070E  0000               	nop	;# 
  3148                           
  3149                           ;SC8F072_Pwm_Demo.c: 258: GODONE = 1;
  3150  070F  1683               	bsf	3,5	;RP0=1, select bank1
  3151  0710  1495               	bsf	21,1	;volatile
  3152                           
  3153                           ;SC8F072_Pwm_Demo.c: 259: unsigned char j = 0;
  3154  0711  1283               	bcf	3,5	;RP0=0, select bank0
  3155  0712  01AD               	clrf	ADC_Sample@j
  3156  0713                     l690:	
  3157                           ;SC8F072_Pwm_Demo.c: 260: while (GODONE)
  3158                           
  3159  0713  1683               	bsf	3,5	;RP0=1, select bank1
  3160  0714  1C95               	btfss	21,1	;volatile
  3161  0715  2F1E               	goto	l3771
  3162                           
  3163                           ;SC8F072_Pwm_Demo.c: 261: {
  3164                           ;SC8F072_Pwm_Demo.c: 262: _delay((unsigned long)((2)*(16000000/4000000.0)));
  3165  0716  2F17               	nop2	;2 cycle nop
  3166  0717  2F18               	nop2	;2 cycle nop
  3167  0718  2F19               	nop2	;2 cycle nop
  3168  0719  2F1A               	nop2	;2 cycle nop
  3169                           
  3170                           ;SC8F072_Pwm_Demo.c: 263: if (0 == (--j))
  3171  071A  1283               	bcf	3,5	;RP0=0, select bank0
  3172  071B  0BAD               	decfsz	ADC_Sample@j,f
  3173  071C  2F13               	goto	l690
  3174                           
  3175                           ;SC8F072_Pwm_Demo.c: 264: return 0;
  3176  071D  3400               	retlw	0
  3177  071E                     l3771:	
  3178                           
  3179                           ;SC8F072_Pwm_Demo.c: 265: }
  3180                           ;SC8F072_Pwm_Demo.c: 267: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  3181  071E  0819               	movf	25,w	;volatile
  3182  071F  1283               	bcf	3,5	;RP0=0, select bank0
  3183  0720  00B8               	movwf	ADC_Sample@ad_temp	;volatile
  3184  0721  01B9               	clrf	ADC_Sample@ad_temp+1	;volatile
  3185  0722  0EB8               	swapf	ADC_Sample@ad_temp,f	;volatile
  3186  0723  0EB9               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3187  0724  30F0               	movlw	240
  3188  0725  05B9               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3189  0726  0838               	movf	ADC_Sample@ad_temp,w	;volatile
  3190  0727  390F               	andlw	15
  3191  0728  04B9               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3192  0729  30F0               	movlw	240
  3193  072A  05B8               	andwf	ADC_Sample@ad_temp,f	;volatile
  3194  072B  1683               	bsf	3,5	;RP0=1, select bank1
  3195  072C  0E18               	swapf	24,w	;volatile
  3196  072D  390F               	andlw	15
  3197  072E  1283               	bcf	3,5	;RP0=0, select bank0
  3198  072F  07B8               	addwf	ADC_Sample@ad_temp,f	;volatile
  3199  0730  1803               	skipnc
  3200  0731  0AB9               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3201                           
  3202                           ;SC8F072_Pwm_Demo.c: 269: if (0 == admax)
  3203  0732  0836               	movf	ADC_Sample@admax,w	;volatile
  3204  0733  0437               	iorwf	ADC_Sample@admax+1,w	;volatile
  3205  0734  1D03               	btfss	3,2
  3206  0735  2F38               	goto	l3779
  3207                           
  3208                           ;SC8F072_Pwm_Demo.c: 270: {
  3209                           ;SC8F072_Pwm_Demo.c: 271: admax = ad_temp;
  3210  0736  27C9               	fcall	PL26	;call to abstracted procedure
  3211  0737  2F4A               	goto	l3785
  3212  0738                     l3779:	
  3213                           ;SC8F072_Pwm_Demo.c: 273: }
  3214                           
  3215                           ;SC8F072_Pwm_Demo.c: 272: admin = ad_temp;
  3216                           
  3217                           
  3218                           ;SC8F072_Pwm_Demo.c: 274: else if (ad_temp > admax)admax = ad_temp;
  3219  0738  0839               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3220  0739  0237               	subwf	ADC_Sample@admax+1,w	;volatile
  3221  073A  1D03               	skipz
  3222  073B  2F3E               	goto	u2785
  3223  073C  0838               	movf	ADC_Sample@ad_temp,w	;volatile
  3224  073D  0236               	subwf	ADC_Sample@admax,w	;volatile
  3225  073E                     u2785:	
  3226  073E  1803               	skipnc
  3227  073F  2F42               	goto	l3783
  3228  0740  27C9               	fcall	PL26	;call to abstracted procedure
  3229  0741  2F4E               	goto	l696
  3230  0742                     l3783:	
  3231                           
  3232                           ;SC8F072_Pwm_Demo.c: 276: else if (ad_temp < admin)admin = ad_temp;
  3233  0742  0835               	movf	ADC_Sample@admin+1,w	;volatile
  3234  0743  0239               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  3235  0744  1D03               	skipz
  3236  0745  2F48               	goto	u2795
  3237  0746  0834               	movf	ADC_Sample@admin,w	;volatile
  3238  0747  0238               	subwf	ADC_Sample@ad_temp,w	;volatile
  3239  0748                     u2795:	
  3240  0748  1803               	skipnc
  3241  0749  2F4E               	goto	l696
  3242  074A                     l3785:	
  3243  074A  0839               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3244  074B  00B5               	movwf	ADC_Sample@admin+1	;volatile
  3245  074C  0838               	movf	ADC_Sample@ad_temp,w	;volatile
  3246  074D  00B4               	movwf	ADC_Sample@admin	;volatile
  3247  074E                     l696:	
  3248                           
  3249                           ;SC8F072_Pwm_Demo.c: 277: adsum += ad_temp;
  3250  074E  0838               	movf	ADC_Sample@ad_temp,w	;volatile
  3251  074F  00A9               	movwf	??_ADC_Sample
  3252  0750  0839               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3253  0751  00AA               	movwf	??_ADC_Sample+1
  3254  0752  01AB               	clrf	??_ADC_Sample+2
  3255  0753  01AC               	clrf	??_ADC_Sample+3
  3256  0754  0829               	movf	??_ADC_Sample,w
  3257  0755  07B0               	addwf	ADC_Sample@adsum,f	;volatile
  3258  0756  082A               	movf	??_ADC_Sample+1,w
  3259  0757  1103               	clrz
  3260  0758  1803               	skipnc
  3261  0759  3E01               	addlw	1
  3262  075A  1D03               	btfss	3,2
  3263  075B  07B1               	addwf	ADC_Sample@adsum+1,f	;volatile
  3264  075C  082B               	movf	??_ADC_Sample+2,w
  3265  075D  1103               	clrz
  3266  075E  1803               	skipnc
  3267  075F  3E01               	addlw	1
  3268  0760  1D03               	btfss	3,2
  3269  0761  07B2               	addwf	ADC_Sample@adsum+2,f	;volatile
  3270  0762  082C               	movf	??_ADC_Sample+3,w
  3271  0763  1103               	clrz
  3272  0764  1803               	skipnc
  3273  0765  3E01               	addlw	1
  3274  0766  1D03               	btfss	3,2
  3275  0767  07B3               	addwf	ADC_Sample@adsum+3,f	;volatile
  3276  0768  300A               	movlw	10
  3277  0769  0AAF               	incf	ADC_Sample@i,f
  3278  076A  022F               	subwf	ADC_Sample@i,w
  3279  076B  1C03               	skipc
  3280  076C  2EFE               	goto	l3761
  3281                           
  3282                           ;SC8F072_Pwm_Demo.c: 278: }
  3283                           ;SC8F072_Pwm_Demo.c: 279: adsum -= admax;
  3284  076D  0836               	movf	ADC_Sample@admax,w	;volatile
  3285  076E  00A9               	movwf	??_ADC_Sample
  3286  076F  0837               	movf	ADC_Sample@admax+1,w	;volatile
  3287  0770  27B1               	fcall	PL2	;call to abstracted procedure
  3288  0771  1C03               	skipc
  3289  0772  0F2C               	incfsz	??_ADC_Sample+3,w
  3290  0773  02B3               	subwf	ADC_Sample@adsum+3,f	;volatile
  3291                           
  3292                           ;SC8F072_Pwm_Demo.c: 280: if (adsum >= admin)
  3293  0774  0834               	movf	ADC_Sample@admin,w	;volatile
  3294  0775  00A9               	movwf	??_ADC_Sample
  3295  0776  0835               	movf	ADC_Sample@admin+1,w	;volatile
  3296  0777  00AA               	movwf	??_ADC_Sample+1
  3297  0778  01AB               	clrf	??_ADC_Sample+2
  3298  0779  01AC               	clrf	??_ADC_Sample+3
  3299  077A  082C               	movf	??_ADC_Sample+3,w
  3300  077B  0233               	subwf	ADC_Sample@adsum+3,w	;volatile
  3301  077C  1D03               	skipz
  3302  077D  2F88               	goto	u2835
  3303  077E  082B               	movf	??_ADC_Sample+2,w
  3304  077F  0232               	subwf	ADC_Sample@adsum+2,w	;volatile
  3305  0780  1D03               	skipz
  3306  0781  2F88               	goto	u2835
  3307  0782  082A               	movf	??_ADC_Sample+1,w
  3308  0783  0231               	subwf	ADC_Sample@adsum+1,w	;volatile
  3309  0784  1D03               	skipz
  3310  0785  2F88               	goto	u2835
  3311  0786  0829               	movf	??_ADC_Sample,w
  3312  0787  0230               	subwf	ADC_Sample@adsum,w	;volatile
  3313  0788                     u2835:	
  3314  0788  1C03               	skipc
  3315  0789  2F92               	goto	l700
  3316                           
  3317                           ;SC8F072_Pwm_Demo.c: 281: adsum -= admin;
  3318  078A  0834               	movf	ADC_Sample@admin,w	;volatile
  3319  078B  00A9               	movwf	??_ADC_Sample
  3320  078C  0835               	movf	ADC_Sample@admin+1,w	;volatile
  3321  078D  27B1               	fcall	PL2	;call to abstracted procedure
  3322  078E  1C03               	skipc
  3323  078F  0F2C               	incfsz	??_ADC_Sample+3,w
  3324  0790  02B3               	subwf	ADC_Sample@adsum+3,f	;volatile
  3325  0791  2F96               	goto	l3795
  3326  0792                     l700:	
  3327                           
  3328                           ;SC8F072_Pwm_Demo.c: 282: else
  3329                           ;SC8F072_Pwm_Demo.c: 283: adsum = 0;
  3330  0792  01B0               	clrf	ADC_Sample@adsum	;volatile
  3331  0793  01B1               	clrf	ADC_Sample@adsum+1	;volatile
  3332  0794  01B2               	clrf	ADC_Sample@adsum+2	;volatile
  3333  0795  01B3               	clrf	ADC_Sample@adsum+3	;volatile
  3334  0796                     l3795:	
  3335                           
  3336                           ;SC8F072_Pwm_Demo.c: 284: adresult = adsum >> 3;
  3337  0796  0830               	movf	ADC_Sample@adsum,w	;volatile
  3338  0797  00A9               	movwf	??_ADC_Sample
  3339  0798  0831               	movf	ADC_Sample@adsum+1,w	;volatile
  3340  0799  00AA               	movwf	??_ADC_Sample+1
  3341  079A  0832               	movf	ADC_Sample@adsum+2,w	;volatile
  3342  079B  00AB               	movwf	??_ADC_Sample+2
  3343  079C  0833               	movf	ADC_Sample@adsum+3,w	;volatile
  3344  079D  00AC               	movwf	??_ADC_Sample+3
  3345  079E  3003               	movlw	3
  3346  079F                     u2855:	
  3347  079F  1003               	clrc
  3348  07A0  0CAC               	rrf	??_ADC_Sample+3,f
  3349  07A1  0CAB               	rrf	??_ADC_Sample+2,f
  3350  07A2  0CAA               	rrf	??_ADC_Sample+1,f
  3351  07A3  0CA9               	rrf	??_ADC_Sample,f
  3352  07A4  3EFF               	addlw	-1
  3353  07A5  1D03               	skipz
  3354  07A6  2F9F               	goto	u2855
  3355  07A7  082A               	movf	??_ADC_Sample+1,w
  3356  07A8  1683               	bsf	3,5	;RP0=1, select bank1
  3357  07A9  00C3               	movwf	(_adresult+1)^(0+128)	;volatile
  3358  07AA  1283               	bcf	3,5	;RP0=0, select bank0
  3359  07AB  0829               	movf	??_ADC_Sample,w
  3360  07AC  1683               	bsf	3,5	;RP0=1, select bank1
  3361  07AD  00C2               	movwf	_adresult^(0+128)	;volatile
  3362                           
  3363                           ;SC8F072_Pwm_Demo.c: 285: adsum = 0;
  3364  07AE  1283               	bcf	3,5	;RP0=0, select bank0
  3365                           
  3366                           ;SC8F072_Pwm_Demo.c: 286: admin = 0;
  3367                           
  3368                           ;SC8F072_Pwm_Demo.c: 287: admax = 0;
  3369  07AF  27C0               	fcall	PL6	;call to abstracted procedure
  3370                           
  3371                           ;SC8F072_Pwm_Demo.c: 288: return 0xA5;
  3372  07B0  34A5               	retlw	165
  3373  07B1                     __end_of_ADC_Sample:	
  3374  07B1                     PL2:	
  3375  07B1  00AA               	movwf	??_ADC_Sample+1
  3376  07B2  01AB               	clrf	??_ADC_Sample+2
  3377  07B3  01AC               	clrf	??_ADC_Sample+3
  3378  07B4  0829               	movf	??_ADC_Sample,w
  3379  07B5  02B0               	subwf	ADC_Sample@adsum,f	;volatile
  3380  07B6  082A               	movf	??_ADC_Sample+1,w
  3381  07B7  1C03               	skipc
  3382  07B8  0F2A               	incfsz	??_ADC_Sample+1,w
  3383  07B9  02B1               	subwf	ADC_Sample@adsum+1,f	;volatile
  3384  07BA  082B               	movf	??_ADC_Sample+2,w
  3385  07BB  1C03               	skipc
  3386  07BC  0F2B               	incfsz	??_ADC_Sample+2,w
  3387  07BD  02B2               	subwf	ADC_Sample@adsum+2,f	;volatile
  3388  07BE  082C               	movf	??_ADC_Sample+3,w
  3389  07BF  0008               	return
  3390  07C0                     __end_ofPL2:	
  3391  07C0                     PL6:	
  3392  07C0  01B0               	clrf	ADC_Sample@adsum	;volatile
  3393  07C1  01B1               	clrf	ADC_Sample@adsum+1	;volatile
  3394  07C2  01B2               	clrf	ADC_Sample@adsum+2	;volatile
  3395  07C3  01B3               	clrf	ADC_Sample@adsum+3	;volatile
  3396  07C4  01B4               	clrf	ADC_Sample@admin	;volatile
  3397  07C5  01B5               	clrf	ADC_Sample@admin+1	;volatile
  3398  07C6  01B6               	clrf	ADC_Sample@admax	;volatile
  3399  07C7  01B7               	clrf	ADC_Sample@admax+1	;volatile
  3400  07C8  0008               	return
  3401  07C9                     __end_ofPL6:	
  3402  07C9                     PL26:	
  3403  07C9  0839               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3404  07CA  00B7               	movwf	ADC_Sample@admax+1	;volatile
  3405  07CB  0838               	movf	ADC_Sample@ad_temp,w	;volatile
  3406  07CC  00B6               	movwf	ADC_Sample@admax	;volatile
  3407  07CD  0008               	return
  3408  07CE                     __end_ofPL26:	
  3409                           
  3410                           	psect	text18
  3411  048F                     __ptext18:	
  3412 ;; *************** function _Isr_Timer *****************
  3413 ;; Defined at:
  3414 ;;		line 385 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SC8F072_double_key\SC8F072_Pwm_Demo.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;		None
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;		None
  3419 ;; Return value:  Size  Location     Type
  3420 ;;                  1    wreg      void 
  3421 ;; Registers used:
  3422 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3423 ;; Tracked objects:
  3424 ;;		On entry : 0/0
  3425 ;;		On exit  : 100/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMMON   BANK0   BANK1
  3428 ;;      Params:         0       0       0
  3429 ;;      Locals:         0       0       0
  3430 ;;      Temps:          0       4       0
  3431 ;;      Totals:         0       4       0
  3432 ;;Total ram usage:        4 bytes
  3433 ;; Hardware stack levels used:    1
  3434 ;; Hardware stack levels required when called:    2
  3435 ;; This function calls:
  3436 ;;		_Charge_num
  3437 ;;		_Display
  3438 ;;		_Uncharge_num
  3439 ;;		i1_Set_PWM
  3440 ;; This function is called by:
  3441 ;;		Interrupt level 1
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           
  3446                           ;psect for function _Isr_Timer
  3447  048F                     _Isr_Timer:	
  3448                           
  3449                           ;SC8F072_Pwm_Demo.c: 387: if(RAIF)
  3450  048F  1D8D               	btfss	13,3	;volatile
  3451  0490  2CB5               	goto	i1l3553
  3452                           
  3453                           ;SC8F072_Pwm_Demo.c: 388: {
  3454                           ;SC8F072_Pwm_Demo.c: 389: if (!(PORTA & 0x20))
  3455  0491  1683               	bsf	3,5	;RP0=1, select bank1
  3456  0492  1A86               	btfsc	6,5	;volatile
  3457  0493  2CAB               	goto	i1l3545
  3458                           
  3459                           ;SC8F072_Pwm_Demo.c: 390: {
  3460                           ;SC8F072_Pwm_Demo.c: 391: Charge_num();
  3461  0494  2189               	fcall	_Charge_num
  3462                           
  3463                           ;SC8F072_Pwm_Demo.c: 392: Set_PWM(0, duty_steps[pwm_duty]);
  3464  0495  085F               	movf	_pwm_duty,w
  3465  0496  3E01               	addlw	low ((_duty_steps-__stringbase)| (0+32768))
  3466  0497  0084               	movwf	4
  3467  0498  200D               	fcall	stringdir
  3468  0499  00A0               	movwf	i1Set_PWM@duty
  3469  049A  3000               	movlw	0
  3470  049B  21AB               	fcall	i1_Set_PWM
  3471                           
  3472                           ;SC8F072_Pwm_Demo.c: 393: Set_PWM(1, duty_steps[5]);
  3473  049C  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  3474  049D  0084               	movwf	4
  3475  049E  200D               	fcall	stringdir
  3476  049F  1283               	bcf	3,5	;RP0=0, select bank0
  3477  04A0  00A0               	movwf	i1Set_PWM@duty
  3478  04A1  3001               	movlw	1
  3479  04A2  21AB               	fcall	i1_Set_PWM
  3480                           
  3481                           ;SC8F072_Pwm_Demo.c: 394: Set_PWM(2, duty_steps[5]);
  3482  04A3  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  3483  04A4  0084               	movwf	4
  3484  04A5  200D               	fcall	stringdir
  3485  04A6  1283               	bcf	3,5	;RP0=0, select bank0
  3486  04A7  00A0               	movwf	i1Set_PWM@duty
  3487  04A8  3002               	movlw	2
  3488  04A9  21AB               	fcall	i1_Set_PWM
  3489                           
  3490                           ;SC8F072_Pwm_Demo.c: 395: }
  3491  04AA  2CAC               	goto	i1l3547
  3492  04AB                     i1l3545:	
  3493                           
  3494                           ;SC8F072_Pwm_Demo.c: 396: else
  3495                           ;SC8F072_Pwm_Demo.c: 397: {
  3496                           ;SC8F072_Pwm_Demo.c: 398: Uncharge_num();
  3497  04AB  206E               	fcall	_Uncharge_num
  3498  04AC                     i1l3547:	
  3499                           
  3500                           ;SC8F072_Pwm_Demo.c: 399: }
  3501                           ;SC8F072_Pwm_Demo.c: 401: if(!(PORTA & 0x04))
  3502  04AC  1683               	bsf	3,5	;RP0=1, select bank1
  3503  04AD  1906               	btfsc	6,2	;volatile
  3504  04AE  2CB3               	goto	i1l3551
  3505                           
  3506                           ;SC8F072_Pwm_Demo.c: 402: {
  3507                           ;SC8F072_Pwm_Demo.c: 403: LED_delay=21;
  3508  04AF  3015               	movlw	21
  3509  04B0  1283               	bcf	3,5	;RP0=0, select bank0
  3510  04B1  00D6               	movwf	_LED_delay	;volatile
  3511  04B2  01D7               	clrf	_LED_delay+1	;volatile
  3512  04B3                     i1l3551:	
  3513                           
  3514                           ;SC8F072_Pwm_Demo.c: 404: }
  3515                           ;SC8F072_Pwm_Demo.c: 406: RAIF = 0;
  3516  04B3  1283               	bcf	3,5	;RP0=0, select bank0
  3517  04B4  118D               	bcf	13,3	;volatile
  3518  04B5                     i1l3553:	
  3519                           
  3520                           ;SC8F072_Pwm_Demo.c: 407: }
  3521                           ;SC8F072_Pwm_Demo.c: 409: if(RBIF)
  3522  04B5  1C0B               	btfss	11,0	;volatile
  3523  04B6  2CD6               	goto	i1l3569
  3524                           
  3525                           ;SC8F072_Pwm_Demo.c: 410: {
  3526                           ;SC8F072_Pwm_Demo.c: 411: RBIF = 0;
  3527  04B7  100B               	bcf	11,0	;volatile
  3528                           
  3529                           ;SC8F072_Pwm_Demo.c: 416: if (PORTB & 0x20)
  3530  04B8  1E86               	btfss	6,5	;volatile
  3531  04B9  2CD6               	goto	i1l3569
  3532                           
  3533                           ;SC8F072_Pwm_Demo.c: 417: {
  3534                           ;SC8F072_Pwm_Demo.c: 418: if (long_press_counter >= 1000)
  3535  04BA  3003               	movlw	3
  3536  04BB  0259               	subwf	_long_press_counter+1,w	;volatile
  3537  04BC  30E8               	movlw	232
  3538  04BD  1903               	skipnz
  3539  04BE  0258               	subwf	_long_press_counter,w	;volatile
  3540  04BF  1C03               	skipc
  3541  04C0  2CC4               	goto	i1l3561
  3542                           
  3543                           ;SC8F072_Pwm_Demo.c: 419: {
  3544                           ;SC8F072_Pwm_Demo.c: 420: button_lflag = 1;
  3545  04C1  3001               	movlw	1
  3546  04C2  00DC               	movwf	_button_lflag	;volatile
  3547                           
  3548                           ;SC8F072_Pwm_Demo.c: 421: }
  3549  04C3  2CD4               	goto	i1l3567
  3550  04C4                     i1l3561:	
  3551                           
  3552                           ;SC8F072_Pwm_Demo.c: 422: else if(long_press_counter<=1000 && long_press_counter>=50)
  3553  04C4  3003               	movlw	3
  3554  04C5  0259               	subwf	_long_press_counter+1,w	;volatile
  3555  04C6  30E9               	movlw	233
  3556  04C7  1903               	skipnz
  3557  04C8  0258               	subwf	_long_press_counter,w	;volatile
  3558  04C9  1803               	skipnc
  3559  04CA  2CD4               	goto	i1l3567
  3560  04CB  3000               	movlw	0
  3561  04CC  0259               	subwf	_long_press_counter+1,w	;volatile
  3562  04CD  3032               	movlw	50
  3563  04CE  1903               	skipnz
  3564  04CF  0258               	subwf	_long_press_counter,w	;volatile
  3565  04D0  1C03               	skipc
  3566  04D1  2CD4               	goto	i1l3567
  3567                           
  3568                           ;SC8F072_Pwm_Demo.c: 423: {
  3569                           ;SC8F072_Pwm_Demo.c: 424: button_sflag = 1;
  3570  04D2  3001               	movlw	1
  3571  04D3  00DD               	movwf	_button_sflag	;volatile
  3572  04D4                     i1l3567:	
  3573                           
  3574                           ;SC8F072_Pwm_Demo.c: 425: }
  3575                           ;SC8F072_Pwm_Demo.c: 426: long_press_counter = 0;
  3576  04D4  01D8               	clrf	_long_press_counter	;volatile
  3577  04D5  01D9               	clrf	_long_press_counter+1	;volatile
  3578  04D6                     i1l3569:	
  3579                           
  3580                           ;SC8F072_Pwm_Demo.c: 427: }
  3581                           ;SC8F072_Pwm_Demo.c: 429: }
  3582                           ;SC8F072_Pwm_Demo.c: 430: if(T0IF)
  3583  04D6  1D0B               	btfss	11,2	;volatile
  3584  04D7  2CF2               	goto	i1l3585
  3585                           
  3586                           ;SC8F072_Pwm_Demo.c: 431: {
  3587                           ;SC8F072_Pwm_Demo.c: 432: T0IF = 0;
  3588  04D8  110B               	bcf	11,2	;volatile
  3589                           
  3590                           ;SC8F072_Pwm_Demo.c: 433: if(T_flag)
  3591  04D9  085B               	movf	_T_flag,w	;volatile
  3592  04DA  1903               	btfsc	3,2
  3593  04DB  2CDD               	goto	i1l3577
  3594                           
  3595                           ;SC8F072_Pwm_Demo.c: 434: {
  3596                           ;SC8F072_Pwm_Demo.c: 435: Display();
  3597  04DC  20C8               	fcall	_Display
  3598  04DD                     i1l3577:	
  3599                           
  3600                           ;SC8F072_Pwm_Demo.c: 436: }
  3601                           ;SC8F072_Pwm_Demo.c: 437: TMR0 += 6;
  3602  04DD  3006               	movlw	6
  3603  04DE  1683               	bsf	3,5	;RP0=1, select bank1
  3604  04DF  0781               	addwf	1,f	;volatile
  3605                           
  3606                           ;SC8F072_Pwm_Demo.c: 440: if(ADC_delay > 0)
  3607  04E0  083D               	movf	_ADC_delay^(0+128),w	;volatile
  3608  04E1  043E               	iorwf	(_ADC_delay+1)^(0+128),w	;volatile
  3609  04E2  1903               	btfsc	3,2
  3610  04E3  2CEB               	goto	i1l3583
  3611                           
  3612                           ;SC8F072_Pwm_Demo.c: 441: {
  3613                           ;SC8F072_Pwm_Demo.c: 442: ADC_delay--;
  3614  04E4  3001               	movlw	1
  3615  04E5  02BD               	subwf	_ADC_delay^(0+128),f	;volatile
  3616  04E6  3000               	movlw	0
  3617  04E7  1C03               	skipc
  3618  04E8  03BE               	decf	(_ADC_delay+1)^(0+128),f	;volatile
  3619  04E9  02BE               	subwf	(_ADC_delay+1)^(0+128),f	;volatile
  3620                           
  3621                           ;SC8F072_Pwm_Demo.c: 443: }
  3622  04EA  2CF2               	goto	i1l3585
  3623  04EB                     i1l3583:	
  3624                           
  3625                           ;SC8F072_Pwm_Demo.c: 444: else
  3626                           ;SC8F072_Pwm_Demo.c: 445: {
  3627                           ;SC8F072_Pwm_Demo.c: 446: ADC_delay=1000;
  3628  04EB  30E8               	movlw	232
  3629  04EC  00BD               	movwf	_ADC_delay^(0+128)	;volatile
  3630  04ED  3003               	movlw	3
  3631  04EE  00BE               	movwf	(_ADC_delay^(0+128)+1)	;volatile
  3632                           
  3633                           ;SC8F072_Pwm_Demo.c: 447: ADC_Flag=1;
  3634  04EF  3001               	movlw	1
  3635  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  3636  04F1  00E0               	movwf	_ADC_Flag	;volatile
  3637  04F2                     i1l3585:	
  3638                           
  3639                           ;SC8F072_Pwm_Demo.c: 448: }
  3640                           ;SC8F072_Pwm_Demo.c: 449: }
  3641                           ;SC8F072_Pwm_Demo.c: 450: if(TMR2IF)
  3642  04F2  1283               	bcf	3,5	;RP0=0, select bank0
  3643  04F3  1C8D               	btfss	13,1	;volatile
  3644  04F4  2D31               	goto	i1l750
  3645                           
  3646                           ;SC8F072_Pwm_Demo.c: 451: {
  3647                           ;SC8F072_Pwm_Demo.c: 452: TMR2IF = 0;
  3648  04F5  108D               	bcf	13,1	;volatile
  3649                           
  3650                           ;SC8F072_Pwm_Demo.c: 453: if(LED_delay>1)
  3651  04F6  3000               	movlw	0
  3652  04F7  0257               	subwf	_LED_delay+1,w	;volatile
  3653  04F8  3002               	movlw	2
  3654  04F9  1903               	skipnz
  3655  04FA  0256               	subwf	_LED_delay,w	;volatile
  3656  04FB  1C03               	skipc
  3657  04FC  2D04               	goto	i1l3593
  3658                           
  3659                           ;SC8F072_Pwm_Demo.c: 454: {
  3660                           ;SC8F072_Pwm_Demo.c: 455: LED_delay--;
  3661  04FD  3001               	movlw	1
  3662  04FE  02D6               	subwf	_LED_delay,f	;volatile
  3663  04FF  3000               	movlw	0
  3664  0500  1C03               	skipc
  3665  0501  03D7               	decf	_LED_delay+1,f	;volatile
  3666  0502  02D7               	subwf	_LED_delay+1,f	;volatile
  3667                           
  3668                           ;SC8F072_Pwm_Demo.c: 456: }
  3669  0503  2D0F               	goto	i1l3601
  3670  0504                     i1l3593:	
  3671                           
  3672                           ;SC8F072_Pwm_Demo.c: 457: else if(LED_delay==1)
  3673  0504  0356               	decf	_LED_delay,w	;volatile
  3674  0505  0457               	iorwf	_LED_delay+1,w	;volatile
  3675  0506  1D03               	btfss	3,2
  3676  0507  2D0F               	goto	i1l3601
  3677                           
  3678                           ;SC8F072_Pwm_Demo.c: 458: {
  3679                           ;SC8F072_Pwm_Demo.c: 459: LED_delay=0;
  3680  0508  01D6               	clrf	_LED_delay	;volatile
  3681  0509  01D7               	clrf	_LED_delay+1	;volatile
  3682                           
  3683                           ;SC8F072_Pwm_Demo.c: 460: if (!(PORTB & 0x20))
  3684  050A  1A86               	btfsc	6,5	;volatile
  3685  050B  2D0F               	goto	i1l3601
  3686                           
  3687                           ;SC8F072_Pwm_Demo.c: 461: {
  3688                           ;SC8F072_Pwm_Demo.c: 462: LED_flag = 1;
  3689  050C  3001               	movlw	1
  3690  050D  1683               	bsf	3,5	;RP0=1, select bank1
  3691  050E  00C1               	movwf	_LED_flag^(0+128)	;volatile
  3692  050F                     i1l3601:	
  3693                           
  3694                           ;SC8F072_Pwm_Demo.c: 463: }
  3695                           ;SC8F072_Pwm_Demo.c: 464: }
  3696                           ;SC8F072_Pwm_Demo.c: 467: if (!(PORTB & 0x20))
  3697  050F  1283               	bcf	3,5	;RP0=0, select bank0
  3698  0510  1A86               	btfsc	6,5	;volatile
  3699  0511  2D1F               	goto	i1l3611
  3700                           
  3701                           ;SC8F072_Pwm_Demo.c: 468: {
  3702                           ;SC8F072_Pwm_Demo.c: 469: if (debounce_counter < 15) debounce_counter++;
  3703  0512  300F               	movlw	15
  3704  0513  025E               	subwf	_debounce_counter,w	;volatile
  3705  0514  1803               	skipnc
  3706  0515  2D17               	goto	i1l3607
  3707  0516  0ADE               	incf	_debounce_counter,f	;volatile
  3708  0517                     i1l3607:	
  3709                           
  3710                           ;SC8F072_Pwm_Demo.c: 470: if (debounce_counter == 15) long_press_counter++;
  3711  0517  300F               	movlw	15
  3712  0518  065E               	xorwf	_debounce_counter,w	;volatile
  3713  0519  1D03               	btfss	3,2
  3714  051A  2D20               	goto	i1l3613
  3715  051B  0AD8               	incf	_long_press_counter,f	;volatile
  3716  051C  1903               	skipnz
  3717  051D  0AD9               	incf	_long_press_counter+1,f	;volatile
  3718  051E  2D20               	goto	i1l3613
  3719  051F                     i1l3611:	
  3720                           
  3721                           ;SC8F072_Pwm_Demo.c: 472: else
  3722                           ;SC8F072_Pwm_Demo.c: 473: {
  3723                           ;SC8F072_Pwm_Demo.c: 474: debounce_counter = 0;
  3724  051F  01DE               	clrf	_debounce_counter	;volatile
  3725  0520                     i1l3613:	
  3726                           
  3727                           ;SC8F072_Pwm_Demo.c: 475: }
  3728                           ;SC8F072_Pwm_Demo.c: 478: if(Time_delay > 0)
  3729  0520  1683               	bsf	3,5	;RP0=1, select bank1
  3730  0521  083B               	movf	_Time_delay^(0+128),w	;volatile
  3731  0522  043C               	iorwf	(_Time_delay+1)^(0+128),w	;volatile
  3732  0523  1903               	btfsc	3,2
  3733  0524  2D2C               	goto	i1l746
  3734                           
  3735                           ;SC8F072_Pwm_Demo.c: 479: {
  3736                           ;SC8F072_Pwm_Demo.c: 480: Time_delay--;
  3737  0525  3001               	movlw	1
  3738  0526  02BB               	subwf	_Time_delay^(0+128),f	;volatile
  3739  0527  3000               	movlw	0
  3740  0528  1C03               	skipc
  3741  0529  03BC               	decf	(_Time_delay+1)^(0+128),f	;volatile
  3742  052A  02BC               	subwf	(_Time_delay+1)^(0+128),f	;volatile
  3743                           
  3744                           ;SC8F072_Pwm_Demo.c: 481: }
  3745  052B  2D31               	goto	i1l750
  3746  052C                     i1l746:	
  3747                           
  3748                           ;SC8F072_Pwm_Demo.c: 482: else
  3749                           ;SC8F072_Pwm_Demo.c: 483: {
  3750                           ;SC8F072_Pwm_Demo.c: 484: if (!(PORTA & 0x20))
  3751  052C  1A86               	btfsc	6,5	;volatile
  3752  052D  2D30               	goto	i1l3619
  3753                           
  3754                           ;SC8F072_Pwm_Demo.c: 485: {
  3755                           ;SC8F072_Pwm_Demo.c: 486: Charge_num();
  3756  052E  2189               	fcall	_Charge_num
  3757                           
  3758                           ;SC8F072_Pwm_Demo.c: 487: }
  3759  052F  2D31               	goto	i1l750
  3760  0530                     i1l3619:	
  3761                           
  3762                           ;SC8F072_Pwm_Demo.c: 488: else
  3763                           ;SC8F072_Pwm_Demo.c: 489: {
  3764                           ;SC8F072_Pwm_Demo.c: 490: Uncharge_num();
  3765  0530  206E               	fcall	_Uncharge_num
  3766  0531                     i1l750:	
  3767  0531  1283               	bcf	3,5	;RP0=0, select bank0
  3768  0532  0827               	movf	??_Isr_Timer+3,w
  3769  0533  00FF               	movwf	127
  3770  0534  0826               	movf	??_Isr_Timer+2,w
  3771  0535  008A               	movwf	10
  3772  0536  0825               	movf	??_Isr_Timer+1,w
  3773  0537  0084               	movwf	4
  3774  0538  0E24               	swapf	??_Isr_Timer^0,w
  3775  0539  0083               	movwf	3
  3776  053A  0EFE               	swapf	126,f
  3777  053B  0E7E               	swapf	126,w
  3778  053C  0009               	retfie
  3779  053D                     __end_of_Isr_Timer:	
  3780                           
  3781                           	psect	intentry
  3782  0000                     __pintentry:	
  3783                           ;incstack = 0
  3784                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3785                           
  3786  0000                     interrupt_function:	
  3787  007E                     saved_w	set	btemp
  3788  0000  00FE               	movwf	btemp
  3789  0001  0E03               	swapf	3,w
  3790  0002  1283               	bcf	3,5	;RP0=0, select bank0
  3791  0003  00A4               	movwf	??_Isr_Timer
  3792  0004  0804               	movf	4,w
  3793  0005  00A5               	movwf	??_Isr_Timer+1
  3794  0006  080A               	movf	10,w
  3795  0007  00A6               	movwf	??_Isr_Timer+2
  3796  0008  087F               	movf	btemp+1,w
  3797  0009  00A7               	movwf	??_Isr_Timer+3
  3798  000A  2C8F               	ljmp	_Isr_Timer
  3799                           
  3800                           	psect	text19
  3801  01AB                     __ptext19:	
  3802 ;; *************** function i1_Set_PWM *****************
  3803 ;; Defined at:
  3804 ;;		line 183 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SC8F072_double_key\SC8F072_Pwm_Demo.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;  channel         1    wreg     unsigned char 
  3807 ;;  duty            1    0[BANK0 ] unsigned char 
  3808 ;; Auto vars:     Size  Location     Type
  3809 ;;  channel         1    1[BANK0 ] unsigned char 
  3810 ;;  Set_PWM         2    2[BANK0 ] unsigned short 
  3811 ;; Return value:  Size  Location     Type
  3812 ;;                  1    wreg      void 
  3813 ;; Registers used:
  3814 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3815 ;; Tracked objects:
  3816 ;;		On entry : 100/0
  3817 ;;		On exit  : 0/0
  3818 ;;		Unchanged: 0/0
  3819 ;; Data sizes:     COMMON   BANK0   BANK1
  3820 ;;      Params:         0       1       0
  3821 ;;      Locals:         0       3       0
  3822 ;;      Temps:          0       0       0
  3823 ;;      Totals:         0       4       0
  3824 ;;Total ram usage:        4 bytes
  3825 ;; Hardware stack levels used:    1
  3826 ;; Hardware stack levels required when called:    1
  3827 ;; This function calls:
  3828 ;;		i1___awdiv
  3829 ;;		i1___wmul
  3830 ;; This function is called by:
  3831 ;;		_Isr_Timer
  3832 ;; This function uses a non-reentrant model
  3833 ;;
  3834                           
  3835                           
  3836                           ;psect for function i1_Set_PWM
  3837  01AB                     i1_Set_PWM:	
  3838                           
  3839                           ;incstack = 0
  3840                           ; Regs used in i1_Set_PWM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3841                           ;i1Set_PWM@channel stored from wreg
  3842  01AB  00A1               	movwf	i1Set_PWM@channel
  3843                           
  3844                           ;SC8F072_Pwm_Demo.c: 185: unsigned short pulse_width = (duty * 255) / 100;
  3845  01AC  3064               	movlw	100
  3846  01AD  00F6               	movwf	i1___awdiv@divisor
  3847  01AE  01F7               	clrf	i1___awdiv@divisor+1
  3848  01AF  0820               	movf	i1Set_PWM@duty,w
  3849  01B0  00F0               	movwf	i1___wmul@multiplier
  3850  01B1  30FF               	movlw	255
  3851  01B2  01F1               	clrf	i1___wmul@multiplier+1
  3852  01B3  00F2               	movwf	i1___wmul@multiplicand
  3853  01B4  01F3               	clrf	i1___wmul@multiplicand+1
  3854  01B5  2096               	fcall	i1___wmul
  3855  01B6  0871               	movf	?i1___wmul+1,w
  3856  01B7  00F9               	movwf	i1___awdiv@dividend+1
  3857  01B8  0870               	movf	?i1___wmul,w
  3858  01B9  00F8               	movwf	i1___awdiv@dividend
  3859  01BA  22C6               	fcall	i1___awdiv
  3860  01BB  0877               	movf	?i1___awdiv+1,w
  3861  01BC  00A3               	movwf	i1Set_PWM@pulse_width+1
  3862  01BD  0876               	movf	?i1___awdiv,w
  3863  01BE  00A2               	movwf	i1Set_PWM@pulse_width
  3864                           
  3865                           ;SC8F072_Pwm_Demo.c: 186: switch (channel)
  3866  01BF  29D1               	goto	i1l3515
  3867  01C0                     i1l3503:	
  3868                           
  3869                           ;SC8F072_Pwm_Demo.c: 189: PWMD0L = pulse_width & 0xFF;
  3870  01C0  0822               	movf	i1Set_PWM@pulse_width,w
  3871  01C1  0099               	movwf	25	;volatile
  3872                           
  3873                           ;SC8F072_Pwm_Demo.c: 191: break;
  3874  01C2  0008               	return
  3875  01C3                     i1l3505:	
  3876                           
  3877                           ;SC8F072_Pwm_Demo.c: 193: PWMD1L = pulse_width & 0xFF;
  3878  01C3  0822               	movf	i1Set_PWM@pulse_width,w
  3879  01C4  009A               	movwf	26	;volatile
  3880                           
  3881                           ;SC8F072_Pwm_Demo.c: 195: break;
  3882  01C5  0008               	return
  3883  01C6                     i1l3507:	
  3884                           
  3885                           ;SC8F072_Pwm_Demo.c: 197: PWMD2L = pulse_width & 0xFF;
  3886  01C6  0822               	movf	i1Set_PWM@pulse_width,w
  3887  01C7  1683               	bsf	3,5	;RP0=1, select bank1
  3888  01C8  009B               	movwf	27	;volatile
  3889                           
  3890                           ;SC8F072_Pwm_Demo.c: 199: break;
  3891  01C9  0008               	return
  3892  01CA                     i1l3509:	
  3893                           
  3894                           ;SC8F072_Pwm_Demo.c: 201: PWMD3L = pulse_width & 0xFF;
  3895  01CA  0822               	movf	i1Set_PWM@pulse_width,w
  3896  01CB  1683               	bsf	3,5	;RP0=1, select bank1
  3897  01CC  009C               	movwf	28	;volatile
  3898                           
  3899                           ;SC8F072_Pwm_Demo.c: 203: break;
  3900  01CD  0008               	return
  3901  01CE                     i1l3511:	
  3902                           
  3903                           ;SC8F072_Pwm_Demo.c: 205: PWMD4L = pulse_width & 0xFF;
  3904  01CE  0822               	movf	i1Set_PWM@pulse_width,w
  3905  01CF  009B               	movwf	27	;volatile
  3906                           
  3907                           ;SC8F072_Pwm_Demo.c: 207: break;
  3908  01D0  0008               	return
  3909  01D1                     i1l3515:	
  3910  01D1  0821               	movf	i1Set_PWM@channel,w
  3911                           
  3912                           ; Switch size 1, requested type "space"
  3913                           ; Number of cases is 5, Range of values is 0 to 4
  3914                           ; switch strategies available:
  3915                           ; Name         Instructions Cycles
  3916                           ; direct_byte           11     6 (fixed)
  3917                           ; simple_byte           16     9 (average)
  3918                           ; jumptable            260     6 (fixed)
  3919                           ;	Chosen strategy is direct_byte
  3920  01D2  0084               	movwf	4
  3921  01D3  3005               	movlw	5
  3922  01D4  0204               	subwf	4,w
  3923  01D5  1803               	skipnc
  3924  01D6  0008               	return
  3925  01D7  3000               	movlw	high i1S4089
  3926  01D8  008A               	movwf	10
  3927  01D9  3023               	movlw	low i1S4089
  3928  01DA  0704               	addwf	4,w
  3929  01DB  0082               	movwf	2
  3930  01DC  0008               	return
  3931  01DD                     __end_ofi1_Set_PWM:	
  3932                           
  3933                           	psect	swtext3
  3934  0023                     __pswtext3:	
  3935  0023                     i1S4089:	
  3936  0023  29C0               	ljmp	i1l3503
  3937  0024  29C3               	ljmp	i1l3505
  3938  0025  29C6               	ljmp	i1l3507
  3939  0026  29CA               	ljmp	i1l3509
  3940  0027  29CE               	ljmp	i1l3511
  3941                           
  3942                           	psect	text20
  3943  0096                     __ptext20:	
  3944 ;; *************** function i1___wmul *****************
  3945 ;; Defined at:
  3946 ;;		line 15 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\Umul16.c"
  3947 ;; Parameters:    Size  Location     Type
  3948 ;;  multiplier      2    0[COMMON] unsigned int 
  3949 ;;  multiplicand    2    2[COMMON] unsigned int 
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;  __wmul          2    4[COMMON] unsigned int 
  3952 ;; Return value:  Size  Location     Type
  3953 ;;                  2    0[COMMON] unsigned int 
  3954 ;; Registers used:
  3955 ;;		wreg, status,2, status,0
  3956 ;; Tracked objects:
  3957 ;;		On entry : 100/0
  3958 ;;		On exit  : 100/0
  3959 ;;		Unchanged: 100/0
  3960 ;; Data sizes:     COMMON   BANK0   BANK1
  3961 ;;      Params:         4       0       0
  3962 ;;      Locals:         2       0       0
  3963 ;;      Temps:          0       0       0
  3964 ;;      Totals:         6       0       0
  3965 ;;Total ram usage:        6 bytes
  3966 ;; Hardware stack levels used:    1
  3967 ;; This function calls:
  3968 ;;		Nothing
  3969 ;; This function is called by:
  3970 ;;		i1_Set_PWM
  3971 ;; This function uses a non-reentrant model
  3972 ;;
  3973                           
  3974                           
  3975                           ;psect for function i1___wmul
  3976  0096                     i1___wmul:	
  3977                           
  3978                           ;incstack = 0
  3979                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  3980  0096  01F4               	clrf	i1___wmul@product
  3981  0097  01F5               	clrf	i1___wmul@product+1
  3982  0098                     i1l3259:	
  3983  0098  1C70               	btfss	i1___wmul@multiplier,0
  3984  0099  28A0               	goto	i1l3263
  3985  009A  0872               	movf	i1___wmul@multiplicand,w
  3986  009B  07F4               	addwf	i1___wmul@product,f
  3987  009C  1803               	skipnc
  3988  009D  0AF5               	incf	i1___wmul@product+1,f
  3989  009E  0873               	movf	i1___wmul@multiplicand+1,w
  3990  009F  07F5               	addwf	i1___wmul@product+1,f
  3991  00A0                     i1l3263:	
  3992  00A0  1003               	clrc
  3993  00A1  0DF2               	rlf	i1___wmul@multiplicand,f
  3994  00A2  0DF3               	rlf	i1___wmul@multiplicand+1,f
  3995  00A3  1003               	clrc
  3996  00A4  0CF1               	rrf	i1___wmul@multiplier+1,f
  3997  00A5  0CF0               	rrf	i1___wmul@multiplier,f
  3998  00A6  0870               	movf	i1___wmul@multiplier,w
  3999  00A7  0471               	iorwf	i1___wmul@multiplier+1,w
  4000  00A8  1D03               	btfss	3,2
  4001  00A9  2898               	goto	i1l3259
  4002  00AA  0875               	movf	i1___wmul@product+1,w
  4003  00AB  00F1               	movwf	?i1___wmul+1
  4004  00AC  0874               	movf	i1___wmul@product,w
  4005  00AD  00F0               	movwf	?i1___wmul
  4006  00AE  0008               	return
  4007  00AF                     __end_ofi1___wmul:	
  4008                           
  4009                           	psect	text21
  4010  02C6                     __ptext21:	
  4011 ;; *************** function i1___awdiv *****************
  4012 ;; Defined at:
  4013 ;;		line 6 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\awdiv.c"
  4014 ;; Parameters:    Size  Location     Type
  4015 ;;  divisor         2    6[COMMON] int 
  4016 ;;  dividend        2    8[COMMON] int 
  4017 ;; Auto vars:     Size  Location     Type
  4018 ;;  __awdiv         2   12[COMMON] int 
  4019 ;;  __awdiv         1   11[COMMON] unsigned char 
  4020 ;;  __awdiv         1   10[COMMON] unsigned char 
  4021 ;; Return value:  Size  Location     Type
  4022 ;;                  2    6[COMMON] int 
  4023 ;; Registers used:
  4024 ;;		wreg, status,2, status,0
  4025 ;; Tracked objects:
  4026 ;;		On entry : 100/0
  4027 ;;		On exit  : 100/0
  4028 ;;		Unchanged: 100/0
  4029 ;; Data sizes:     COMMON   BANK0   BANK1
  4030 ;;      Params:         4       0       0
  4031 ;;      Locals:         4       0       0
  4032 ;;      Temps:          0       0       0
  4033 ;;      Totals:         8       0       0
  4034 ;;Total ram usage:        8 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; This function calls:
  4037 ;;		Nothing
  4038 ;; This function is called by:
  4039 ;;		i1_Set_PWM
  4040 ;; This function uses a non-reentrant model
  4041 ;;
  4042                           
  4043                           
  4044                           ;psect for function i1___awdiv
  4045  02C6                     i1___awdiv:	
  4046                           
  4047                           ;incstack = 0
  4048                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
  4049  02C6  01FB               	clrf	i1___awdiv@sign
  4050  02C7  1FF7               	btfss	i1___awdiv@divisor+1,7
  4051  02C8  2AD0               	goto	i1l3281
  4052  02C9  09F6               	comf	i1___awdiv@divisor,f
  4053  02CA  09F7               	comf	i1___awdiv@divisor+1,f
  4054  02CB  0AF6               	incf	i1___awdiv@divisor,f
  4055  02CC  1903               	skipnz
  4056  02CD  0AF7               	incf	i1___awdiv@divisor+1,f
  4057  02CE  01FB               	clrf	i1___awdiv@sign
  4058  02CF  0AFB               	incf	i1___awdiv@sign,f
  4059  02D0                     i1l3281:	
  4060  02D0  1FF9               	btfss	i1___awdiv@dividend+1,7
  4061  02D1  2AD9               	goto	i1l3287
  4062  02D2  09F8               	comf	i1___awdiv@dividend,f
  4063  02D3  09F9               	comf	i1___awdiv@dividend+1,f
  4064  02D4  0AF8               	incf	i1___awdiv@dividend,f
  4065  02D5  1903               	skipnz
  4066  02D6  0AF9               	incf	i1___awdiv@dividend+1,f
  4067  02D7  3001               	movlw	1
  4068  02D8  06FB               	xorwf	i1___awdiv@sign,f
  4069  02D9                     i1l3287:	
  4070  02D9  01FC               	clrf	i1___awdiv@quotient
  4071  02DA  01FD               	clrf	i1___awdiv@quotient+1
  4072  02DB  0876               	movf	i1___awdiv@divisor,w
  4073  02DC  0477               	iorwf	i1___awdiv@divisor+1,w
  4074  02DD  1903               	btfsc	3,2
  4075  02DE  2AFE               	goto	i1l3309
  4076  02DF  01FA               	clrf	i1___awdiv@counter
  4077  02E0                     L8:	
  4078  02E0  0AFA               	incf	i1___awdiv@counter,f
  4079  02E1  1BF7               	btfsc	i1___awdiv@divisor+1,7
  4080  02E2  2AE7               	goto	i1l3297
  4081  02E3  1003               	clrc
  4082  02E4  0DF6               	rlf	i1___awdiv@divisor,f
  4083  02E5  0DF7               	rlf	i1___awdiv@divisor+1,f
  4084  02E6  2AE0               	goto	L8
  4085  02E7                     i1l3297:	
  4086  02E7  1003               	clrc
  4087  02E8  0DFC               	rlf	i1___awdiv@quotient,f
  4088  02E9  0DFD               	rlf	i1___awdiv@quotient+1,f
  4089  02EA  0877               	movf	i1___awdiv@divisor+1,w
  4090  02EB  0279               	subwf	i1___awdiv@dividend+1,w
  4091  02EC  1D03               	skipz
  4092  02ED  2AF0               	goto	u234_25
  4093  02EE  0876               	movf	i1___awdiv@divisor,w
  4094  02EF  0278               	subwf	i1___awdiv@dividend,w
  4095  02F0                     u234_25:	
  4096  02F0  1C03               	skipc
  4097  02F1  2AFA               	goto	L9
  4098  02F2  0876               	movf	i1___awdiv@divisor,w
  4099  02F3  02F8               	subwf	i1___awdiv@dividend,f
  4100  02F4  0877               	movf	i1___awdiv@divisor+1,w
  4101  02F5  1C03               	skipc
  4102  02F6  03F9               	decf	i1___awdiv@dividend+1,f
  4103  02F7  02F9               	subwf	i1___awdiv@dividend+1,f
  4104  02F8  147C               	bsf	i1___awdiv@quotient,0
  4105  02F9  1003               	clrc
  4106  02FA                     L9:	
  4107  02FA  0CF7               	rrf	i1___awdiv@divisor+1,f
  4108  02FB  0CF6               	rrf	i1___awdiv@divisor,f
  4109  02FC  0BFA               	decfsz	i1___awdiv@counter,f
  4110  02FD  2AE7               	goto	i1l3297
  4111  02FE                     i1l3309:	
  4112  02FE  087B               	movf	i1___awdiv@sign,w
  4113  02FF  1903               	btfsc	3,2
  4114  0300  2B06               	goto	i1l3313
  4115  0301  09FC               	comf	i1___awdiv@quotient,f
  4116  0302  09FD               	comf	i1___awdiv@quotient+1,f
  4117  0303  0AFC               	incf	i1___awdiv@quotient,f
  4118  0304  1903               	skipnz
  4119  0305  0AFD               	incf	i1___awdiv@quotient+1,f
  4120  0306                     i1l3313:	
  4121  0306  087D               	movf	i1___awdiv@quotient+1,w
  4122  0307  00F7               	movwf	?i1___awdiv+1
  4123  0308  087C               	movf	i1___awdiv@quotient,w
  4124  0309  00F6               	movwf	?i1___awdiv
  4125  030A  0008               	return
  4126  030B                     __end_ofi1___awdiv:	
  4127                           
  4128                           	psect	text22
  4129  006E                     __ptext22:	
  4130 ;; *************** function _Uncharge_num *****************
  4131 ;; Defined at:
  4132 ;;		line 25 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SC8F072_double_key\LED_188.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;		None
  4135 ;; Auto vars:     Size  Location     Type
  4136 ;;  hundred         1    9[COMMON] unsigned char 
  4137 ;; Return value:  Size  Location     Type
  4138 ;;                  1    wreg      void 
  4139 ;; Registers used:
  4140 ;;		wreg, status,2, status,0, pclath, cstack
  4141 ;; Tracked objects:
  4142 ;;		On entry : 100/100
  4143 ;;		On exit  : 100/0
  4144 ;;		Unchanged: 0/0
  4145 ;; Data sizes:     COMMON   BANK0   BANK1
  4146 ;;      Params:         0       0       0
  4147 ;;      Locals:         1       0       0
  4148 ;;      Temps:          0       0       0
  4149 ;;      Totals:         1       0       0
  4150 ;;Total ram usage:        1 bytes
  4151 ;; Hardware stack levels used:    1
  4152 ;; Hardware stack levels required when called:    1
  4153 ;; This function calls:
  4154 ;;		___lbdiv
  4155 ;;		___lbmod
  4156 ;; This function is called by:
  4157 ;;		_Isr_Timer
  4158 ;; This function uses a non-reentrant model
  4159 ;;
  4160                           
  4161                           
  4162                           ;psect for function _Uncharge_num
  4163  006E                     _Uncharge_num:	
  4164                           
  4165                           ;LED_188.c: 27: bool hundred = (bool)(power_percent / 100);
  4166                           
  4167                           ;incstack = 0
  4168                           ; Regs used in _Uncharge_num: [wreg+status,2+status,0+pclath+cstack]
  4169  006E  21A6               	fcall	PL22	;call to abstracted procedure
  4170  006F  20E2               	fcall	___lbdiv
  4171  0070  00F9               	movwf	Uncharge_num@hundred
  4172                           
  4173                           ;LED_188.c: 28: tens = (unsigned char)((power_percent % 100) / 10);
  4174  0071  219B               	fcall	PL16	;call to abstracted procedure
  4175  0072  20FD               	fcall	___lbmod
  4176  0073  20E2               	fcall	___lbdiv
  4177                           
  4178                           ;LED_188.c: 29: unit = (unsigned char)(power_percent % 10);
  4179  0074  21A1               	fcall	PL20	;call to abstracted procedure
  4180  0075  20FD               	fcall	___lbmod
  4181  0076  00E3               	movwf	_unit	;volatile
  4182                           
  4183                           ;LED_188.c: 30: if(hundred)
  4184  0077  0879               	movf	Uncharge_num@hundred,w
  4185  0078  1903               	btfsc	3,2
  4186  0079  287D               	goto	i1l3465
  4187                           
  4188                           ;LED_188.c: 31: {
  4189                           ;LED_188.c: 32: hundreds = 3;
  4190  007A  3003               	movlw	3
  4191  007B  00E5               	movwf	_hundreds	;volatile
  4192                           
  4193                           ;LED_188.c: 33: }
  4194  007C  0008               	return
  4195  007D                     i1l3465:	
  4196                           
  4197                           ;LED_188.c: 34: else
  4198                           ;LED_188.c: 35: {
  4199                           ;LED_188.c: 36: hundreds = 1;
  4200  007D  3001               	movlw	1
  4201  007E  00E5               	movwf	_hundreds	;volatile
  4202  007F  0008               	return
  4203  0080                     __end_of_Uncharge_num:	
  4204                           
  4205                           	psect	text23
  4206  00C8                     __ptext23:	
  4207 ;; *************** function _Display *****************
  4208 ;; Defined at:
  4209 ;;		line 170 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SC8F072_double_key\LED_188.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;		None
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;		None
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  1    wreg      void 
  4216 ;; Registers used:
  4217 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4218 ;; Tracked objects:
  4219 ;;		On entry : 100/0
  4220 ;;		On exit  : 100/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMMON   BANK0   BANK1
  4223 ;;      Params:         0       0       0
  4224 ;;      Locals:         0       0       0
  4225 ;;      Temps:          0       0       0
  4226 ;;      Totals:         0       0       0
  4227 ;;Total ram usage:        0 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    1
  4230 ;; This function calls:
  4231 ;;		_Display_Scan1
  4232 ;;		_Display_Scan2
  4233 ;;		_Display_Scan3
  4234 ;;		_Display_Scan4
  4235 ;;		_Display_Scan5
  4236 ;;		i1_Set_AllPin_INPUT
  4237 ;; This function is called by:
  4238 ;;		_Isr_Timer
  4239 ;; This function uses a non-reentrant model
  4240 ;;
  4241                           
  4242                           
  4243                           ;psect for function _Display
  4244  00C8                     _Display:	
  4245                           
  4246                           ;LED_188.c: 172: static unsigned char scan_cnt;
  4247                           ;LED_188.c: 173: Set_AllPin_INPUT();
  4248                           
  4249                           ;incstack = 0
  4250                           ; Regs used in _Display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4251  00C8  2029               	fcall	i1_Set_AllPin_INPUT
  4252                           
  4253                           ;LED_188.c: 175: switch(scan_cnt)
  4254  00C9  28D6               	goto	i1l3493
  4255  00CA                     i1l3469:	
  4256  00CA  2119               	fcall	_Display_Scan1
  4257  00CB                     i1l3471:	
  4258  00CB  0ADA               	incf	Display@scan_cnt,f
  4259  00CC  0008               	return
  4260  00CD                     i1l3473:	
  4261  00CD  2135               	fcall	_Display_Scan2
  4262  00CE  28CB               	goto	i1l3471
  4263  00CF                     i1l3477:	
  4264  00CF  2151               	fcall	_Display_Scan3
  4265  00D0  28CB               	goto	i1l3471
  4266  00D1                     i1l3481:	
  4267  00D1  216D               	fcall	_Display_Scan4
  4268  00D2  28CB               	goto	i1l3471
  4269  00D3                     i1l3485:	
  4270  00D3  204E               	fcall	_Display_Scan5
  4271  00D4                     i1l3487:	
  4272  00D4  01DA               	clrf	Display@scan_cnt
  4273  00D5  0008               	return
  4274  00D6                     i1l3493:	
  4275  00D6  085A               	movf	Display@scan_cnt,w
  4276                           
  4277                           ; Switch size 1, requested type "space"
  4278                           ; Number of cases is 5, Range of values is 0 to 4
  4279                           ; switch strategies available:
  4280                           ; Name         Instructions Cycles
  4281                           ; direct_byte           11     6 (fixed)
  4282                           ; simple_byte           16     9 (average)
  4283                           ; jumptable            260     6 (fixed)
  4284                           ;	Chosen strategy is direct_byte
  4285  00D7  0084               	movwf	4
  4286  00D8  3005               	movlw	5
  4287  00D9  0204               	subwf	4,w
  4288  00DA  1803               	skipnc
  4289  00DB  28D4               	goto	i1l3487
  4290  00DC  3000               	movlw	high i1S4091
  4291  00DD  008A               	movwf	10
  4292  00DE  3000               	movlw	low i1S4091
  4293  00DF  0704               	addwf	4,w
  4294  00E0  0082               	movwf	2
  4295  00E1  0008               	return
  4296  00E2                     __end_of_Display:	
  4297                           
  4298                           	psect	swtext4
  4299  0000                     __pswtext4:	
  4300  0000                     i1S4091:	
  4301  0000  28CA               	ljmp	i1l3469
  4302  0001  28CD               	ljmp	i1l3473
  4303  0002  28CF               	ljmp	i1l3477
  4304  0003  28D1               	ljmp	i1l3481
  4305  0004  28D3               	ljmp	i1l3485
  4306                           
  4307                           	psect	text24
  4308  0029                     __ptext24:	
  4309 ;; *************** function i1_Set_AllPin_INPUT *****************
  4310 ;; Defined at:
  4311 ;;		line 85 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SC8F072_double_key\LED_188.c"
  4312 ;; Parameters:    Size  Location     Type
  4313 ;;		None
  4314 ;; Auto vars:     Size  Location     Type
  4315 ;;		None
  4316 ;; Return value:  Size  Location     Type
  4317 ;;                  1    wreg      void 
  4318 ;; Registers used:
  4319 ;;		None
  4320 ;; Tracked objects:
  4321 ;;		On entry : 100/0
  4322 ;;		On exit  : 100/0
  4323 ;;		Unchanged: 0/0
  4324 ;; Data sizes:     COMMON   BANK0   BANK1
  4325 ;;      Params:         0       0       0
  4326 ;;      Locals:         0       0       0
  4327 ;;      Temps:          0       0       0
  4328 ;;      Totals:         0       0       0
  4329 ;;Total ram usage:        0 bytes
  4330 ;; Hardware stack levels used:    1
  4331 ;; This function calls:
  4332 ;;		Nothing
  4333 ;; This function is called by:
  4334 ;;		_Display
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337                           
  4338                           
  4339                           ;psect for function i1_Set_AllPin_INPUT
  4340  0029                     i1_Set_AllPin_INPUT:	
  4341                           
  4342                           ;LED_188.c: 87: TRISB0 = 1;;
  4343                           
  4344                           ;incstack = 0
  4345                           ; Regs used in i1_Set_AllPin_INPUT: []
  4346                           
  4347                           ;LED_188.c: 88: TRISB1 = 1;;
  4348                           
  4349                           ;LED_188.c: 89: TRISB2 = 1;;
  4350                           
  4351                           ;LED_188.c: 90: TRISB3 = 1;;
  4352                           
  4353                           ;LED_188.c: 91: TRISB4 = 1;;
  4354  0029  2834               	ljmp	PL4	;call to abstracted procedure
  4355  002A                     __end_ofi1_Set_AllPin_INPUT:	
  4356                           
  4357                           	psect	text25
  4358  004E                     __ptext25:	
  4359 ;; *************** function _Display_Scan5 *****************
  4360 ;; Defined at:
  4361 ;;		line 161 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SC8F072_double_key\LED_188.c"
  4362 ;; Parameters:    Size  Location     Type
  4363 ;;		None
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;		None
  4366 ;; Return value:  Size  Location     Type
  4367 ;;                  1    wreg      void 
  4368 ;; Registers used:
  4369 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4370 ;; Tracked objects:
  4371 ;;		On entry : 100/0
  4372 ;;		On exit  : 900/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMMON   BANK0   BANK1
  4375 ;;      Params:         0       0       0
  4376 ;;      Locals:         0       0       0
  4377 ;;      Temps:          0       0       0
  4378 ;;      Totals:         0       0       0
  4379 ;;Total ram usage:        0 bytes
  4380 ;; Hardware stack levels used:    1
  4381 ;; This function calls:
  4382 ;;		Nothing
  4383 ;; This function is called by:
  4384 ;;		_Display
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           
  4389                           ;psect for function _Display_Scan5
  4390  004E                     _Display_Scan5:	
  4391                           
  4392                           ;LED_188.c: 163: TRISB4 = 0;RB4 = 0;;
  4393                           
  4394                           ;incstack = 0
  4395                           ; Regs used in _Display_Scan5: [wreg-fsr0h+status,2+status,0]
  4396  004E  1205               	bcf	5,4	;volatile
  4397  004F  1206               	bcf	6,4	;volatile
  4398                           
  4399                           ;LED_188.c: 164: if(num_hund[hundreds] & 0x02)
  4400  0050  0865               	movf	_hundreds,w
  4401  0051  3EAC               	addlw	(low (_num_hund| 0))& (0+255)
  4402  0052  0084               	movwf	4
  4403  0053  1383               	bcf	3,7	;select IRP bank1
  4404  0054  1880               	btfsc	0,1
  4405                           
  4406                           ;LED_188.c: 165: TRISB2 = 0;RB2 = 1;;
  4407  0055  1105               	bcf	5,2	;volatile
  4408  0056  1506               	bsf	6,2	;volatile
  4409                           
  4410                           ;LED_188.c: 166: if(num_hund[hundreds] & 0x01)
  4411  0057  0865               	movf	_hundreds,w
  4412  0058  3EAC               	addlw	(low (_num_hund| 0))& (0+255)
  4413  0059  0084               	movwf	4
  4414  005A  1800               	btfsc	0,0
  4415                           
  4416                           ;LED_188.c: 167: TRISB1 = 0;RB1 = 1;;
  4417  005B  1085               	bcf	5,1	;volatile
  4418  005C  1486               	bsf	6,1	;volatile
  4419  005D  0008               	return
  4420  005E                     __end_of_Display_Scan5:	
  4421                           
  4422                           	psect	text26
  4423  016D                     __ptext26:	
  4424 ;; *************** function _Display_Scan4 *****************
  4425 ;; Defined at:
  4426 ;;		line 147 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SC8F072_double_key\LED_188.c"
  4427 ;; Parameters:    Size  Location     Type
  4428 ;;		None
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;		None
  4431 ;; Return value:  Size  Location     Type
  4432 ;;                  1    wreg      void 
  4433 ;; Registers used:
  4434 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4435 ;; Tracked objects:
  4436 ;;		On entry : 100/0
  4437 ;;		On exit  : 900/0
  4438 ;;		Unchanged: 0/0
  4439 ;; Data sizes:     COMMON   BANK0   BANK1
  4440 ;;      Params:         0       0       0
  4441 ;;      Locals:         0       0       0
  4442 ;;      Temps:          0       0       0
  4443 ;;      Totals:         0       0       0
  4444 ;;Total ram usage:        0 bytes
  4445 ;; Hardware stack levels used:    1
  4446 ;; This function calls:
  4447 ;;		Nothing
  4448 ;; This function is called by:
  4449 ;;		_Display
  4450 ;; This function uses a non-reentrant model
  4451 ;;
  4452                           
  4453                           
  4454                           ;psect for function _Display_Scan4
  4455  016D                     _Display_Scan4:	
  4456                           
  4457                           ;LED_188.c: 149: TRISB3 = 0;RB3 = 0;;
  4458                           
  4459                           ;incstack = 0
  4460                           ; Regs used in _Display_Scan4: [wreg-fsr0h+status,2+status,0]
  4461  016D  1185               	bcf	5,3	;volatile
  4462  016E  1186               	bcf	6,3	;volatile
  4463                           
  4464                           ;LED_188.c: 150: if(nums[unit] & 0x04)
  4465  016F  0863               	movf	_unit,w
  4466  0170  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4467  0171  0084               	movwf	4
  4468  0172  1383               	bcf	3,7	;select IRP bank1
  4469  0173  1900               	btfsc	0,2
  4470                           
  4471                           ;LED_188.c: 151: TRISB0 = 0;RB0 = 1;;
  4472  0174  1005               	bcf	5,0	;volatile
  4473  0175  1406               	bsf	6,0	;volatile
  4474                           
  4475                           ;LED_188.c: 152: if(num_hund[hundreds] & 0x04)
  4476  0176  0865               	movf	_hundreds,w
  4477  0177  3EAC               	addlw	(low (_num_hund| 0))& (0+255)
  4478  0178  0084               	movwf	4
  4479  0179  1900               	btfsc	0,2
  4480                           
  4481                           ;LED_188.c: 153: TRISB1 = 0;RB1 = 1;;
  4482  017A  1085               	bcf	5,1	;volatile
  4483  017B  1486               	bsf	6,1	;volatile
  4484                           
  4485                           ;LED_188.c: 154: if(num_hund[hundreds] & 0x08)
  4486  017C  0865               	movf	_hundreds,w
  4487  017D  3EAC               	addlw	(low (_num_hund| 0))& (0+255)
  4488  017E  0084               	movwf	4
  4489  017F  1980               	btfsc	0,3
  4490                           
  4491                           ;LED_188.c: 155: TRISB2 = 0;RB2 = 1;;
  4492  0180  1105               	bcf	5,2	;volatile
  4493  0181  1506               	bsf	6,2	;volatile
  4494                           
  4495                           ;LED_188.c: 156: if(nums[tens] & 0x01)
  4496  0182  0864               	movf	_tens,w
  4497  0183  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4498  0184  0084               	movwf	4
  4499  0185  1800               	btfsc	0,0
  4500                           
  4501                           ;LED_188.c: 157: TRISB4 = 0;RB4 = 1;;
  4502  0186  1205               	bcf	5,4	;volatile
  4503  0187  1606               	bsf	6,4	;volatile
  4504  0188  0008               	return
  4505  0189                     __end_of_Display_Scan4:	
  4506                           
  4507                           	psect	text27
  4508  0151                     __ptext27:	
  4509 ;; *************** function _Display_Scan3 *****************
  4510 ;; Defined at:
  4511 ;;		line 133 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SC8F072_double_key\LED_188.c"
  4512 ;; Parameters:    Size  Location     Type
  4513 ;;		None
  4514 ;; Auto vars:     Size  Location     Type
  4515 ;;		None
  4516 ;; Return value:  Size  Location     Type
  4517 ;;                  1    wreg      void 
  4518 ;; Registers used:
  4519 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4520 ;; Tracked objects:
  4521 ;;		On entry : 100/0
  4522 ;;		On exit  : 900/0
  4523 ;;		Unchanged: 0/0
  4524 ;; Data sizes:     COMMON   BANK0   BANK1
  4525 ;;      Params:         0       0       0
  4526 ;;      Locals:         0       0       0
  4527 ;;      Temps:          0       0       0
  4528 ;;      Totals:         0       0       0
  4529 ;;Total ram usage:        0 bytes
  4530 ;; Hardware stack levels used:    1
  4531 ;; This function calls:
  4532 ;;		Nothing
  4533 ;; This function is called by:
  4534 ;;		_Display
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           
  4539                           ;psect for function _Display_Scan3
  4540  0151                     _Display_Scan3:	
  4541                           
  4542                           ;LED_188.c: 135: TRISB2 = 0;RB2 = 0;;
  4543                           
  4544                           ;incstack = 0
  4545                           ; Regs used in _Display_Scan3: [wreg-fsr0h+status,2+status,0]
  4546  0151  1105               	bcf	5,2	;volatile
  4547  0152  1106               	bcf	6,2	;volatile
  4548                           
  4549                           ;LED_188.c: 136: if(nums[unit] & 0x10)
  4550  0153  0863               	movf	_unit,w
  4551  0154  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4552  0155  0084               	movwf	4
  4553  0156  1383               	bcf	3,7	;select IRP bank1
  4554  0157  1A00               	btfsc	0,4
  4555                           
  4556                           ;LED_188.c: 137: TRISB0 = 0;RB0 = 1;;
  4557  0158  1005               	bcf	5,0	;volatile
  4558  0159  1406               	bsf	6,0	;volatile
  4559                           
  4560                           ;LED_188.c: 138: if(nums[tens] & 0x40)
  4561  015A  0864               	movf	_tens,w
  4562  015B  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4563  015C  0084               	movwf	4
  4564  015D  1B00               	btfsc	0,6
  4565                           
  4566                           ;LED_188.c: 139: TRISB1 = 0;RB1 = 1;;
  4567  015E  1085               	bcf	5,1	;volatile
  4568  015F  1486               	bsf	6,1	;volatile
  4569                           
  4570                           ;LED_188.c: 140: if(nums[tens] & 0x10)
  4571  0160  0864               	movf	_tens,w
  4572  0161  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4573  0162  0084               	movwf	4
  4574  0163  1A00               	btfsc	0,4
  4575                           
  4576                           ;LED_188.c: 141: TRISB3 = 0;RB3 = 1;;
  4577  0164  1185               	bcf	5,3	;volatile
  4578  0165  1586               	bsf	6,3	;volatile
  4579                           
  4580                           ;LED_188.c: 142: if(nums[tens] & 0x02)
  4581  0166  0864               	movf	_tens,w
  4582  0167  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4583  0168  0084               	movwf	4
  4584  0169  1880               	btfsc	0,1
  4585                           
  4586                           ;LED_188.c: 143: TRISB4 = 0;RB4 = 1;;
  4587  016A  1205               	bcf	5,4	;volatile
  4588  016B  1606               	bsf	6,4	;volatile
  4589  016C  0008               	return
  4590  016D                     __end_of_Display_Scan3:	
  4591                           
  4592                           	psect	text28
  4593  0135                     __ptext28:	
  4594 ;; *************** function _Display_Scan2 *****************
  4595 ;; Defined at:
  4596 ;;		line 119 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SC8F072_double_key\LED_188.c"
  4597 ;; Parameters:    Size  Location     Type
  4598 ;;		None
  4599 ;; Auto vars:     Size  Location     Type
  4600 ;;		None
  4601 ;; Return value:  Size  Location     Type
  4602 ;;                  1    wreg      void 
  4603 ;; Registers used:
  4604 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4605 ;; Tracked objects:
  4606 ;;		On entry : 100/0
  4607 ;;		On exit  : 900/0
  4608 ;;		Unchanged: 0/0
  4609 ;; Data sizes:     COMMON   BANK0   BANK1
  4610 ;;      Params:         0       0       0
  4611 ;;      Locals:         0       0       0
  4612 ;;      Temps:          0       0       0
  4613 ;;      Totals:         0       0       0
  4614 ;;Total ram usage:        0 bytes
  4615 ;; Hardware stack levels used:    1
  4616 ;; This function calls:
  4617 ;;		Nothing
  4618 ;; This function is called by:
  4619 ;;		_Display
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623                           
  4624                           ;psect for function _Display_Scan2
  4625  0135                     _Display_Scan2:	
  4626                           
  4627                           ;LED_188.c: 121: TRISB1 = 0;RB1 = 0;;
  4628                           
  4629                           ;incstack = 0
  4630                           ; Regs used in _Display_Scan2: [wreg-fsr0h+status,2+status,0]
  4631  0135  1085               	bcf	5,1	;volatile
  4632  0136  1086               	bcf	6,1	;volatile
  4633                           
  4634                           ;LED_188.c: 122: if(nums[unit] &0x40)
  4635  0137  0863               	movf	_unit,w
  4636  0138  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4637  0139  0084               	movwf	4
  4638  013A  1383               	bcf	3,7	;select IRP bank1
  4639  013B  1B00               	btfsc	0,6
  4640                           
  4641                           ;LED_188.c: 123: TRISB0 = 0;RB0 = 1;;
  4642  013C  1005               	bcf	5,0	;volatile
  4643  013D  1406               	bsf	6,0	;volatile
  4644                           
  4645                           ;LED_188.c: 124: if(nums[tens] & 0x20)
  4646  013E  0864               	movf	_tens,w
  4647  013F  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4648  0140  0084               	movwf	4
  4649  0141  1A80               	btfsc	0,5
  4650                           
  4651                           ;LED_188.c: 125: TRISB2 = 0;RB2 = 1;;
  4652  0142  1105               	bcf	5,2	;volatile
  4653  0143  1506               	bsf	6,2	;volatile
  4654                           
  4655                           ;LED_188.c: 126: if(nums[tens] & 0x08)
  4656  0144  0864               	movf	_tens,w
  4657  0145  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4658  0146  0084               	movwf	4
  4659  0147  1980               	btfsc	0,3
  4660                           
  4661                           ;LED_188.c: 127: TRISB3 = 0;RB3 = 1;;
  4662  0148  1185               	bcf	5,3	;volatile
  4663  0149  1586               	bsf	6,3	;volatile
  4664                           
  4665                           ;LED_188.c: 128: if(nums[tens] & 0x04)
  4666  014A  0864               	movf	_tens,w
  4667  014B  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4668  014C  0084               	movwf	4
  4669  014D  1900               	btfsc	0,2
  4670                           
  4671                           ;LED_188.c: 129: TRISB4 = 0;RB4 = 1;;
  4672  014E  1205               	bcf	5,4	;volatile
  4673  014F  1606               	bsf	6,4	;volatile
  4674  0150  0008               	return
  4675  0151                     __end_of_Display_Scan2:	
  4676                           
  4677                           	psect	text29
  4678  0119                     __ptext29:	
  4679 ;; *************** function _Display_Scan1 *****************
  4680 ;; Defined at:
  4681 ;;		line 105 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SC8F072_double_key\LED_188.c"
  4682 ;; Parameters:    Size  Location     Type
  4683 ;;		None
  4684 ;; Auto vars:     Size  Location     Type
  4685 ;;		None
  4686 ;; Return value:  Size  Location     Type
  4687 ;;                  1    wreg      void 
  4688 ;; Registers used:
  4689 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4690 ;; Tracked objects:
  4691 ;;		On entry : 100/0
  4692 ;;		On exit  : 900/0
  4693 ;;		Unchanged: 0/0
  4694 ;; Data sizes:     COMMON   BANK0   BANK1
  4695 ;;      Params:         0       0       0
  4696 ;;      Locals:         0       0       0
  4697 ;;      Temps:          0       0       0
  4698 ;;      Totals:         0       0       0
  4699 ;;Total ram usage:        0 bytes
  4700 ;; Hardware stack levels used:    1
  4701 ;; This function calls:
  4702 ;;		Nothing
  4703 ;; This function is called by:
  4704 ;;		_Display
  4705 ;; This function uses a non-reentrant model
  4706 ;;
  4707                           
  4708                           
  4709                           ;psect for function _Display_Scan1
  4710  0119                     _Display_Scan1:	
  4711                           
  4712                           ;LED_188.c: 107: TRISB0 = 0;RB0 = 0;;
  4713                           
  4714                           ;incstack = 0
  4715                           ; Regs used in _Display_Scan1: [wreg-fsr0h+status,2+status,0]
  4716  0119  1005               	bcf	5,0	;volatile
  4717  011A  1006               	bcf	6,0	;volatile
  4718                           
  4719                           ;LED_188.c: 108: if(nums[unit] & 0x20)
  4720  011B  0863               	movf	_unit,w
  4721  011C  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4722  011D  0084               	movwf	4
  4723  011E  1383               	bcf	3,7	;select IRP bank1
  4724  011F  1A80               	btfsc	0,5
  4725                           
  4726                           ;LED_188.c: 109: TRISB1 = 0;RB1 = 1;;
  4727  0120  1085               	bcf	5,1	;volatile
  4728  0121  1486               	bsf	6,1	;volatile
  4729                           
  4730                           ;LED_188.c: 110: if(nums[unit] & 0x08)
  4731  0122  0863               	movf	_unit,w
  4732  0123  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4733  0124  0084               	movwf	4
  4734  0125  1980               	btfsc	0,3
  4735                           
  4736                           ;LED_188.c: 111: TRISB2 = 0;RB2 = 1;;
  4737  0126  1105               	bcf	5,2	;volatile
  4738  0127  1506               	bsf	6,2	;volatile
  4739                           
  4740                           ;LED_188.c: 112: if(nums[unit] & 0x02)
  4741  0128  0863               	movf	_unit,w
  4742  0129  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4743  012A  0084               	movwf	4
  4744  012B  1880               	btfsc	0,1
  4745                           
  4746                           ;LED_188.c: 113: TRISB3 = 0;RB3 = 1;;
  4747  012C  1185               	bcf	5,3	;volatile
  4748  012D  1586               	bsf	6,3	;volatile
  4749                           
  4750                           ;LED_188.c: 114: if(nums[unit] &0x01)
  4751  012E  0863               	movf	_unit,w
  4752  012F  3EA0               	addlw	(low (_nums| 0))& (0+255)
  4753  0130  0084               	movwf	4
  4754  0131  1800               	btfsc	0,0
  4755                           
  4756                           ;LED_188.c: 115: TRISB4 = 0;RB4 = 1;;
  4757  0132  1205               	bcf	5,4	;volatile
  4758  0133  1606               	bsf	6,4	;volatile
  4759  0134  0008               	return
  4760  0135                     __end_of_Display_Scan1:	
  4761                           
  4762                           	psect	text30
  4763  0189                     __ptext30:	
  4764 ;; *************** function _Charge_num *****************
  4765 ;; Defined at:
  4766 ;;		line 11 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SC8F072_double_key\LED_188.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;		None
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;  hundred         1    9[COMMON] unsigned char 
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  1    wreg      void 
  4773 ;; Registers used:
  4774 ;;		wreg, status,2, status,0, pclath, cstack
  4775 ;; Tracked objects:
  4776 ;;		On entry : 100/100
  4777 ;;		On exit  : 100/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMMON   BANK0   BANK1
  4780 ;;      Params:         0       0       0
  4781 ;;      Locals:         1       0       0
  4782 ;;      Temps:          0       0       0
  4783 ;;      Totals:         1       0       0
  4784 ;;Total ram usage:        1 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    1
  4787 ;; This function calls:
  4788 ;;		___lbdiv
  4789 ;;		___lbmod
  4790 ;; This function is called by:
  4791 ;;		_Isr_Timer
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795                           
  4796                           ;psect for function _Charge_num
  4797  0189                     _Charge_num:	
  4798                           
  4799                           ;LED_188.c: 13: bool hundred = (bool)(power_percent / 100);
  4800                           
  4801                           ;incstack = 0
  4802                           ; Regs used in _Charge_num: [wreg+status,2+status,0+pclath+cstack]
  4803  0189  21A6               	fcall	PL22	;call to abstracted procedure
  4804  018A  20E2               	fcall	___lbdiv
  4805  018B  00F9               	movwf	Charge_num@hundred
  4806                           
  4807                           ;LED_188.c: 14: tens = (unsigned char)((power_percent % 100) / 10);
  4808  018C  219B               	fcall	PL16	;call to abstracted procedure
  4809  018D  20FD               	fcall	___lbmod
  4810  018E  20E2               	fcall	___lbdiv
  4811                           
  4812                           ;LED_188.c: 15: unit = (unsigned char)(power_percent % 10);
  4813  018F  21A1               	fcall	PL20	;call to abstracted procedure
  4814  0190  20FD               	fcall	___lbmod
  4815  0191  00E3               	movwf	_unit	;volatile
  4816                           
  4817                           ;LED_188.c: 16: if(hundred)
  4818  0192  0879               	movf	Charge_num@hundred,w
  4819  0193  1903               	btfsc	3,2
  4820  0194  2998               	goto	i1l3457
  4821                           
  4822                           ;LED_188.c: 17: {
  4823                           ;LED_188.c: 18: hundreds = 4;
  4824  0195  3004               	movlw	4
  4825  0196  00E5               	movwf	_hundreds	;volatile
  4826                           
  4827                           ;LED_188.c: 19: }
  4828  0197  0008               	return
  4829  0198                     i1l3457:	
  4830                           
  4831                           ;LED_188.c: 20: else
  4832                           ;LED_188.c: 21: {
  4833                           ;LED_188.c: 22: hundreds = 2;
  4834  0198  3002               	movlw	2
  4835  0199  00E5               	movwf	_hundreds	;volatile
  4836  019A  0008               	return
  4837  019B                     __end_of_Charge_num:	
  4838  019B                     PL16:	
  4839  019B  300A               	movlw	10
  4840  019C  00F5               	movwf	___lbdiv@divisor
  4841  019D  3064               	movlw	100
  4842  019E  00F0               	movwf	___lbmod@divisor
  4843  019F  0861               	movf	_power_percent,w	;volatile
  4844  01A0  0008               	return
  4845  01A1                     __end_ofPL16:	
  4846  01A1                     PL20:	
  4847  01A1  00E4               	movwf	_tens	;volatile
  4848  01A2  300A               	movlw	10
  4849  01A3  00F0               	movwf	___lbmod@divisor
  4850  01A4  0861               	movf	_power_percent,w	;volatile
  4851  01A5  0008               	return
  4852  01A6                     __end_ofPL20:	
  4853  01A6                     PL22:	
  4854  01A6  3064               	movlw	100
  4855  01A7  00F5               	movwf	___lbdiv@divisor
  4856  01A8  1283               	bcf	3,5	;RP0=0, select bank0
  4857  01A9  0861               	movf	_power_percent,w	;volatile
  4858  01AA  0008               	return
  4859  01AB                     __end_ofPL22:	
  4860                           
  4861                           	psect	text31
  4862  00FD                     __ptext31:	
  4863 ;; *************** function ___lbmod *****************
  4864 ;; Defined at:
  4865 ;;		line 4 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\lbmod.c"
  4866 ;; Parameters:    Size  Location     Type
  4867 ;;  dividend        1    wreg     unsigned char 
  4868 ;;  divisor         1    0[COMMON] unsigned char 
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;  dividend        1    2[COMMON] unsigned char 
  4871 ;;  rem             1    4[COMMON] unsigned char 
  4872 ;;  counter         1    3[COMMON] unsigned char 
  4873 ;; Return value:  Size  Location     Type
  4874 ;;                  1    wreg      unsigned char 
  4875 ;; Registers used:
  4876 ;;		wreg, status,2, status,0
  4877 ;; Tracked objects:
  4878 ;;		On entry : 100/0
  4879 ;;		On exit  : 100/0
  4880 ;;		Unchanged: 100/0
  4881 ;; Data sizes:     COMMON   BANK0   BANK1
  4882 ;;      Params:         1       0       0
  4883 ;;      Locals:         3       0       0
  4884 ;;      Temps:          1       0       0
  4885 ;;      Totals:         5       0       0
  4886 ;;Total ram usage:        5 bytes
  4887 ;; Hardware stack levels used:    1
  4888 ;; This function calls:
  4889 ;;		Nothing
  4890 ;; This function is called by:
  4891 ;;		_Charge_num
  4892 ;;		_Uncharge_num
  4893 ;; This function uses a non-reentrant model
  4894 ;;
  4895                           
  4896                           
  4897                           ;psect for function ___lbmod
  4898  00FD                     ___lbmod:	
  4899                           
  4900                           ;incstack = 0
  4901                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  4902                           ;___lbmod@dividend stored from wreg
  4903  00FD  00F2               	movwf	___lbmod@dividend
  4904  00FE  3008               	movlw	8
  4905  00FF  00F3               	movwf	___lbmod@counter
  4906  0100  01F4               	clrf	___lbmod@rem
  4907  0101                     i1l3237:	
  4908  0101  0872               	movf	___lbmod@dividend,w
  4909  0102  00F1               	movwf	??___lbmod
  4910  0103  3007               	movlw	7
  4911  0104  1003               	clrc
  4912  0105                     L10:	
  4913  0105  0CF1               	rrf	??___lbmod,f
  4914  0106  3EFF               	addlw	-1
  4915  0107  1003               	clrc
  4916  0108  1D03               	skipz
  4917  0109  2905               	goto	L10
  4918  010A  0D74               	rlf	___lbmod@rem,w
  4919  010B  0471               	iorwf	??___lbmod,w
  4920  010C  00F4               	movwf	___lbmod@rem
  4921  010D  1003               	clrc
  4922  010E  0DF2               	rlf	___lbmod@dividend,f
  4923  010F  0870               	movf	___lbmod@divisor,w
  4924  0110  0274               	subwf	___lbmod@rem,w
  4925  0111  1C03               	skipc
  4926  0112  2915               	goto	i1l3245
  4927  0113  0870               	movf	___lbmod@divisor,w
  4928  0114  02F4               	subwf	___lbmod@rem,f
  4929  0115                     i1l3245:	
  4930  0115  0BF3               	decfsz	___lbmod@counter,f
  4931  0116  2901               	goto	i1l3237
  4932  0117  0874               	movf	___lbmod@rem,w
  4933  0118  0008               	return
  4934  0119                     __end_of___lbmod:	
  4935                           
  4936                           	psect	text32
  4937  00E2                     __ptext32:	
  4938 ;; *************** function ___lbdiv *****************
  4939 ;; Defined at:
  4940 ;;		line 4 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\lbdiv.c"
  4941 ;; Parameters:    Size  Location     Type
  4942 ;;  dividend        1    wreg     unsigned char 
  4943 ;;  divisor         1    5[COMMON] unsigned char 
  4944 ;; Auto vars:     Size  Location     Type
  4945 ;;  dividend        1    6[COMMON] unsigned char 
  4946 ;;  quotient        1    8[COMMON] unsigned char 
  4947 ;;  counter         1    7[COMMON] unsigned char 
  4948 ;; Return value:  Size  Location     Type
  4949 ;;                  1    wreg      unsigned char 
  4950 ;; Registers used:
  4951 ;;		wreg, status,2, status,0
  4952 ;; Tracked objects:
  4953 ;;		On entry : 100/0
  4954 ;;		On exit  : 100/0
  4955 ;;		Unchanged: 100/0
  4956 ;; Data sizes:     COMMON   BANK0   BANK1
  4957 ;;      Params:         1       0       0
  4958 ;;      Locals:         3       0       0
  4959 ;;      Temps:          0       0       0
  4960 ;;      Totals:         4       0       0
  4961 ;;Total ram usage:        4 bytes
  4962 ;; Hardware stack levels used:    1
  4963 ;; This function calls:
  4964 ;;		Nothing
  4965 ;; This function is called by:
  4966 ;;		_Charge_num
  4967 ;;		_Uncharge_num
  4968 ;; This function uses a non-reentrant model
  4969 ;;
  4970                           
  4971                           
  4972                           ;psect for function ___lbdiv
  4973  00E2                     ___lbdiv:	
  4974                           
  4975                           ;incstack = 0
  4976                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  4977                           ;___lbdiv@dividend stored from wreg
  4978  00E2  00F6               	movwf	___lbdiv@dividend
  4979  00E3  01F8               	clrf	___lbdiv@quotient
  4980  00E4  0875               	movf	___lbdiv@divisor,w
  4981  00E5  1903               	btfsc	3,2
  4982  00E6  28FB               	goto	i1l3229
  4983  00E7  01F7               	clrf	___lbdiv@counter
  4984  00E8                     i1l3215:	
  4985  00E8  0AF7               	incf	___lbdiv@counter,f
  4986  00E9  1BF5               	btfsc	___lbdiv@divisor,7
  4987  00EA  28EE               	goto	i1l1691
  4988  00EB  1003               	clrc
  4989  00EC  0DF5               	rlf	___lbdiv@divisor,f
  4990  00ED  28E8               	goto	i1l3215
  4991  00EE                     i1l1691:	
  4992  00EE  1003               	clrc
  4993  00EF  0DF8               	rlf	___lbdiv@quotient,f
  4994  00F0  0875               	movf	___lbdiv@divisor,w
  4995  00F1  0276               	subwf	___lbdiv@dividend,w
  4996  00F2  1C03               	skipc
  4997  00F3  28F8               	goto	L11
  4998  00F4  0875               	movf	___lbdiv@divisor,w
  4999  00F5  02F6               	subwf	___lbdiv@dividend,f
  5000  00F6  1478               	bsf	___lbdiv@quotient,0
  5001  00F7  1003               	clrc
  5002  00F8                     L11:	
  5003  00F8  0CF5               	rrf	___lbdiv@divisor,f
  5004  00F9  0BF7               	decfsz	___lbdiv@counter,f
  5005  00FA  28EE               	goto	i1l1691
  5006  00FB                     i1l3229:	
  5007  00FB  0878               	movf	___lbdiv@quotient,w
  5008  00FC  0008               	return
  5009  00FD                     __end_of___lbdiv:	
  5010  007E                     btemp	set	126	;btemp
  5011  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    6
    Data        20
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     54      70
    BANK1            80     10      36

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Isr_Timer in COMMON

    i1_Set_PWM->i1___awdiv
    i1___awdiv->i1___wmul
    _Uncharge_num->___lbdiv
    _Charge_num->___lbdiv
    ___lbdiv->___lbmod

Critical Paths under _main in BANK0

    _main->_ADC_read
    _Button_response->_Set_PWM
    _Set_PWM->___awdiv
    ___awdiv->___wmul
    _ADC_read->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___lwtoft

Critical Paths under _Isr_Timer in BANK0

    _Isr_Timer->i1_Set_PWM

Critical Paths under _main in BANK1

    _main->_ADC_read
    _ADC_read->___fttol

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   12234
                           _ADC_read
                    _Button_response
                        _Init_System
                      _Led_Gpio_Init
                           _PWM_Init
 ---------------------------------------------------------------------------------
 (1) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Led_Gpio_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Button_response                                      1     1      0    2536
                                             26 BANK0      1     1      0
                          _Motor_num
                   _Set_AllPin_INPUT
                            _Set_PWM
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                              8 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _Set_PWM                                              4     3      1    2112
                                             22 BANK0      4     3      1
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     198
                                              8 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     406
                                             14 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _Set_AllPin_INPUT                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_num                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_read                                             5     5      0    9698
                                             53 BANK0      1     1      0
                                              6 BANK1      4     4      0
                         _ADC_Sample
                            ___ftadd
                            ___ftdiv
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2169
                                             16 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     501
                                             46 BANK0      7     3      4
                                              0 BANK1      6     6      0
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2694
                                             31 BANK0     15     9      6
                            ___ftadd (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    3453
                                             19 BANK0     12     6      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2008
                                              8 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     847
                                              8 BANK0     18    17      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Isr_Timer                                            4     4      0    2265
                                              4 BANK0      4     4      0
                         _Charge_num
                            _Display
                       _Uncharge_num
                          i1_Set_PWM
 ---------------------------------------------------------------------------------
 (5) i1_Set_PWM                                            4     3      1     729
                                              0 BANK0      4     3      1
                          i1___awdiv
                           i1___wmul
 ---------------------------------------------------------------------------------
 (6) i1___wmul                                             6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) i1___awdiv                                            8     4      4     352
                                              6 COMMON     8     4      4
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Uncharge_num                                         1     1      0     768
                                              9 COMMON     1     1      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (5) _Display                                              0     0      0       0
                      _Display_Scan1
                      _Display_Scan2
                      _Display_Scan3
                      _Display_Scan4
                      _Display_Scan5
                 i1_Set_AllPin_INPUT
 ---------------------------------------------------------------------------------
 (6) i1_Set_AllPin_INPUT                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Display_Scan5                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Display_Scan4                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Display_Scan3                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Display_Scan2                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Display_Scan1                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Charge_num                                           1     1      0     768
                                              9 COMMON     1     1      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (6) ___lbmod                                              5     4      1     371
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (6) ___lbdiv                                              4     3      1     374
                                              5 COMMON     4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_read
     _ADC_Sample
     ___ftadd
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___ftadd (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _Button_response
     _Motor_num
     _Set_AllPin_INPUT
     _Set_PWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
     ___awmod
   _Init_System
   _Led_Gpio_Init
   _PWM_Init

 _Isr_Timer (ROOT)
   _Charge_num
     ___lbdiv
       ___lbmod (ARG)
     ___lbmod
   _Display
     _Display_Scan1
     _Display_Scan2
     _Display_Scan3
     _Display_Scan4
     _Display_Scan5
     i1_Set_AllPin_INPUT
   _Uncharge_num
     ___lbdiv
       ___lbmod (ARG)
     ___lbmod
   i1_Set_PWM
     i1___awdiv
       i1___wmul (ARG)
     i1___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK1               50      A      24       6       45.0%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     36      46       4       87.5%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      78       8        0.0%
ABS                  0      0      78       7        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Dec 03 00:22:03 2024

                          pc 0002                           PL2 07B1                           PL4 0034  
                         PL6 07C0                           PL8 06D8         i1Set_PWM@pulse_width 0022  
               ___awdiv@sign 0033                           fsr 0004          ___wmul@multiplicand 002A  
           i1___wmul@product 0074                 ___ftadd@exp1 003E                 ___ftadd@exp2 003D  
                        PL10 0419                          PL20 01A1                          PL12 0488  
                        PL22 01A6                          PL14 05F5                          PL24 02C1  
                        PL16 019B                          PL26 07C9                          PL18 03B2  
               ___ftadd@sign 003C                          l700 0792                          l661 0045  
                        l662 004C                          l690 0713                          l696 074E  
                        _GIE 005F                          _RB0 0030                          _RB1 0031  
                        _RB2 0032                          _RB3 0033                          _RB4 0034  
                        _PR2 0011          __size_of_ADC_Sample 00D4                          fsr0 0004  
                        indf 0000                 ___awmod@sign 002D                          stop 06D5  
                       S4085 0019                         S4087 001E                 ___ftdiv@cntr 0048  
               ___ftdiv@sign 004D                         l3025 0252                         l1621 05B9  
                       l3037 0265                         l3045 0278                         l3029 0259  
                       l3049 0280                         l3405 068D                         l3413 06AD  
                       l1639 036C                         l3407 0698                         l1585 028D  
                       l2801 0315                         l1597 02AF                         l2807 031E  
                       l3391 060B                         l3721 029F                         l2833 034B  
                       l2817 032C                         l2841 01F5                         l3393 0626  
                       l3715 0291                         l2755 00B1                         l2843 01F8  
                       l2851 0203                         l3395 063F                         l3725 02AD  
                       l3717 0293                         l3813 0560                         l2829 0343  
                       l2845 01FC                         l3397 0658                         l3727 02A4  
                       l3719 0298                         l3823 0576                         l2759 00B9  
                       l2847 0200                         l2839 01F2                         l3399 066E  
                       l3761 06FE                         l3745 06F1                         l3841 0593  
                       l3817 0567                         l3771 071E                         l3755 06FD  
                       l3747 06F5                         l3843 0598                         l3835 0584  
                       l3861 05C4                         l3853 05B0                         l3845 059D  
                       l3909 037F                         l3925 0429                         l3783 0742  
                       l3855 05B5                         l3847 05A1                         l3943 0454  
                       l3927 042F                         l3785 074A                         l3953 0460  
                       l3795 0796                         l3779 0738                         l3867 05CB  
                       l3955 046A                         l3947 045C                         l3981 0416  
                       l3879 05E3                         l3887 035E                         l3959 0478  
                       l3977 040D                         _CHS4 04B6                         _T0IE 005D  
                       _T0IF 005A                         _IOCA 0089                         _IOCB 0009  
                       u3115 0432                         u3207 0605                         u3217 0413  
                       u1465 0335                         u3227 06ED                         u3085 038D  
                       u1865 026B                         u2835 0788                         _RAIE 0073  
                       _RAIF 006B                         u2855 079F                         _RBIE 005B  
                       _RBIF 0058                         u2785 073E                         u2795 0748  
                       _TMR0 0081                         _WPDA 0087                         _WPDB 0007  
                       _WPUA 0088                         _WPUB 0008                   _Charge_num 0189  
                       _main 0042                 ___ftpack@arg 0028                 ___ftpack@exp 002B  
                       _tens 0064                         _nums 00A0                         _unit 0063  
                       btemp 007E                         start 000B             __end_of_ADC_read 0419  
            __end_of_Display 00E2                 ___fttol@exp1 00B6                ??_Init_System 0028  
               ___fttol@lval 00B2              __end_of_Set_PWM 020F                        ?_main 0070  
             i1___awdiv@sign 007B             _Set_AllPin_INPUT 0033              __end_of___awdiv 0350  
            __end_of___lbdiv 00FD              __end_of___ftadd 05F5              __end_of___awmod 0285  
            __end_of___lbmod 0119              __end_of___ftdiv 03B2              ___awdiv@divisor 002E  
            __end_of___fttol 0488                        _T2CON 0013                        i1l750 0531  
                      i1l746 052C              ___awdiv@counter 0032                        _PORTA 0086  
                      _PORTB 0006                        _TRISA 0085                        _TRISB 0005  
                      _PWMTH 0018                        _PWMTL 0017                ___ftpack@sign 002C  
         __size_ofi1_Set_PWM 0032                        pclath 000A             __end_of_PWM_Init 0096  
           __end_ofi1___wmul 00AF                        status 0003          i1___wmul@multiplier 0070  
                      wtemp0 007E           __size_ofi1___awdiv 0045              ___lbdiv@divisor 0075  
            ___lbdiv@counter 0077              __initialization 07CE                 __end_of_main 004E  
                     ??_main 0056                ___fttol@sign1 00B1          __end_of_Init_System 0248  
                     _ADCON0 0095                       _ADCON1 0096                       i1S4091 0000  
                     i1S4089 0023                       _ADRESH 0099                       _ADRESL 0098  
           ___awdiv@dividend 0030             __end_of___ftpack 02C1                       _GODONE 04A9  
                     i1l3215 00E8                       i1l3313 0306                       i1l3229 00FB  
                     i1l3245 0115                       i1l3237 0101                       i1l3309 02FE  
                     i1l3263 00A0                       i1l3511 01CE                       i1l3503 01C0  
                     i1l3281 02D0                       i1l3505 01C3                       i1l3601 050F  
                     i1l1691 00EE                       i1l3259 0098                       i1l3507 01C6  
                     i1l3515 01D1                       i1l3611 051F                       i1l3509 01CA  
                     i1l3613 0520                       i1l3471 00CB                       i1l3287 02D9  
                     i1l3607 0517                       i1l3551 04B3                       i1l3457 0198  
                     i1l3481 00D1                       i1l3473 00CD                       i1l3465 007D  
                     i1l3297 02E7                       i1l3561 04C4                       i1l3545 04AB  
                     i1l3553 04B5                       i1l3619 0530                       i1l3547 04AC  
                     i1l3485 00D3                       i1l3477 00CF                       i1l3469 00CA  
                     i1l3493 00D6                       i1l3487 00D4                       i1l3583 04EB  
                     i1l3567 04D4                       i1l3593 0504                       i1l3577 04DD  
                     i1l3585 04F2                       i1l3569 04D6                       _LDO_EN 04B2  
                     _INTCON 000B                       u234_25 02F0             __end_of___lwtoft 006E  
                ?_Charge_num 0070                       _OSCCON 0014                       _TMR2IE 0071  
                     _TMR2IF 0069                       _PWMD0L 0019                       _PWMD1L 001A  
                     _PWMD2L 009B                       _PWMD3L 009C                       _PWMD4L 001B  
               ??_ADC_Sample 0029                       _PWMT4L 001C                       _TRISB0 0028  
                     _TRISB1 0029                       _TRISB2 002A                       _TRISB3 002B  
                     _TRISB4 002C                    ??_Display 0070           __size_of_Isr_Timer 00AE  
                  ??_Set_PWM 0037                       _T_flag 005B                   _Time_delay 00BB  
                     ___wmul 00AF                    ??___awdiv 0032                    ??___lbdiv 0076  
                  ??___ftadd 0039                    ??___awmod 002C                    ??___lbmod 0071  
                  ??___ftdiv 0045                    ??___fttol 0052        __end_of_Led_Gpio_Init 002C  
          __end_ofi1_Set_PWM 01DD             ___awdiv@quotient 0034              ___awmod@divisor 0028  
            ___awmod@counter 002C           __size_of_Motor_num 0007            __end_ofi1___awdiv 030B  
         __end_of_ADC_Sample 07B1                       saved_w 007E                    ?_ADC_read 0070  
           ___lbdiv@dividend 0076     __size_of_Button_response 00DD              ___lbmod@divisor 0070  
                Set_PWM@duty 0036      __end_of__initialization 07FE              ___lbmod@counter 0073  
                 ___ftadd@f1 0033                   ___ftadd@f2 0036                   ___ftdiv@f1 0042  
                 ___ftdiv@f2 003F                   ___ftdiv@f3 0049                   ___fttol@f1 004E  
             __pcstackCOMMON 0070           i1_Set_AllPin_INPUT 0029                 __pidataBANK0 0000  
               __pidataBANK1 0000                  _Init_System 020F           Set_PWM@pulse_width 0038  
                 __end_ofPL2 07C0                   __end_ofPL4 003A                   __end_ofPL6 07C9  
                 __end_ofPL8 06DD             ___lbdiv@quotient 0078          ?i1_Set_AllPin_INPUT 0070  
                 ___lwtoft@c 0030                    ?_PWM_Init 0070          __size_of_Charge_num 0012  
                  ?i1___wmul 0070             i1Set_PWM@channel 0021            __end_of_Isr_Timer 053D  
                 ??_ADC_read 0055                   __pbssBANK0 0056                   __pbssBANK1 00BB  
       ??i1_Set_AllPin_INPUT 0070     __end_of_Set_AllPin_INPUT 0034           _long_press_counter 0058  
          __end_of_Motor_num 0033                   __pmaintext 0042        __end_of_Display_Scan1 0135  
      __end_of_Display_Scan2 0151        __end_of_Display_Scan3 016D        __end_of_Display_Scan4 0189  
      __end_of_Display_Scan5 005E                      ?___wmul 0028                   __pintentry 0000  
                  ?___ftpack 0028                   ??_PWM_Init 0028                   ??i1___wmul 0074  
                  ?___lwtoft 0030           i1___awdiv@dividend 0078                      _PWMD01H 001E  
                    _PWMD23H 009E                      _PWMCON0 0015                      _PWMCON1 0016  
                    _PWMCON2 001D                   __stringtab 000D                      _Display 00C8  
                    _Set_PWM 01DD            ??_Button_response 003A                    _ADC_delay 00BD  
         i1___awdiv@quotient 007C              ADC_Sample@adldo 0028              ADC_Sample@admax 0036  
            ADC_Sample@admin 0034              ADC_Sample@adsum 0030                      ___awdiv 030B  
                    ___lbdiv 00E2                      ___ftadd 053D                      ___awmod 0248  
                    ___lbmod 00FD                      ___ftdiv 0350              __size_of___wmul 0019  
                    ___fttol 0420                   ??___ftpack 002D                ?_Uncharge_num 0070  
                    __ptext1 0080                      __ptext2 002A                      __ptext3 020F  
                    __ptext4 05FB                      __ptext5 0248                      __ptext6 01DD  
                    __ptext7 00AF                      __ptext8 030B                      __ptext9 0033  
                 ??___lwtoft 0033             ___awmod@dividend 002A                   _duty_steps 0013  
                    clrloop0 003B         end_of_initialization 07FE                    _LED_delay 0056  
               ??_Charge_num 0079              Display@scan_cnt 005A               ??_Uncharge_num 0079  
      i1___wmul@multiplicand 0072           __end_of_Charge_num 019B                    i1_Set_PWM 01AB  
           ___lbmod@dividend 0072                    i1___awdiv 02C6            __size_of_ADC_read 0063  
                ___lbmod@rem 0074                  ___ftdiv@exp 004C           ADC_read@power_temp 00B7  
               ?_Init_System 0070               __end_of___wmul 00C8                   ?i1_Set_PWM 0020  
                __end_ofPL10 0420                  __end_ofPL20 01A6                  __end_ofPL12 048F  
                __end_ofPL22 01AB                  __end_ofPL14 05FB                  __end_ofPL24 02C6  
                __end_ofPL16 01A1                  __end_ofPL26 07CE                  __end_ofPL18 03B6  
          __size_of_PWM_Init 0016          start_initialization 07CE            __size_ofi1___wmul 0019  
                 ?i1___awdiv 0076                    _Isr_Timer 048F       __size_of_Led_Gpio_Init 0002  
          ?_Set_AllPin_INPUT 0070           ??_Set_AllPin_INPUT 0028                    _Motor_num 002C  
                   ??___wmul 002C            ADC_Sample@ad_temp 0038                  __pdataBANK0 0063  
                __pdataBANK1 00A0            __size_of___ftpack 003C                    ___latbits 0000  
          __size_of___lwtoft 0010                __pcstackBANK0 0020                __pcstackBANK1 00B1  
            _Button_response 05FB                   ?_Isr_Timer 0070          Uncharge_num@hundred 0079  
       __end_of_Uncharge_num 0080  __size_ofi1_Set_AllPin_INPUT 0001                     ?_Display 0070  
               _button_lflag 005C                 _button_sflag 005D                     ?_Set_PWM 0036  
                 ?_Motor_num 0070                     ?___awdiv 002E                     ?___lbdiv 0075  
                   ?___ftadd 0033                     ?___awmod 0028                     ?___lbmod 0070  
                   ?___ftdiv 003F                     ?___fttol 004E            i1___awdiv@divisor 0076  
          i1___awdiv@counter 007A                _Led_Gpio_Init 002A                    __pstrings 000D  
                  __pswtext1 0019                    __pswtext2 001E                    __pswtext3 0023  
                  __pswtext4 0000                  ??i1_Set_PWM 007E                     _ADC_Flag 0060  
                   _ADC_read 03B6               ADC_Sample@adch 002E                  ??i1___awdiv 007A  
     __size_of_Display_Scan1 001C       __size_of_Display_Scan2 001C       __size_of_Display_Scan3 001C  
     __size_of_Display_Scan4 001C       __size_of_Display_Scan5 0010                  ADC_Sample@i 002F  
                ADC_Sample@j 002D            interrupt_function 0000               ___wmul@product 002C  
                   _LED_flag 00C1                    clear_ram0 003A             _debounce_counter 005E  
             ?_Led_Gpio_Init 0070                  __stringbase 0012                     _PWM_Init 0080  
          ___wmul@multiplier 0028                     i1___wmul 0096         __size_of_Init_System 0039  
    __end_of_Button_response 06D8                  ??_Isr_Timer 0024                   _ADC_Sample 06DD  
              i1Set_PWM@duty 0020             __size_of_Display 001A             __size_of_Set_PWM 0032  
                ??_Motor_num 0028                _Display_Scan1 0119                _Display_Scan2 0135  
              _Display_Scan3 0151                _Display_Scan4 016D                _Display_Scan5 004E  
           __size_of___awdiv 0045             __size_of___lbdiv 001B             __size_of___ftadd 00B8  
           __size_of___awmod 003D             __size_of___lbmod 001C             __size_of___ftdiv 0062  
           __size_of___fttol 0068                     ___ftpack 0285           __end_of__stringtab 0013  
                   ___lwtoft 005E                     _adresult 00C2        __size_of_Uncharge_num 0012  
                   __ptext10 002C                     __ptext11 03B6                     __ptext20 0096  
                   __ptext12 005E                     __ptext21 02C6                     __ptext13 0420  
                   __ptext30 0189                     __ptext22 006E                     __ptext14 0350  
                   __ptext31 00FD                     __ptext23 00C8                     __ptext15 053D  
                   __ptext32 00E2                     __ptext24 0029                     __ptext16 0285  
                   __ptext25 004E                     __ptext17 06DD                     __ptext26 016D  
                   __ptext18 048F                     __ptext27 0151                     __ptext19 01AB  
                   __ptext28 0135                     __ptext29 0119                __size_of_main 000C  
                   _hundreds 0065               ?_Display_Scan1 0070                     _num_hund 00AC  
             ?_Display_Scan2 0070               ?_Display_Scan3 0070               ?_Display_Scan4 0070  
             ?_Display_Scan5 0070                     _test_adc 0062              ??_Led_Gpio_Init 0028  
                   _power_ad 00BF           __end_of_duty_steps 0019                     _pwm_duty 005F  
               _Uncharge_num 006E    __size_of_Set_AllPin_INPUT 0001             ?_Button_response 0070  
                   intlevel1 0000                  ?_ADC_Sample 0028                    stringcode 000D  
          Charge_num@hundred 0079                   _OPTION_REG 0001                     stringdir 000D  
                   stringtab 000D   __end_ofi1_Set_AllPin_INPUT 002A                _power_percent 0061  
             Set_PWM@channel 0037              ??_Display_Scan1 0070              ??_Display_Scan2 0070  
            ??_Display_Scan3 0070              ??_Display_Scan4 0070              ??_Display_Scan5 0070  

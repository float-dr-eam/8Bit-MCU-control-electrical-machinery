

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Sep 18 09:02:29 2023

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F072
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	psect	pa_nodes0,global,class=CODE,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 1.45
    24                           ; Generated 16/11/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F887 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	nvBANK0
    59  0048                     __pnvBANK0:	
    60  0048                     _test_adc:	
    61  0048                     	ds	1
    62  0014                     _OSCCON	set	20
    63  0013                     _T2CON	set	19
    64  0011                     _PR2	set	17
    65  000B                     _INTCON	set	11
    66  0008                     _WPUB	set	8
    67  0006                     _PORTB	set	6
    68  0005                     _TRISB	set	5
    69  0001                     _OPTION_REG	set	1
    70  0071                     _TMR2IE	set	113
    71  0069                     _TMR2IF	set	105
    72  002F                     _TRISB7	set	47
    73  0099                     _ADRESH	set	153
    74  0098                     _ADRESL	set	152
    75  0096                     _ADCON1	set	150
    76  0095                     _ADCON0	set	149
    77  0094                     _ANSEL1	set	148
    78  0088                     _WPUA	set	136
    79  0086                     _PORTA	set	134
    80  0085                     _TRISA	set	133
    81  04B2                     _LDO_EN	set	1202
    82  04B6                     _CHS4	set	1206
    83  04A9                     _GODONE	set	1193
    84                           
    85                           	psect	cinit
    86  000B                     start_initialization:	
    87                           ; #config settings
    88                           
    89  000B                     __initialization:	
    90                           
    91                           ; Clear objects allocated to COMMON
    92  000B  01FA               	clrf	__pbssCOMMON& (0+127)
    93  000C  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
    94                           
    95                           ; Clear objects allocated to BANK0
    96  000D  1283               	bcf	3,5	;RP0=0, select bank0
    97  000E  01C4               	clrf	__pbssBANK0& (0+127)
    98  000F  01C5               	clrf	(__pbssBANK0+1)& (0+127)
    99  0010  01C6               	clrf	(__pbssBANK0+2)& (0+127)
   100  0011  01C7               	clrf	(__pbssBANK0+3)& (0+127)
   101  0012                     end_of_initialization:	
   102                           ;End of C runtime variable initialization code
   103                           
   104  0012                     __end_of__initialization:	
   105  0012  0183               	clrf	3
   106  0013  29BF               	ljmp	_main	;jump to C main() function
   107                           
   108                           	psect	bssCOMMON
   109  007A                     __pbssCOMMON:	
   110  007A                     _result:	
   111  007A                     	ds	2
   112                           
   113                           	psect	bssBANK0
   114  0044                     __pbssBANK0:	
   115  0044                     _power_ad:	
   116  0044                     	ds	2
   117  0046                     _adresult:	
   118  0046                     	ds	2
   119                           
   120                           	psect	cstackCOMMON
   121  0070                     __pcstackCOMMON:	
   122  0070                     ?_Init_System:	
   123  0070                     ?_AD_Init:	
   124                           ; 1 bytes @ 0x0
   125                           
   126  0070                     ?_main:	
   127                           ; 1 bytes @ 0x0
   128                           
   129  0070                     ?_Isr_Timer:	
   130                           ; 1 bytes @ 0x0
   131                           
   132  0070                     ??_Isr_Timer:	
   133                           ; 1 bytes @ 0x0
   134                           
   135                           
   136                           ; 1 bytes @ 0x0
   137  0070                     	ds	2
   138  0072                     ??_Init_System:	
   139  0072                     ??_AD_Init:	
   140                           ; 1 bytes @ 0x2
   141                           
   142  0072                     ?_ADC_Sample:	
   143                           ; 1 bytes @ 0x2
   144                           
   145  0072                     ?___ftpack:	
   146                           ; 1 bytes @ 0x2
   147                           
   148  0072                     ADC_Sample@adldo:	
   149                           ; 3 bytes @ 0x2
   150                           
   151  0072                     ___ftpack@arg:	
   152                           ; 1 bytes @ 0x2
   153                           
   154                           
   155                           ; 3 bytes @ 0x2
   156  0072                     	ds	1
   157  0073                     ??_ADC_Sample:	
   158                           
   159                           ; 1 bytes @ 0x3
   160  0073                     	ds	2
   161  0075                     ___ftpack@exp:	
   162                           
   163                           ; 1 bytes @ 0x5
   164  0075                     	ds	1
   165  0076                     ___ftpack@sign:	
   166                           
   167                           ; 1 bytes @ 0x6
   168  0076                     	ds	1
   169  0077                     ??___ftpack:	
   170                           
   171                           ; 1 bytes @ 0x7
   172  0077                     	ds	3
   173  007A                     ??___lwtoft:	
   174                           
   175                           	psect	cstackBANK0
   176  0020                     __pcstackBANK0:	
   177                           ; 1 bytes @ 0xA
   178                           
   179  0020                     ?___lwtoft:	
   180  0020                     ADC_Sample@j:	
   181                           ; 3 bytes @ 0x0
   182                           
   183  0020                     ___lwtoft@c:	
   184                           ; 1 bytes @ 0x0
   185                           
   186                           
   187                           ; 2 bytes @ 0x0
   188  0020                     	ds	1
   189  0021                     ADC_Sample@adch:	
   190                           
   191                           ; 1 bytes @ 0x1
   192  0021                     	ds	1
   193  0022                     ADC_Sample@i:	
   194                           
   195                           ; 1 bytes @ 0x2
   196  0022                     	ds	1
   197  0023                     ?___ftdiv:	
   198  0023                     ___ftdiv@f2:	
   199                           ; 3 bytes @ 0x3
   200                           
   201  0023                     ADC_Sample@adsum:	
   202                           ; 3 bytes @ 0x3
   203                           
   204                           
   205                           ; 4 bytes @ 0x3
   206  0023                     	ds	3
   207  0026                     ___ftdiv@f1:	
   208                           
   209                           ; 3 bytes @ 0x6
   210  0026                     	ds	1
   211  0027                     ADC_Sample@admin:	
   212                           
   213                           ; 2 bytes @ 0x7
   214  0027                     	ds	2
   215  0029                     ??___ftdiv:	
   216  0029                     ADC_Sample@admax:	
   217                           ; 1 bytes @ 0x9
   218                           
   219                           
   220                           ; 2 bytes @ 0x9
   221  0029                     	ds	2
   222  002B                     ADC_Sample@ad_temp:	
   223                           
   224                           ; 2 bytes @ 0xB
   225  002B                     	ds	1
   226  002C                     ___ftdiv@cntr:	
   227                           
   228                           ; 1 bytes @ 0xC
   229  002C                     	ds	1
   230  002D                     ___ftdiv@f3:	
   231                           
   232                           ; 3 bytes @ 0xD
   233  002D                     	ds	3
   234  0030                     ___ftdiv@exp:	
   235                           
   236                           ; 1 bytes @ 0x10
   237  0030                     	ds	1
   238  0031                     ___ftdiv@sign:	
   239                           
   240                           ; 1 bytes @ 0x11
   241  0031                     	ds	1
   242  0032                     ?___fttol:	
   243  0032                     ___fttol@f1:	
   244                           ; 4 bytes @ 0x12
   245                           
   246                           
   247                           ; 3 bytes @ 0x12
   248  0032                     	ds	4
   249  0036                     ??___fttol:	
   250                           
   251                           ; 1 bytes @ 0x16
   252  0036                     	ds	3
   253  0039                     ___fttol@sign1:	
   254                           
   255                           ; 1 bytes @ 0x19
   256  0039                     	ds	1
   257  003A                     ___fttol@lval:	
   258                           
   259                           ; 4 bytes @ 0x1A
   260  003A                     	ds	4
   261  003E                     ___fttol@exp1:	
   262                           
   263                           ; 1 bytes @ 0x1E
   264  003E                     	ds	1
   265  003F                     ??_main:	
   266                           
   267                           ; 1 bytes @ 0x1F
   268  003F                     	ds	1
   269  0040                     main@power_temp:	
   270                           
   271                           ; 4 bytes @ 0x20
   272  0040                     	ds	4
   273                           
   274                           	psect	maintext
   275  01BF                     __pmaintext:	
   276 ;;
   277 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   278 ;;
   279 ;; *************** function _main *****************
   280 ;; Defined at:
   281 ;;		line 118 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F072¿ª·¢°ü\SC8F072_DEMO_C\SC8F072_ADC_Demo\SC8F072_ADC.c"
   282 ;; Parameters:    Size  Location     Type
   283 ;;		None
   284 ;; Auto vars:     Size  Location     Type
   285 ;;  power_temp      4   32[BANK0 ] volatile unsigned long 
   286 ;; Return value:  Size  Location     Type
   287 ;;                  1    wreg      void 
   288 ;; Registers used:
   289 ;;		wreg, status,2, status,0, pclath, cstack
   290 ;; Tracked objects:
   291 ;;		On entry : B00/0
   292 ;;		On exit  : 100/0
   293 ;;		Unchanged: 0/0
   294 ;; Data sizes:     COMMON   BANK0   BANK1
   295 ;;      Params:         0       0       0
   296 ;;      Locals:         0       4       0
   297 ;;      Temps:          0       1       0
   298 ;;      Totals:         0       5       0
   299 ;;Total ram usage:        5 bytes
   300 ;; Hardware stack levels required when called:    3
   301 ;; This function calls:
   302 ;;		_ADC_Sample
   303 ;;		_AD_Init
   304 ;;		_Init_System
   305 ;;		___ftdiv
   306 ;;		___fttol
   307 ;;		___lwtoft
   308 ;; This function is called by:
   309 ;;		Startup code after reset
   310 ;; This function uses a non-reentrant model
   311 ;;
   312                           
   313                           
   314                           ;psect for function _main
   315  01BF                     _main:	
   316                           
   317                           ;SC8F072_ADC.c: 120: Init_System();
   318                           
   319                           ;incstack = 0
   320                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   321  01BF  2246               	fcall	_Init_System
   322                           
   323                           ;SC8F072_ADC.c: 121: AD_Init();
   324  01C0  227D               	fcall	_AD_Init
   325  01C1                     l606:	
   326                           ;SC8F072_ADC.c: 123: while (1)
   327                           
   328  01C1  0064               	clrwdt	;# 
   329                           
   330                           ;SC8F072_ADC.c: 128: TRISB7 = 1;
   331  01C2  1283               	bcf	3,5	;RP0=0, select bank0
   332  01C3  1785               	bsf	5,7	;volatile
   333                           
   334                           ;SC8F072_ADC.c: 129: ANSEL1 |= 0X80;
   335  01C4  1683               	bsf	3,5	;RP0=1, select bank1
   336  01C5  1794               	bsf	20,7	;volatile
   337                           
   338                           ;SC8F072_ADC.c: 130: test_adc = ADC_Sample(15, 7);
   339  01C6  3007               	movlw	7
   340  01C7  00F2               	movwf	ADC_Sample@adldo
   341  01C8  300F               	movlw	15
   342  01C9  2014               	fcall	_ADC_Sample
   343  01CA  00C8               	movwf	_test_adc	;volatile
   344                           
   345                           ;SC8F072_ADC.c: 131: if (0xA5 == test_adc)
   346  01CB  30A5               	movlw	165
   347  01CC  0648               	xorwf	_test_adc,w	;volatile
   348  01CD  1903               	btfsc	3,2
   349  01CE  29D8               	goto	l1490
   350                           
   351                           ;SC8F072_ADC.c: 135: else
   352                           ;SC8F072_ADC.c: 136: {
   353                           ;SC8F072_ADC.c: 137: ADCON0 = 0;
   354  01CF  1683               	bsf	3,5	;RP0=1, select bank1
   355  01D0  0195               	clrf	21	;volatile
   356                           
   357                           ;SC8F072_ADC.c: 138: ADCON1 = 0;
   358  01D1  0196               	clrf	22	;volatile
   359                           
   360                           ;SC8F072_ADC.c: 139: _delay((unsigned long)((100)*(16000000/4000000.0)));
   361  01D2  3084               	movlw	132
   362  01D3  1283               	bcf	3,5	;RP0=0, select bank0
   363  01D4  00BF               	movwf	??_main
   364  01D5                     u787:	
   365  01D5  0BBF               	decfsz	??_main,f
   366  01D6  29D5               	goto	u787
   367  01D7  29D8               	nop2
   368  01D8                     l1490:	
   369  01D8  301F               	movlw	31
   370                           
   371                           ;SC8F072_ADC.c: 140: }
   372                           ;SC8F072_ADC.c: 142: test_adc = ADC_Sample(31, 0);
   373  01D9  01F2               	clrf	ADC_Sample@adldo
   374  01DA  2014               	fcall	_ADC_Sample
   375  01DB  00C8               	movwf	_test_adc	;volatile
   376                           
   377                           ;SC8F072_ADC.c: 143: if (0xA5 == test_adc)
   378  01DC  30A5               	movlw	165
   379  01DD  0648               	xorwf	_test_adc,w	;volatile
   380  01DE  1D03               	btfss	3,2
   381  01DF  29C1               	goto	l606
   382                           
   383                           ;SC8F072_ADC.c: 144: {
   384                           ;SC8F072_ADC.c: 145: volatile unsigned long power_temp;
   385                           ;SC8F072_ADC.c: 147: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
   386  01E0  3096               	movlw	150
   387  01E1  01A6               	clrf	___ftdiv@f1
   388  01E2  00A7               	movwf	___ftdiv@f1+1
   389  01E3  304A               	movlw	74
   390  01E4  00A8               	movwf	___ftdiv@f1+2
   391  01E5  0847               	movf	_adresult+1,w	;volatile
   392  01E6  00A1               	movwf	___lwtoft@c+1
   393  01E7  0846               	movf	_adresult,w	;volatile
   394  01E8  00A0               	movwf	___lwtoft@c
   395  01E9  2263               	fcall	___lwtoft
   396  01EA  0820               	movf	?___lwtoft,w
   397  01EB  00A3               	movwf	___ftdiv@f2
   398  01EC  0821               	movf	?___lwtoft+1,w
   399  01ED  00A4               	movwf	___ftdiv@f2+1
   400  01EE  0822               	movf	?___lwtoft+2,w
   401  01EF  00A5               	movwf	___ftdiv@f2+2
   402  01F0  20FB               	fcall	___ftdiv
   403  01F1  0823               	movf	?___ftdiv,w
   404  01F2  00B2               	movwf	___fttol@f1
   405  01F3  0824               	movf	?___ftdiv+1,w
   406  01F4  00B3               	movwf	___fttol@f1+1
   407  01F5  0825               	movf	?___ftdiv+2,w
   408  01F6  00B4               	movwf	___fttol@f1+2
   409  01F7  2161               	fcall	___fttol
   410  01F8  0835               	movf	?___fttol+3,w
   411  01F9  00C3               	movwf	main@power_temp+3	;volatile
   412  01FA  0834               	movf	?___fttol+2,w
   413  01FB  00C2               	movwf	main@power_temp+2	;volatile
   414  01FC  0833               	movf	?___fttol+1,w
   415  01FD  00C1               	movwf	main@power_temp+1	;volatile
   416  01FE  0832               	movf	?___fttol,w
   417  01FF  00C0               	movwf	main@power_temp	;volatile
   418                           
   419                           ;SC8F072_ADC.c: 148: power_ad = (unsigned int)(power_temp);
   420  0200  0841               	movf	main@power_temp+1,w	;volatile
   421  0201  00C5               	movwf	_power_ad+1	;volatile
   422  0202  0840               	movf	main@power_temp,w	;volatile
   423  0203  00C4               	movwf	_power_ad	;volatile
   424  0204  29C1               	goto	l606
   425  0205                     __end_of_main:	
   426                           
   427                           	psect	text1
   428  0263                     __ptext1:	
   429 ;; *************** function ___lwtoft *****************
   430 ;; Defined at:
   431 ;;		line 28 in file "H:\MyDownloads\IDE_RAR\SCMCU_IDE_V2.00.15_Alpha1\data\sources\common\lwtoft.c"
   432 ;; Parameters:    Size  Location     Type
   433 ;;  c               2    0[BANK0 ] unsigned int 
   434 ;; Auto vars:     Size  Location     Type
   435 ;;		None
   436 ;; Return value:  Size  Location     Type
   437 ;;                  3    0[BANK0 ] float 
   438 ;; Registers used:
   439 ;;		wreg, status,2, status,0, pclath, cstack
   440 ;; Tracked objects:
   441 ;;		On entry : 100/0
   442 ;;		On exit  : 100/0
   443 ;;		Unchanged: 0/0
   444 ;; Data sizes:     COMMON   BANK0   BANK1
   445 ;;      Params:         0       3       0
   446 ;;      Locals:         0       0       0
   447 ;;      Temps:          0       0       0
   448 ;;      Totals:         0       3       0
   449 ;;Total ram usage:        3 bytes
   450 ;; Hardware stack levels used:    1
   451 ;; Hardware stack levels required when called:    2
   452 ;; This function calls:
   453 ;;		___ftpack
   454 ;; This function is called by:
   455 ;;		_main
   456 ;; This function uses a non-reentrant model
   457 ;;
   458                           
   459                           
   460                           ;psect for function ___lwtoft
   461  0263                     ___lwtoft:	
   462                           
   463                           ;incstack = 0
   464                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
   465  0263  0820               	movf	___lwtoft@c,w
   466  0264  00F2               	movwf	___ftpack@arg
   467  0265  0821               	movf	___lwtoft@c+1,w
   468  0266  00F3               	movwf	___ftpack@arg+1
   469  0267  308E               	movlw	142
   470  0268  01F4               	clrf	___ftpack@arg+2
   471  0269  00F5               	movwf	___ftpack@exp
   472  026A  01F6               	clrf	___ftpack@sign
   473  026B  2205               	fcall	___ftpack
   474  026C  0872               	movf	?___ftpack,w
   475  026D  00A0               	movwf	?___lwtoft
   476  026E  0873               	movf	?___ftpack+1,w
   477  026F  00A1               	movwf	?___lwtoft+1
   478  0270  0874               	movf	?___ftpack+2,w
   479  0271  00A2               	movwf	?___lwtoft+2
   480  0272  0008               	return
   481  0273                     __end_of___lwtoft:	
   482                           
   483                           	psect	text2
   484  0161                     __ptext2:	
   485 ;; *************** function ___fttol *****************
   486 ;; Defined at:
   487 ;;		line 44 in file "H:\MyDownloads\IDE_RAR\SCMCU_IDE_V2.00.15_Alpha1\data\sources\common\fttol.c"
   488 ;; Parameters:    Size  Location     Type
   489 ;;  f1              3   18[BANK0 ] float 
   490 ;; Auto vars:     Size  Location     Type
   491 ;;  lval            4   26[BANK0 ] unsigned long 
   492 ;;  exp1            1   30[BANK0 ] unsigned char 
   493 ;;  sign1           1   25[BANK0 ] unsigned char 
   494 ;; Return value:  Size  Location     Type
   495 ;;                  4   18[BANK0 ] long 
   496 ;; Registers used:
   497 ;;		wreg, status,2, status,0
   498 ;; Tracked objects:
   499 ;;		On entry : 100/0
   500 ;;		On exit  : 100/0
   501 ;;		Unchanged: 0/0
   502 ;; Data sizes:     COMMON   BANK0   BANK1
   503 ;;      Params:         0       4       0
   504 ;;      Locals:         0       6       0
   505 ;;      Temps:          0       3       0
   506 ;;      Totals:         0      13       0
   507 ;;Total ram usage:       13 bytes
   508 ;; Hardware stack levels used:    1
   509 ;; Hardware stack levels required when called:    1
   510 ;; This function calls:
   511 ;;		Nothing
   512 ;; This function is called by:
   513 ;;		_main
   514 ;; This function uses a non-reentrant model
   515 ;;
   516                           
   517                           
   518                           ;psect for function ___fttol
   519  0161                     ___fttol:	
   520                           
   521                           ;incstack = 0
   522                           ; Regs used in ___fttol: [wreg+status,2+status,0]
   523  0161  21B8               	fcall	PL6	;call to abstracted procedure
   524  0162  1003               	clrc
   525  0163  0D37               	rlf	??___fttol+1,w
   526  0164  0D38               	rlf	??___fttol+2,w
   527  0165  00BE               	movwf	___fttol@exp1
   528  0166  083E               	movf	___fttol@exp1,w
   529  0167  1D03               	btfss	3,2
   530  0168  296E               	goto	l1414
   531  0169                     l1412:	
   532  0169  01B2               	clrf	?___fttol
   533  016A  01B3               	clrf	?___fttol+1
   534  016B  01B4               	clrf	?___fttol+2
   535  016C  01B5               	clrf	?___fttol+3
   536  016D  0008               	return
   537  016E                     l1414:	
   538  016E  21B8               	fcall	PL6	;call to abstracted procedure
   539  016F  3017               	movlw	23
   540  0170                     u675:	
   541  0170  1003               	clrc
   542  0171  0CB8               	rrf	??___fttol+2,f
   543  0172  0CB7               	rrf	??___fttol+1,f
   544  0173  0CB6               	rrf	??___fttol,f
   545  0174  3EFF               	addlw	-1
   546  0175  1D03               	skipz
   547  0176  2970               	goto	u675
   548  0177  0836               	movf	??___fttol,w
   549  0178  00B9               	movwf	___fttol@sign1
   550  0179  17B3               	bsf	___fttol@f1+1,7
   551  017A  01B4               	clrf	___fttol@f1+2
   552  017B  0832               	movf	___fttol@f1,w
   553  017C  00BA               	movwf	___fttol@lval
   554  017D  0833               	movf	___fttol@f1+1,w
   555  017E  00BB               	movwf	___fttol@lval+1
   556  017F  0834               	movf	___fttol@f1+2,w
   557  0180  00BC               	movwf	___fttol@lval+2
   558  0181  308E               	movlw	142
   559  0182  01BD               	clrf	___fttol@lval+3
   560  0183  02BE               	subwf	___fttol@exp1,f
   561  0184  1FBE               	btfss	___fttol@exp1,7
   562  0185  2993               	goto	l1434
   563  0186  083E               	movf	___fttol@exp1,w
   564  0187  3A80               	xorlw	128
   565  0188  3E8F               	addlw	143
   566  0189  1C03               	btfss	3,0
   567  018A  2969               	goto	l1412
   568  018B                     l1430:	
   569  018B  1003               	clrc
   570  018C  0CBD               	rrf	___fttol@lval+3,f
   571  018D  0CBC               	rrf	___fttol@lval+2,f
   572  018E  0CBB               	rrf	___fttol@lval+1,f
   573  018F  0CBA               	rrf	___fttol@lval,f
   574  0190  0FBE               	incfsz	___fttol@exp1,f
   575  0191  298B               	goto	l1430
   576  0192  29A1               	goto	l1442
   577  0193                     l1434:	
   578  0193  3018               	movlw	24
   579  0194  023E               	subwf	___fttol@exp1,w
   580  0195  1803               	btfsc	3,0
   581  0196  2969               	goto	l1412
   582  0197                     l1440:	
   583  0197  083E               	movf	___fttol@exp1,w
   584  0198  1903               	btfsc	3,2
   585  0199  29A1               	goto	l1442
   586  019A  1003               	clrc
   587  019B  0DBA               	rlf	___fttol@lval,f
   588  019C  0DBB               	rlf	___fttol@lval+1,f
   589  019D  0DBC               	rlf	___fttol@lval+2,f
   590  019E  0DBD               	rlf	___fttol@lval+3,f
   591  019F  03BE               	decf	___fttol@exp1,f
   592  01A0  2997               	goto	l1440
   593  01A1                     l1442:	
   594  01A1  0839               	movf	___fttol@sign1,w
   595  01A2  1903               	btfsc	3,2
   596  01A3  29AF               	goto	l1446
   597  01A4  09BA               	comf	___fttol@lval,f
   598  01A5  09BB               	comf	___fttol@lval+1,f
   599  01A6  09BC               	comf	___fttol@lval+2,f
   600  01A7  09BD               	comf	___fttol@lval+3,f
   601  01A8  0ABA               	incf	___fttol@lval,f
   602  01A9  1903               	skipnz
   603  01AA  0ABB               	incf	___fttol@lval+1,f
   604  01AB  1903               	skipnz
   605  01AC  0ABC               	incf	___fttol@lval+2,f
   606  01AD  1903               	skipnz
   607  01AE  0ABD               	incf	___fttol@lval+3,f
   608  01AF                     l1446:	
   609  01AF  083D               	movf	___fttol@lval+3,w
   610  01B0  00B5               	movwf	?___fttol+3
   611  01B1  083C               	movf	___fttol@lval+2,w
   612  01B2  00B4               	movwf	?___fttol+2
   613  01B3  083B               	movf	___fttol@lval+1,w
   614  01B4  00B3               	movwf	?___fttol+1
   615  01B5  083A               	movf	___fttol@lval,w
   616  01B6  00B2               	movwf	?___fttol
   617  01B7  0008               	return
   618  01B8                     __end_of___fttol:	
   619  01B8                     PL6:	
   620  01B8  0832               	movf	___fttol@f1,w
   621  01B9  00B6               	movwf	??___fttol
   622  01BA  0833               	movf	___fttol@f1+1,w
   623  01BB  00B7               	movwf	??___fttol+1
   624  01BC  0834               	movf	___fttol@f1+2,w
   625  01BD  00B8               	movwf	??___fttol+2
   626  01BE  0008               	return
   627  01BF                     __end_ofPL6:	
   628                           
   629                           	psect	text3
   630  00FB                     __ptext3:	
   631 ;; *************** function ___ftdiv *****************
   632 ;; Defined at:
   633 ;;		line 56 in file "H:\MyDownloads\IDE_RAR\SCMCU_IDE_V2.00.15_Alpha1\data\sources\common\ftdiv.c"
   634 ;; Parameters:    Size  Location     Type
   635 ;;  f2              3    3[BANK0 ] float 
   636 ;;  f1              3    6[BANK0 ] float 
   637 ;; Auto vars:     Size  Location     Type
   638 ;;  f3              3   13[BANK0 ] float 
   639 ;;  sign            1   17[BANK0 ] unsigned char 
   640 ;;  exp             1   16[BANK0 ] unsigned char 
   641 ;;  cntr            1   12[BANK0 ] unsigned char 
   642 ;; Return value:  Size  Location     Type
   643 ;;                  3    3[BANK0 ] float 
   644 ;; Registers used:
   645 ;;		wreg, status,2, status,0, pclath, cstack
   646 ;; Tracked objects:
   647 ;;		On entry : 100/0
   648 ;;		On exit  : 100/0
   649 ;;		Unchanged: 0/0
   650 ;; Data sizes:     COMMON   BANK0   BANK1
   651 ;;      Params:         0       6       0
   652 ;;      Locals:         0       6       0
   653 ;;      Temps:          0       3       0
   654 ;;      Totals:         0      15       0
   655 ;;Total ram usage:       15 bytes
   656 ;; Hardware stack levels used:    1
   657 ;; Hardware stack levels required when called:    2
   658 ;; This function calls:
   659 ;;		___ftpack
   660 ;; This function is called by:
   661 ;;		_main
   662 ;; This function uses a non-reentrant model
   663 ;;
   664                           
   665                           
   666                           ;psect for function ___ftdiv
   667  00FB                     ___ftdiv:	
   668                           
   669                           ;incstack = 0
   670                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
   671  00FB  0826               	movf	___ftdiv@f1,w
   672  00FC  00A9               	movwf	??___ftdiv
   673  00FD  0827               	movf	___ftdiv@f1+1,w
   674  00FE  00AA               	movwf	??___ftdiv+1
   675  00FF  0828               	movf	___ftdiv@f1+2,w
   676  0100  00AB               	movwf	??___ftdiv+2
   677  0101  1003               	clrc
   678  0102  0D2A               	rlf	??___ftdiv+1,w
   679  0103  0D2B               	rlf	??___ftdiv+2,w
   680  0104  00B0               	movwf	___ftdiv@exp
   681  0105  0830               	movf	___ftdiv@exp,w
   682  0106  1D03               	btfss	3,2
   683  0107  2909               	goto	l1374
   684  0108  295D               	ljmp	PL8	;call to abstracted procedure
   685  0109                     l1374:	
   686  0109  0823               	movf	___ftdiv@f2,w
   687  010A  00A9               	movwf	??___ftdiv
   688  010B  0824               	movf	___ftdiv@f2+1,w
   689  010C  00AA               	movwf	??___ftdiv+1
   690  010D  0825               	movf	___ftdiv@f2+2,w
   691  010E  00AB               	movwf	??___ftdiv+2
   692  010F  1003               	clrc
   693  0110  0D2A               	rlf	??___ftdiv+1,w
   694  0111  0D2B               	rlf	??___ftdiv+2,w
   695  0112  00B1               	movwf	___ftdiv@sign
   696  0113  0831               	movf	___ftdiv@sign,w
   697  0114  1D03               	btfss	3,2
   698  0115  2917               	goto	l838
   699  0116  295D               	ljmp	PL8	;call to abstracted procedure
   700  0117                     l838:	
   701  0117  3089               	movlw	137
   702  0118  01AD               	clrf	___ftdiv@f3
   703  0119  01AE               	clrf	___ftdiv@f3+1
   704  011A  01AF               	clrf	___ftdiv@f3+2
   705  011B  0731               	addwf	___ftdiv@sign,w
   706  011C  00A9               	movwf	??___ftdiv
   707  011D  02B0               	subwf	___ftdiv@exp,f
   708  011E  0828               	movf	___ftdiv@f1+2,w
   709  011F  00B1               	movwf	___ftdiv@sign
   710  0120  0825               	movf	___ftdiv@f2+2,w
   711  0121  06B1               	xorwf	___ftdiv@sign,f
   712  0122  3080               	movlw	128
   713  0123  05B1               	andwf	___ftdiv@sign,f
   714  0124  3018               	movlw	24
   715  0125  17A7               	bsf	___ftdiv@f1+1,7
   716  0126  01A8               	clrf	___ftdiv@f1+2
   717  0127  17A4               	bsf	___ftdiv@f2+1,7
   718  0128  01A5               	clrf	___ftdiv@f2+2
   719  0129  00AC               	movwf	___ftdiv@cntr
   720  012A                     l1396:	
   721  012A  1003               	clrc
   722  012B  0DAD               	rlf	___ftdiv@f3,f
   723  012C  0DAE               	rlf	___ftdiv@f3+1,f
   724  012D  0DAF               	rlf	___ftdiv@f3+2,f
   725  012E  0825               	movf	___ftdiv@f2+2,w
   726  012F  0228               	subwf	___ftdiv@f1+2,w
   727  0130  1D03               	skipz
   728  0131  2938               	goto	u645
   729  0132  0824               	movf	___ftdiv@f2+1,w
   730  0133  0227               	subwf	___ftdiv@f1+1,w
   731  0134  1D03               	skipz
   732  0135  2938               	goto	u645
   733  0136  0823               	movf	___ftdiv@f2,w
   734  0137  0226               	subwf	___ftdiv@f1,w
   735  0138                     u645:	
   736  0138  1C03               	skipc
   737  0139  2946               	goto	L1
   738  013A  0823               	movf	___ftdiv@f2,w
   739  013B  02A6               	subwf	___ftdiv@f1,f
   740  013C  0824               	movf	___ftdiv@f2+1,w
   741  013D  1C03               	skipc
   742  013E  0F24               	incfsz	___ftdiv@f2+1,w
   743  013F  02A7               	subwf	___ftdiv@f1+1,f
   744  0140  0825               	movf	___ftdiv@f2+2,w
   745  0141  1C03               	skipc
   746  0142  0A25               	incf	___ftdiv@f2+2,w
   747  0143  02A8               	subwf	___ftdiv@f1+2,f
   748  0144  142D               	bsf	___ftdiv@f3,0
   749  0145  1003               	clrc
   750  0146                     L1:	
   751  0146  0DA6               	rlf	___ftdiv@f1,f
   752  0147  0DA7               	rlf	___ftdiv@f1+1,f
   753  0148  0DA8               	rlf	___ftdiv@f1+2,f
   754  0149  0BAC               	decfsz	___ftdiv@cntr,f
   755  014A  292A               	goto	l1396
   756  014B  082D               	movf	___ftdiv@f3,w
   757  014C  00F2               	movwf	___ftpack@arg
   758  014D  082E               	movf	___ftdiv@f3+1,w
   759  014E  00F3               	movwf	___ftpack@arg+1
   760  014F  082F               	movf	___ftdiv@f3+2,w
   761  0150  00F4               	movwf	___ftpack@arg+2
   762  0151  0830               	movf	___ftdiv@exp,w
   763  0152  00F5               	movwf	___ftpack@exp
   764  0153  0831               	movf	___ftdiv@sign,w
   765  0154  00F6               	movwf	___ftpack@sign
   766  0155  2205               	fcall	___ftpack
   767  0156  0872               	movf	?___ftpack,w
   768  0157  00A3               	movwf	?___ftdiv
   769  0158  0873               	movf	?___ftpack+1,w
   770  0159  00A4               	movwf	?___ftdiv+1
   771  015A  0874               	movf	?___ftpack+2,w
   772  015B  00A5               	movwf	?___ftdiv+2
   773  015C  0008               	return
   774  015D                     __end_of___ftdiv:	
   775  015D                     PL8:	
   776  015D  01A3               	clrf	?___ftdiv
   777  015E  01A4               	clrf	?___ftdiv+1
   778  015F  01A5               	clrf	?___ftdiv+2
   779  0160  0008               	return
   780  0161                     __end_ofPL8:	
   781                           
   782                           	psect	text4
   783  0205                     __ptext4:	
   784 ;; *************** function ___ftpack *****************
   785 ;; Defined at:
   786 ;;		line 62 in file "H:\MyDownloads\IDE_RAR\SCMCU_IDE_V2.00.15_Alpha1\data\sources\common\float.c"
   787 ;; Parameters:    Size  Location     Type
   788 ;;  arg             3    2[COMMON] unsigned um
   789 ;;  exp             1    5[COMMON] unsigned char 
   790 ;;  sign            1    6[COMMON] unsigned char 
   791 ;; Auto vars:     Size  Location     Type
   792 ;;		None
   793 ;; Return value:  Size  Location     Type
   794 ;;                  3    2[COMMON] float 
   795 ;; Registers used:
   796 ;;		wreg, status,2, status,0
   797 ;; Tracked objects:
   798 ;;		On entry : 100/0
   799 ;;		On exit  : 100/0
   800 ;;		Unchanged: 100/0
   801 ;; Data sizes:     COMMON   BANK0   BANK1
   802 ;;      Params:         5       0       0
   803 ;;      Locals:         0       0       0
   804 ;;      Temps:          3       0       0
   805 ;;      Totals:         8       0       0
   806 ;;Total ram usage:        8 bytes
   807 ;; Hardware stack levels used:    1
   808 ;; Hardware stack levels required when called:    1
   809 ;; This function calls:
   810 ;;		Nothing
   811 ;; This function is called by:
   812 ;;		___ftdiv
   813 ;;		___lwtoft
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817                           
   818                           ;psect for function ___ftpack
   819  0205                     ___ftpack:	
   820                           
   821                           ;incstack = 0
   822                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
   823  0205  0875               	movf	___ftpack@exp,w
   824  0206  1903               	btfsc	3,2
   825  0207  2A0D               	goto	l784
   826  0208  0874               	movf	___ftpack@arg+2,w
   827  0209  0473               	iorwf	___ftpack@arg+1,w
   828  020A  0472               	iorwf	___ftpack@arg,w
   829  020B  1D03               	skipz
   830  020C  2A13               	goto	l1248
   831  020D                     l784:	
   832  020D  01F2               	clrf	?___ftpack
   833  020E  01F3               	clrf	?___ftpack+1
   834  020F  01F4               	clrf	?___ftpack+2
   835  0210  0008               	return
   836  0211                     l1246:	
   837  0211  0AF5               	incf	___ftpack@exp,f
   838  0212  2241               	fcall	PL10	;call to abstracted procedure
   839  0213                     l1248:	
   840  0213  30FE               	movlw	254
   841  0214  0574               	andwf	___ftpack@arg+2,w
   842  0215  1903               	btfsc	3,2
   843  0216  2A1F               	goto	l1252
   844  0217  2A11               	goto	l1246
   845  0218                     l1250:	
   846  0218  0AF5               	incf	___ftpack@exp,f
   847  0219  0AF2               	incf	___ftpack@arg,f
   848  021A  1903               	skipnz
   849  021B  0AF3               	incf	___ftpack@arg+1,f
   850  021C  1903               	skipnz
   851  021D  0AF4               	incf	___ftpack@arg+2,f
   852  021E  2241               	fcall	PL10	;call to abstracted procedure
   853  021F                     l1252:	
   854  021F  30FF               	movlw	255
   855  0220  0574               	andwf	___ftpack@arg+2,w
   856  0221  1903               	btfsc	3,2
   857  0222  2A2D               	goto	l1256
   858  0223  2A18               	goto	l1250
   859  0224                     l1258:	
   860  0224  3002               	movlw	2
   861  0225  0275               	subwf	___ftpack@exp,w
   862  0226  1C03               	btfss	3,0
   863  0227  2A2F               	goto	l796
   864  0228  03F5               	decf	___ftpack@exp,f
   865  0229  1003               	clrc
   866  022A  0DF2               	rlf	___ftpack@arg,f
   867  022B  0DF3               	rlf	___ftpack@arg+1,f
   868  022C  0DF4               	rlf	___ftpack@arg+2,f
   869  022D                     l1256:	
   870  022D  1FF3               	btfss	___ftpack@arg+1,7
   871  022E  2A24               	goto	l1258
   872  022F                     l796:	
   873  022F  1C75               	btfss	___ftpack@exp,0
   874  0230  13F3               	bcf	___ftpack@arg+1,7
   875  0231  1003               	clrc
   876  0232  0CF5               	rrf	___ftpack@exp,f
   877  0233  0875               	movf	___ftpack@exp,w
   878  0234  00F9               	movwf	??___ftpack+2
   879  0235  01F8               	clrf	??___ftpack+1
   880  0236  01F7               	clrf	??___ftpack
   881  0237  0877               	movf	??___ftpack,w
   882  0238  04F2               	iorwf	___ftpack@arg,f
   883  0239  0878               	movf	??___ftpack+1,w
   884  023A  04F3               	iorwf	___ftpack@arg+1,f
   885  023B  0879               	movf	??___ftpack+2,w
   886  023C  04F4               	iorwf	___ftpack@arg+2,f
   887  023D  0876               	movf	___ftpack@sign,w
   888  023E  1D03               	btfss	3,2
   889  023F  17F4               	bsf	___ftpack@arg+2,7
   890  0240  0008               	return
   891  0241                     __end_of___ftpack:	
   892  0241                     PL10:	
   893  0241  1003               	clrc
   894  0242  0CF4               	rrf	___ftpack@arg+2,f
   895  0243  0CF3               	rrf	___ftpack@arg+1,f
   896  0244  0CF2               	rrf	___ftpack@arg,f
   897  0245  0008               	return
   898  0246                     __end_ofPL10:	
   899                           
   900                           	psect	text5
   901  0246                     __ptext5:	
   902 ;; *************** function _Init_System *****************
   903 ;; Defined at:
   904 ;;		line 162 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F072¿ª·¢°ü\SC8F072_DEMO_C\SC8F072_ADC_Demo\SC8F072_ADC.c"
   905 ;; Parameters:    Size  Location     Type
   906 ;;		None
   907 ;; Auto vars:     Size  Location     Type
   908 ;;		None
   909 ;; Return value:  Size  Location     Type
   910 ;;                  1    wreg      void 
   911 ;; Registers used:
   912 ;;		wreg, status,2
   913 ;; Tracked objects:
   914 ;;		On entry : B00/0
   915 ;;		On exit  : 100/0
   916 ;;		Unchanged: 0/0
   917 ;; Data sizes:     COMMON   BANK0   BANK1
   918 ;;      Params:         0       0       0
   919 ;;      Locals:         0       0       0
   920 ;;      Temps:          0       0       0
   921 ;;      Totals:         0       0       0
   922 ;;Total ram usage:        0 bytes
   923 ;; Hardware stack levels used:    1
   924 ;; Hardware stack levels required when called:    1
   925 ;; This function calls:
   926 ;;		Nothing
   927 ;; This function is called by:
   928 ;;		_main
   929 ;; This function uses a non-reentrant model
   930 ;;
   931                           
   932                           
   933                           ;psect for function _Init_System
   934  0246                     _Init_System:	
   935                           
   936                           ;incstack = 0
   937                           ; Regs used in _Init_System: [wreg+status,2]
   938  0246  0000               	nop	;# 
   939  0247  0064               	clrwdt	;# 
   940                           
   941                           ;SC8F072_ADC.c: 166: OPTION_REG = 0;
   942  0248  1283               	bcf	3,5	;RP0=0, select bank0
   943  0249  0181               	clrf	1	;volatile
   944  024A  0064               	clrwdt	;# 
   945                           
   946                           ;SC8F072_ADC.c: 168: OSCCON = 0X70;
   947  024B  3070               	movlw	112
   948  024C  1283               	bcf	3,5	;RP0=0, select bank0
   949  024D  0094               	movwf	20	;volatile
   950                           
   951                           ;SC8F072_ADC.c: 170: WPUA = 0B00000000;
   952  024E  1683               	bsf	3,5	;RP0=1, select bank1
   953  024F  0188               	clrf	8	;volatile
   954                           
   955                           ;SC8F072_ADC.c: 171: WPUB = 0B00000000;
   956  0250  1283               	bcf	3,5	;RP0=0, select bank0
   957  0251  0188               	clrf	8	;volatile
   958                           
   959                           ;SC8F072_ADC.c: 173: TRISA = 0B00000000;
   960  0252  1683               	bsf	3,5	;RP0=1, select bank1
   961  0253  0185               	clrf	5	;volatile
   962                           
   963                           ;SC8F072_ADC.c: 174: TRISB = 0B00000000;
   964  0254  1283               	bcf	3,5	;RP0=0, select bank0
   965  0255  0185               	clrf	5	;volatile
   966                           
   967                           ;SC8F072_ADC.c: 176: PORTA = 0X00;
   968  0256  1683               	bsf	3,5	;RP0=1, select bank1
   969  0257  0186               	clrf	6	;volatile
   970                           
   971                           ;SC8F072_ADC.c: 177: PORTB = 0X00;
   972  0258  1283               	bcf	3,5	;RP0=0, select bank0
   973  0259  0186               	clrf	6	;volatile
   974                           
   975                           ;SC8F072_ADC.c: 181: PR2 = 249;
   976  025A  30F9               	movlw	249
   977  025B  0091               	movwf	17	;volatile
   978                           
   979                           ;SC8F072_ADC.c: 182: TMR2IF = 0;
   980  025C  108D               	bcf	13,1	;volatile
   981                           
   982                           ;SC8F072_ADC.c: 183: TMR2IE = 1;
   983  025D  148E               	bsf	14,1	;volatile
   984                           
   985                           ;SC8F072_ADC.c: 185: T2CON = 0B00000100;
   986  025E  3004               	movlw	4
   987  025F  0093               	movwf	19	;volatile
   988                           
   989                           ;SC8F072_ADC.c: 186: INTCON = 0XC0;
   990  0260  30C0               	movlw	192
   991  0261  008B               	movwf	11	;volatile
   992  0262  0008               	return
   993  0263                     __end_of_Init_System:	
   994                           
   995                           	psect	text6
   996  027D                     __ptext6:	
   997 ;; *************** function _AD_Init *****************
   998 ;; Defined at:
   999 ;;		line 217 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F072¿ª·¢°ü\SC8F072_DEMO_C\SC8F072_ADC_Demo\SC8F072_ADC.c"
  1000 ;; Parameters:    Size  Location     Type
  1001 ;;		None
  1002 ;; Auto vars:     Size  Location     Type
  1003 ;;		None
  1004 ;; Return value:  Size  Location     Type
  1005 ;;                  1    wreg      void 
  1006 ;; Registers used:
  1007 ;;		wreg, status,2
  1008 ;; Tracked objects:
  1009 ;;		On entry : 100/0
  1010 ;;		On exit  : 100/100
  1011 ;;		Unchanged: 0/0
  1012 ;; Data sizes:     COMMON   BANK0   BANK1
  1013 ;;      Params:         0       0       0
  1014 ;;      Locals:         0       0       0
  1015 ;;      Temps:          0       0       0
  1016 ;;      Totals:         0       0       0
  1017 ;;Total ram usage:        0 bytes
  1018 ;; Hardware stack levels used:    1
  1019 ;; Hardware stack levels required when called:    1
  1020 ;; This function calls:
  1021 ;;		Nothing
  1022 ;; This function is called by:
  1023 ;;		_main
  1024 ;; This function uses a non-reentrant model
  1025 ;;
  1026                           
  1027                           
  1028                           ;psect for function _AD_Init
  1029  027D                     _AD_Init:	
  1030                           
  1031                           ;SC8F072_ADC.c: 250: ADCON0 = 0X41;
  1032                           
  1033                           ;incstack = 0
  1034                           ; Regs used in _AD_Init: [wreg+status,2]
  1035  027D  3041               	movlw	65
  1036  027E  1683               	bsf	3,5	;RP0=1, select bank1
  1037  027F  0095               	movwf	21	;volatile
  1038                           
  1039                           ;SC8F072_ADC.c: 267: ADCON1 = 0;
  1040  0280  0196               	clrf	22	;volatile
  1041  0281  0008               	return
  1042  0282                     __end_of_AD_Init:	
  1043                           
  1044                           	psect	text7
  1045  0014                     __ptext7:	
  1046 ;; *************** function _ADC_Sample *****************
  1047 ;; Defined at:
  1048 ;;		line 46 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F072¿ª·¢°ü\SC8F072_DEMO_C\SC8F072_ADC_Demo\SC8F072_ADC.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;  adch            1    wreg     unsigned char 
  1051 ;;  adldo           1    2[COMMON] unsigned char 
  1052 ;; Auto vars:     Size  Location     Type
  1053 ;;  adch            1    1[BANK0 ] unsigned char 
  1054 ;;  j               1    0[BANK0 ] unsigned char 
  1055 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1056 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1057 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1058 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1059 ;;  i               1    2[BANK0 ] unsigned char 
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      unsigned char 
  1062 ;; Registers used:
  1063 ;;		wreg, status,2, status,0
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/100
  1066 ;;		On exit  : 100/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMMON   BANK0   BANK1
  1069 ;;      Params:         1       0       0
  1070 ;;      Locals:         0      13       0
  1071 ;;      Temps:          4       0       0
  1072 ;;      Totals:         5      13       0
  1073 ;;Total ram usage:       18 bytes
  1074 ;; Hardware stack levels used:    1
  1075 ;; Hardware stack levels required when called:    1
  1076 ;; This function calls:
  1077 ;;		Nothing
  1078 ;; This function is called by:
  1079 ;;		_main
  1080 ;; This function uses a non-reentrant model
  1081 ;;
  1082                           
  1083                           
  1084                           ;psect for function _ADC_Sample
  1085  0014                     _ADC_Sample:	
  1086                           
  1087                           ;incstack = 0
  1088                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  1089                           ;ADC_Sample@adch stored from wreg
  1090  0014  1283               	bcf	3,5	;RP0=0, select bank0
  1091  0015  00A1               	movwf	ADC_Sample@adch
  1092                           
  1093                           ;SC8F072_ADC.c: 48: volatile unsigned long adsum = 0;
  1094                           
  1095                           ;SC8F072_ADC.c: 49: volatile unsigned int admin = 0, admax = 0;
  1096  0016  20ED               	fcall	PL4	;call to abstracted procedure
  1097                           
  1098                           ;SC8F072_ADC.c: 50: volatile unsigned int ad_temp = 0;
  1099  0017  01AB               	clrf	ADC_Sample@ad_temp	;volatile
  1100  0018  01AC               	clrf	ADC_Sample@ad_temp+1	;volatile
  1101                           
  1102                           ;SC8F072_ADC.c: 52: if ((!LDO_EN) && (adldo & 0x04) )
  1103  0019  1683               	bsf	3,5	;RP0=1, select bank1
  1104  001A  1D16               	btfss	22,2	;volatile
  1105  001B  1D72               	btfss	ADC_Sample@adldo,2
  1106  001C  2824               	goto	l1276
  1107                           
  1108                           ;SC8F072_ADC.c: 53: {
  1109                           ;SC8F072_ADC.c: 55: ADCON1 = adldo;
  1110  001D  0872               	movf	ADC_Sample@adldo,w
  1111  001E  0096               	movwf	22	;volatile
  1112                           
  1113                           ;SC8F072_ADC.c: 56: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1114  001F  3085               	movlw	133
  1115  0020  00F3               	movwf	??_ADC_Sample
  1116  0021                     u797:	
  1117  0021  0BF3               	decfsz	??_ADC_Sample,f
  1118  0022  2821               	goto	u797
  1119                           
  1120                           ;SC8F072_ADC.c: 57: }
  1121  0023  2826               	goto	l1278
  1122  0024                     l1276:	
  1123                           
  1124                           ;SC8F072_ADC.c: 58: else
  1125                           ;SC8F072_ADC.c: 59: ADCON1 = adldo;
  1126  0024  0872               	movf	ADC_Sample@adldo,w
  1127  0025  0096               	movwf	22	;volatile
  1128  0026                     l1278:	
  1129                           
  1130                           ;SC8F072_ADC.c: 61: if(adch & 0x10)
  1131  0026  1283               	bcf	3,5	;RP0=0, select bank0
  1132  0027  1E21               	btfss	ADC_Sample@adch,4
  1133  0028  282E               	goto	l1286
  1134                           
  1135                           ;SC8F072_ADC.c: 62: {
  1136                           ;SC8F072_ADC.c: 63: CHS4 = 1;
  1137  0029  1683               	bsf	3,5	;RP0=1, select bank1
  1138  002A  1716               	bsf	22,6	;volatile
  1139                           
  1140                           ;SC8F072_ADC.c: 64: adch &= 0x0f;
  1141  002B  300F               	movlw	15
  1142  002C  1283               	bcf	3,5	;RP0=0, select bank0
  1143  002D  05A1               	andwf	ADC_Sample@adch,f
  1144  002E                     l1286:	
  1145                           
  1146                           ;SC8F072_ADC.c: 67: for (i = 0; i < 10; i++)
  1147  002E  01A2               	clrf	ADC_Sample@i
  1148  002F                     l1292:	
  1149                           
  1150                           ;SC8F072_ADC.c: 68: {
  1151                           ;SC8F072_ADC.c: 69: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  1152  002F  0821               	movf	ADC_Sample@adch,w
  1153  0030  00F3               	movwf	??_ADC_Sample
  1154  0031  3001               	movlw	1
  1155  0032  1003               	clrc
  1156  0033                     L2:	
  1157  0033  0DF3               	rlf	??_ADC_Sample,f
  1158  0034  3EFF               	addlw	-1
  1159  0035  1003               	clrc
  1160  0036  1D03               	skipz
  1161  0037  2833               	goto	L2
  1162  0038  0D73               	rlf	??_ADC_Sample,w
  1163  0039  3841               	iorlw	65
  1164  003A  1683               	bsf	3,5	;RP0=1, select bank1
  1165  003B  0095               	movwf	21	;volatile
  1166  003C  0000               	nop	;# 
  1167  003D  0000               	nop	;# 
  1168  003E  0000               	nop	;# 
  1169  003F  0000               	nop	;# 
  1170                           
  1171                           ;SC8F072_ADC.c: 74: GODONE = 1;
  1172  0040  1683               	bsf	3,5	;RP0=1, select bank1
  1173  0041  1495               	bsf	21,1	;volatile
  1174                           
  1175                           ;SC8F072_ADC.c: 76: unsigned char j = 0;
  1176  0042  1283               	bcf	3,5	;RP0=0, select bank0
  1177  0043  01A0               	clrf	ADC_Sample@j
  1178  0044                     l590:	
  1179                           ;SC8F072_ADC.c: 77: while (GODONE)
  1180                           
  1181  0044  1683               	bsf	3,5	;RP0=1, select bank1
  1182  0045  1C95               	btfss	21,1	;volatile
  1183  0046  284F               	goto	l1302
  1184                           
  1185                           ;SC8F072_ADC.c: 78: {
  1186                           ;SC8F072_ADC.c: 79: _delay((unsigned long)((2)*(16000000/4000000.0)));
  1187  0047  2848               	nop2	;2 cycle nop
  1188  0048  2849               	nop2	;2 cycle nop
  1189  0049  284A               	nop2	;2 cycle nop
  1190  004A  284B               	nop2	;2 cycle nop
  1191                           
  1192                           ;SC8F072_ADC.c: 81: if (0 == (--j))
  1193  004B  1283               	bcf	3,5	;RP0=0, select bank0
  1194  004C  0BA0               	decfsz	ADC_Sample@j,f
  1195  004D  2844               	goto	l590
  1196                           
  1197                           ;SC8F072_ADC.c: 82: return 0;
  1198  004E  3400               	retlw	0
  1199  004F                     l1302:	
  1200                           
  1201                           ;SC8F072_ADC.c: 83: }
  1202                           ;SC8F072_ADC.c: 85: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  1203  004F  0819               	movf	25,w	;volatile
  1204  0050  1283               	bcf	3,5	;RP0=0, select bank0
  1205  0051  00AB               	movwf	ADC_Sample@ad_temp	;volatile
  1206  0052  01AC               	clrf	ADC_Sample@ad_temp+1	;volatile
  1207  0053  0EAB               	swapf	ADC_Sample@ad_temp,f	;volatile
  1208  0054  0EAC               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  1209  0055  30F0               	movlw	240
  1210  0056  05AC               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  1211  0057  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  1212  0058  390F               	andlw	15
  1213  0059  04AC               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  1214  005A  30F0               	movlw	240
  1215  005B  05AB               	andwf	ADC_Sample@ad_temp,f	;volatile
  1216  005C  1683               	bsf	3,5	;RP0=1, select bank1
  1217  005D  0E18               	swapf	24,w	;volatile
  1218  005E  390F               	andlw	15
  1219  005F  1283               	bcf	3,5	;RP0=0, select bank0
  1220  0060  07AB               	addwf	ADC_Sample@ad_temp,f	;volatile
  1221  0061  1803               	skipnc
  1222  0062  0AAC               	incf	ADC_Sample@ad_temp+1,f	;volatile
  1223                           
  1224                           ;SC8F072_ADC.c: 87: if (0 == admax)
  1225  0063  0829               	movf	ADC_Sample@admax,w	;volatile
  1226  0064  042A               	iorwf	ADC_Sample@admax+1,w	;volatile
  1227  0065  1D03               	btfss	3,2
  1228  0066  2869               	goto	l1310
  1229                           
  1230                           ;SC8F072_ADC.c: 88: {
  1231                           ;SC8F072_ADC.c: 89: admax = ad_temp;
  1232  0067  20F6               	fcall	PL12	;call to abstracted procedure
  1233  0068  287B               	goto	l1316
  1234  0069                     l1310:	
  1235                           ;SC8F072_ADC.c: 91: }
  1236                           
  1237                           ;SC8F072_ADC.c: 90: admin = ad_temp;
  1238                           
  1239                           
  1240                           ;SC8F072_ADC.c: 92: else if (ad_temp > admax)
  1241  0069  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1242  006A  022A               	subwf	ADC_Sample@admax+1,w	;volatile
  1243  006B  1D03               	skipz
  1244  006C  286F               	goto	u545
  1245  006D  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  1246  006E  0229               	subwf	ADC_Sample@admax,w	;volatile
  1247  006F                     u545:	
  1248  006F  1803               	skipnc
  1249  0070  2873               	goto	l1314
  1250                           
  1251                           ;SC8F072_ADC.c: 93: admax = ad_temp;
  1252  0071  20F6               	fcall	PL12	;call to abstracted procedure
  1253  0072  287F               	goto	l596
  1254  0073                     l1314:	
  1255                           
  1256                           ;SC8F072_ADC.c: 94: else if (ad_temp < admin)
  1257  0073  0828               	movf	ADC_Sample@admin+1,w	;volatile
  1258  0074  022C               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  1259  0075  1D03               	skipz
  1260  0076  2879               	goto	u555
  1261  0077  0827               	movf	ADC_Sample@admin,w	;volatile
  1262  0078  022B               	subwf	ADC_Sample@ad_temp,w	;volatile
  1263  0079                     u555:	
  1264  0079  1803               	skipnc
  1265  007A  287F               	goto	l596
  1266  007B                     l1316:	
  1267                           
  1268                           ;SC8F072_ADC.c: 95: admin = ad_temp;
  1269  007B  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1270  007C  00A8               	movwf	ADC_Sample@admin+1	;volatile
  1271  007D  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  1272  007E  00A7               	movwf	ADC_Sample@admin	;volatile
  1273  007F                     l596:	
  1274                           
  1275                           ;SC8F072_ADC.c: 97: adsum += ad_temp;
  1276  007F  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  1277  0080  00F3               	movwf	??_ADC_Sample
  1278  0081  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1279  0082  00F4               	movwf	??_ADC_Sample+1
  1280  0083  01F5               	clrf	??_ADC_Sample+2
  1281  0084  01F6               	clrf	??_ADC_Sample+3
  1282  0085  0873               	movf	??_ADC_Sample,w
  1283  0086  07A3               	addwf	ADC_Sample@adsum,f	;volatile
  1284  0087  0874               	movf	??_ADC_Sample+1,w
  1285  0088  1103               	clrz
  1286  0089  1803               	skipnc
  1287  008A  3E01               	addlw	1
  1288  008B  1D03               	btfss	3,2
  1289  008C  07A4               	addwf	ADC_Sample@adsum+1,f	;volatile
  1290  008D  0875               	movf	??_ADC_Sample+2,w
  1291  008E  1103               	clrz
  1292  008F  1803               	skipnc
  1293  0090  3E01               	addlw	1
  1294  0091  1D03               	btfss	3,2
  1295  0092  07A5               	addwf	ADC_Sample@adsum+2,f	;volatile
  1296  0093  0876               	movf	??_ADC_Sample+3,w
  1297  0094  1103               	clrz
  1298  0095  1803               	skipnc
  1299  0096  3E01               	addlw	1
  1300  0097  1D03               	btfss	3,2
  1301  0098  07A6               	addwf	ADC_Sample@adsum+3,f	;volatile
  1302  0099  300A               	movlw	10
  1303  009A  0AA2               	incf	ADC_Sample@i,f
  1304  009B  0222               	subwf	ADC_Sample@i,w
  1305  009C  1C03               	skipc
  1306  009D  282F               	goto	l1292
  1307                           
  1308                           ;SC8F072_ADC.c: 98: }
  1309                           ;SC8F072_ADC.c: 99: adsum -= admax;
  1310  009E  0829               	movf	ADC_Sample@admax,w	;volatile
  1311  009F  00F3               	movwf	??_ADC_Sample
  1312  00A0  082A               	movf	ADC_Sample@admax+1,w	;volatile
  1313  00A1  20DE               	fcall	PL2	;call to abstracted procedure
  1314  00A2  1C03               	skipc
  1315  00A3  0F76               	incfsz	??_ADC_Sample+3,w
  1316  00A4  02A6               	subwf	ADC_Sample@adsum+3,f	;volatile
  1317                           
  1318                           ;SC8F072_ADC.c: 100: if (adsum >= admin)
  1319  00A5  0827               	movf	ADC_Sample@admin,w	;volatile
  1320  00A6  00F3               	movwf	??_ADC_Sample
  1321  00A7  0828               	movf	ADC_Sample@admin+1,w	;volatile
  1322  00A8  00F4               	movwf	??_ADC_Sample+1
  1323  00A9  01F5               	clrf	??_ADC_Sample+2
  1324  00AA  01F6               	clrf	??_ADC_Sample+3
  1325  00AB  0876               	movf	??_ADC_Sample+3,w
  1326  00AC  0226               	subwf	ADC_Sample@adsum+3,w	;volatile
  1327  00AD  1D03               	skipz
  1328  00AE  28B9               	goto	u595
  1329  00AF  0875               	movf	??_ADC_Sample+2,w
  1330  00B0  0225               	subwf	ADC_Sample@adsum+2,w	;volatile
  1331  00B1  1D03               	skipz
  1332  00B2  28B9               	goto	u595
  1333  00B3  0874               	movf	??_ADC_Sample+1,w
  1334  00B4  0224               	subwf	ADC_Sample@adsum+1,w	;volatile
  1335  00B5  1D03               	skipz
  1336  00B6  28B9               	goto	u595
  1337  00B7  0873               	movf	??_ADC_Sample,w
  1338  00B8  0223               	subwf	ADC_Sample@adsum,w	;volatile
  1339  00B9                     u595:	
  1340  00B9  1C03               	skipc
  1341  00BA  28C3               	goto	l600
  1342                           
  1343                           ;SC8F072_ADC.c: 101: adsum -= admin;
  1344  00BB  0827               	movf	ADC_Sample@admin,w	;volatile
  1345  00BC  00F3               	movwf	??_ADC_Sample
  1346  00BD  0828               	movf	ADC_Sample@admin+1,w	;volatile
  1347  00BE  20DE               	fcall	PL2	;call to abstracted procedure
  1348  00BF  1C03               	skipc
  1349  00C0  0F76               	incfsz	??_ADC_Sample+3,w
  1350  00C1  02A6               	subwf	ADC_Sample@adsum+3,f	;volatile
  1351  00C2  28C7               	goto	l1326
  1352  00C3                     l600:	
  1353                           
  1354                           ;SC8F072_ADC.c: 102: else
  1355                           ;SC8F072_ADC.c: 103: adsum = 0;
  1356  00C3  01A3               	clrf	ADC_Sample@adsum	;volatile
  1357  00C4  01A4               	clrf	ADC_Sample@adsum+1	;volatile
  1358  00C5  01A5               	clrf	ADC_Sample@adsum+2	;volatile
  1359  00C6  01A6               	clrf	ADC_Sample@adsum+3	;volatile
  1360  00C7                     l1326:	
  1361                           
  1362                           ;SC8F072_ADC.c: 105: adresult = adsum >> 3;
  1363  00C7  0823               	movf	ADC_Sample@adsum,w	;volatile
  1364  00C8  00F3               	movwf	??_ADC_Sample
  1365  00C9  0824               	movf	ADC_Sample@adsum+1,w	;volatile
  1366  00CA  00F4               	movwf	??_ADC_Sample+1
  1367  00CB  0825               	movf	ADC_Sample@adsum+2,w	;volatile
  1368  00CC  00F5               	movwf	??_ADC_Sample+2
  1369  00CD  0826               	movf	ADC_Sample@adsum+3,w	;volatile
  1370  00CE  00F6               	movwf	??_ADC_Sample+3
  1371  00CF  3003               	movlw	3
  1372  00D0                     u615:	
  1373  00D0  1003               	clrc
  1374  00D1  0CF6               	rrf	??_ADC_Sample+3,f
  1375  00D2  0CF5               	rrf	??_ADC_Sample+2,f
  1376  00D3  0CF4               	rrf	??_ADC_Sample+1,f
  1377  00D4  0CF3               	rrf	??_ADC_Sample,f
  1378  00D5  3EFF               	addlw	-1
  1379  00D6  1D03               	skipz
  1380  00D7  28D0               	goto	u615
  1381  00D8  0874               	movf	??_ADC_Sample+1,w
  1382  00D9  00C7               	movwf	_adresult+1	;volatile
  1383  00DA  0873               	movf	??_ADC_Sample,w
  1384  00DB  00C6               	movwf	_adresult	;volatile
  1385                           
  1386                           ;SC8F072_ADC.c: 107: adsum = 0;
  1387                           
  1388                           ;SC8F072_ADC.c: 108: admin = 0;
  1389                           
  1390                           ;SC8F072_ADC.c: 109: admax = 0;
  1391  00DC  20ED               	fcall	PL4	;call to abstracted procedure
  1392                           
  1393                           ;SC8F072_ADC.c: 110: return 0xA5;
  1394  00DD  34A5               	retlw	165
  1395  00DE                     __end_of_ADC_Sample:	
  1396  00DE                     PL2:	
  1397  00DE  00F4               	movwf	??_ADC_Sample+1
  1398  00DF  01F5               	clrf	??_ADC_Sample+2
  1399  00E0  01F6               	clrf	??_ADC_Sample+3
  1400  00E1  0873               	movf	??_ADC_Sample,w
  1401  00E2  02A3               	subwf	ADC_Sample@adsum,f	;volatile
  1402  00E3  0874               	movf	??_ADC_Sample+1,w
  1403  00E4  1C03               	skipc
  1404  00E5  0F74               	incfsz	??_ADC_Sample+1,w
  1405  00E6  02A4               	subwf	ADC_Sample@adsum+1,f	;volatile
  1406  00E7  0875               	movf	??_ADC_Sample+2,w
  1407  00E8  1C03               	skipc
  1408  00E9  0F75               	incfsz	??_ADC_Sample+2,w
  1409  00EA  02A5               	subwf	ADC_Sample@adsum+2,f	;volatile
  1410  00EB  0876               	movf	??_ADC_Sample+3,w
  1411  00EC  0008               	return
  1412  00ED                     __end_ofPL2:	
  1413  00ED                     PL4:	
  1414  00ED  01A3               	clrf	ADC_Sample@adsum	;volatile
  1415  00EE  01A4               	clrf	ADC_Sample@adsum+1	;volatile
  1416  00EF  01A5               	clrf	ADC_Sample@adsum+2	;volatile
  1417  00F0  01A6               	clrf	ADC_Sample@adsum+3	;volatile
  1418  00F1  01A7               	clrf	ADC_Sample@admin	;volatile
  1419  00F2  01A8               	clrf	ADC_Sample@admin+1	;volatile
  1420  00F3  01A9               	clrf	ADC_Sample@admax	;volatile
  1421  00F4  01AA               	clrf	ADC_Sample@admax+1	;volatile
  1422  00F5  0008               	return
  1423  00F6                     __end_ofPL4:	
  1424  00F6                     PL12:	
  1425  00F6  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1426  00F7  00AA               	movwf	ADC_Sample@admax+1	;volatile
  1427  00F8  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  1428  00F9  00A9               	movwf	ADC_Sample@admax	;volatile
  1429  00FA  0008               	return
  1430  00FB                     __end_ofPL12:	
  1431                           
  1432                           	psect	text8
  1433  0273                     __ptext8:	
  1434 ;; *************** function _Isr_Timer *****************
  1435 ;; Defined at:
  1436 ;;		line 198 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F072¿ª·¢°ü\SC8F072_DEMO_C\SC8F072_ADC_Demo\SC8F072_ADC.c"
  1437 ;; Parameters:    Size  Location     Type
  1438 ;;		None
  1439 ;; Auto vars:     Size  Location     Type
  1440 ;;		None
  1441 ;; Return value:  Size  Location     Type
  1442 ;;                  1    wreg      void 
  1443 ;; Registers used:
  1444 ;;		None
  1445 ;; Tracked objects:
  1446 ;;		On entry : 0/0
  1447 ;;		On exit  : 100/0
  1448 ;;		Unchanged: 0/0
  1449 ;; Data sizes:     COMMON   BANK0   BANK1
  1450 ;;      Params:         0       0       0
  1451 ;;      Locals:         0       0       0
  1452 ;;      Temps:          2       0       0
  1453 ;;      Totals:         2       0       0
  1454 ;;Total ram usage:        2 bytes
  1455 ;; Hardware stack levels used:    1
  1456 ;; This function calls:
  1457 ;;		Nothing
  1458 ;; This function is called by:
  1459 ;;		Interrupt level 1
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           
  1464                           ;psect for function _Isr_Timer
  1465  0273                     _Isr_Timer:	
  1466                           
  1467                           ;SC8F072_ADC.c: 200: if (TMR2IF)
  1468  0273  1283               	bcf	3,5	;RP0=0, select bank0
  1469  0274  188D               	btfsc	13,1	;volatile
  1470                           
  1471                           ;SC8F072_ADC.c: 201: {
  1472                           ;SC8F072_ADC.c: 202: TMR2IF = 0;
  1473  0275  108D               	bcf	13,1	;volatile
  1474  0276  0871               	movf	??_Isr_Timer+1,w
  1475  0277  008A               	movwf	10
  1476  0278  0E70               	swapf	??_Isr_Timer^(0+-128),w
  1477  0279  0083               	movwf	3
  1478  027A  0EFE               	swapf	126,f
  1479  027B  0E7E               	swapf	126,w
  1480  027C  0009               	retfie
  1481  027D                     __end_of_Isr_Timer:	
  1482  007E                     btemp	set	126	;btemp
  1483  007E                     wtemp0	set	126
  1484                           
  1485                           	psect	intentry
  1486  0004                     __pintentry:	
  1487                           ;incstack = 0
  1488                           ; Regs used in _Isr_Timer: []
  1489                           
  1490  0004                     interrupt_function:	
  1491  007E                     saved_w	set	btemp
  1492  0004  00FE               	movwf	btemp
  1493  0005  0E03               	swapf	3,w
  1494  0006  00F0               	movwf	??_Isr_Timer
  1495  0007  080A               	movf	10,w
  1496  0008  00F1               	movwf	??_Isr_Timer+1
  1497  0009  2A73               	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         6
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     36      41
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    ___lwtoft->___ftpack
    ___ftdiv->___ftpack

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___fttol
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    4695
                                             31 BANK0      5     5      0
                         _ADC_Sample
                            _AD_Init
                        _Init_System
                            ___ftdiv
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    1704
                                              0 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             13     9      4     305
                                             18 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2017
                                              3 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1629
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Sample                                          18    17      1     635
                                              2 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Sample
   _AD_Init
   _Init_System
   ___ftdiv
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
     ___ftdiv (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     24      29       4       51.3%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      35       7        0.0%
DATA                 0      0      35       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Sep 18 09:02:29 2023

                     PL2 00DE                       PL4 00ED                       PL6 01B8  
                     PL8 015D                      PL10 0241                      PL12 00F6  
                    l600 00C3                      l606 01C1                      l590 0044  
                    l596 007F                      l838 0117                      l784 020D  
                    l796 022F                      _PR2 0011                      u615 00D0  
                    u545 006F                      u555 0079                      u645 0138  
                    u595 00B9                      u675 0170                      u787 01D5  
                    u797 0021      __size_of_ADC_Sample 00CA          __end_of_AD_Init 0282  
           ___ftdiv@cntr 002C             ___ftdiv@sign 0031                     l1310 0069  
                   l1302 004F                     l1314 0073                     l1250 0218  
                   l1316 007B                     l1252 021F                     l1412 0169  
                   l1326 00C7                     l1246 0211                     l1430 018B  
                   l1414 016E                     l1256 022D                     l1248 0213  
                   l1440 0197                     l1258 0224                     l1442 01A1  
                   l1434 0193                     l1292 002F                     l1276 0024  
                   l1286 002E                     l1278 0026                     l1374 0109  
                   l1446 01AF                     l1490 01D8                     l1396 012A  
                   _CHS4 04B6                     _WPUA 0088                     _WPUB 0008  
                   _main 01BF             ___ftpack@arg 0072             ___ftpack@exp 0075  
                   btemp 007E                     start 000A             ___fttol@exp1 003E  
          ??_Init_System 0072             ___fttol@lval 003A                    ?_main 0070  
        __end_of___ftdiv 015D          __end_of___fttol 01B8                    _T2CON 0013  
                  _PORTA 0086                    _PORTB 0006                    _TRISA 0085  
                  _TRISB 0005            ___ftpack@sign 0076                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 000B  
           __end_of_main 0205                   ??_main 003F            ___fttol@sign1 0039  
              ??_AD_Init 0072      __end_of_Init_System 0263                   _ADCON0 0095  
                 _ADCON1 0096                   _ADRESH 0099                   _ADRESL 0098  
                 _ANSEL1 0094         __end_of___ftpack 0241                   _GODONE 04A9  
                 _LDO_EN 04B2                   _INTCON 000B         __end_of___lwtoft 0273  
                 _OSCCON 0014                   _TMR2IE 0071                   _TMR2IF 0069  
           ??_ADC_Sample 0073                   _TRISB7 002F       __size_of_Isr_Timer 000A  
              ??___ftdiv 0029                ??___fttol 0036                   _result 007A  
     __end_of_ADC_Sample 00DE                   saved_w 007E  __end_of__initialization 0012  
             ___ftdiv@f1 0026               ___ftdiv@f2 0023               ___ftdiv@f3 002D  
             ___fttol@f1 0032           __pcstackCOMMON 0070              _Init_System 0246  
             __end_ofPL2 00ED               __end_ofPL4 00F6               __end_ofPL6 01BF  
             __end_ofPL8 0161               ___lwtoft@c 0020        __end_of_Isr_Timer 027D  
             __pbssBANK0 0044               __pmaintext 01BF               __pintentry 0004  
              ?___ftpack 0072                  _AD_Init 027D                ?___lwtoft 0020  
        ADC_Sample@adldo 0072          ADC_Sample@admax 0029          ADC_Sample@admin 0027  
        ADC_Sample@adsum 0023                  ___ftdiv 00FB                  ___fttol 0161  
             ??___ftpack 0077                  __ptext1 0263                  __ptext2 0161  
                __ptext3 00FB                  __ptext4 0205                  __ptext5 0246  
                __ptext6 027D                  __ptext7 0014                  __ptext8 0273  
             ??___lwtoft 007A     end_of_initialization 0012           main@power_temp 0040  
            ___ftdiv@exp 0030             ?_Init_System 0070              __end_ofPL10 0246  
            __end_ofPL12 00FB      start_initialization 000B                _Isr_Timer 0273  
      ADC_Sample@ad_temp 002B                 ?_AD_Init 0070        __size_of___ftpack 003C  
            __pbssCOMMON 007A                ___latbits 0000        __size_of___lwtoft 0010  
          __pcstackBANK0 0020               ?_Isr_Timer 0070                __pnvBANK0 0048  
               ?___ftdiv 0023                 ?___fttol 0032           ADC_Sample@adch 0021  
            ADC_Sample@i 0022              ADC_Sample@j 0020        interrupt_function 0004  
   __size_of_Init_System 001D         __size_of_AD_Init 0005              ??_Isr_Timer 0070  
             _ADC_Sample 0014         __size_of___ftdiv 0062         __size_of___fttol 0057  
               ___ftpack 0205                 ___lwtoft 0263                 _adresult 0046  
          __size_of_main 0046                 _test_adc 0048                 _power_ad 0044  
               intlevel1 0000              ?_ADC_Sample 0072               _OPTION_REG 0001  



Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Wed Sep 13 10:21:52 2023

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F072
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	_tmp4_text,global,class=CODE,delta=2
     6                           	psect	_tmp3_text,global,class=CODE,delta=2
     7                           	psect	_tmp2_text,global,class=CODE,delta=2
     8                           	psect	_tmp1_text,global,class=CODE,delta=2
     9                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	pa_nodes0,global,class=CODE,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 1.45
    21                           ; Generated 16/11/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F887 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0703                     _tmp4_absaddr	set	1795
    55  0702                     _tmp3_absaddr	set	1794
    56  0701                     _tmp2_absaddr	set	1793
    57  0700                     _tmp1_absaddr	set	1792
    58  0703                     _tmp4_absaddr	set	1795
    59                           
    60                           	psect	strings
    61  0000                     __pstrings:	
    62                           
    63                           	psect	_tmp4_text
    64  0703                     __p_tmp4_text:	
    65  0703                     _tmp4:	
    66  0703  34AA               	retlw	170
    67  0704                     __end_of_tmp4:	
    68  0702                     _tmp3_absaddr	set	1794
    69                           
    70                           	psect	_tmp3_text
    71  0702                     __p_tmp3_text:	
    72  0702                     _tmp3:	
    73  0702  34AA               	retlw	170
    74  0703                     __end_of_tmp3:	
    75  0701                     _tmp2_absaddr	set	1793
    76                           
    77                           	psect	_tmp2_text
    78  0701                     __p_tmp2_text:	
    79  0701                     _tmp2:	
    80  0701  34AA               	retlw	170
    81  0702                     __end_of_tmp2:	
    82  0700                     _tmp1_absaddr	set	1792
    83                           
    84                           	psect	_tmp1_text
    85  0700                     __p_tmp1_text:	
    86  0700                     _tmp1:	
    87  0700  34AA               	retlw	170
    88  0701                     __end_of_tmp1:	
    89                           
    90                           	psect	nvCOMMON
    91  007B                     __pnvCOMMON:	
    92  007B                     _datanum:	
    93  007B                     	ds	1
    94  005F                     _GIE	set	95
    95  0092                     _EEADRH	set	146
    96  0091                     _EEADR	set	145
    97  0090                     _EEDATH	set	144
    98  008F                     _EEDAT	set	143
    99  008E                     _EECON2	set	142
   100  0085                     _TRISA	set	133
   101  0468                     _RD	set	1128
   102  0469                     _WR	set	1129
   103  046A                     _WREN	set	1130
   104  046F                     _EEPGD	set	1135
   105  0430                     _RA0	set	1072
   106  0431                     _RA1	set	1073
   107                           
   108                           	psect	cinit
   109  0704                     start_initialization:	
   110                           ; #config settings
   111                           
   112  0704                     __initialization:	
   113                           
   114                           ; Clear objects allocated to COMMON
   115  0704  01F0               	clrf	__pbssCOMMON& (0+127)
   116  0705  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   117  0706  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   118  0707  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   119  0708  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   120  0709  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   121  070A                     end_of_initialization:	
   122                           ;End of C runtime variable initialization code
   123                           
   124  070A                     __end_of__initialization:	
   125  070A  0183               	clrf	3
   126  070B  2F0C               	ljmp	_main	;jump to C main() function
   127                           
   128                           	psect	bssCOMMON
   129  0070                     __pbssCOMMON:	
   130  0070                     _read_data:	
   131  0070                     	ds	2
   132  0072                     _t:	
   133  0072                     	ds	2
   134  0074                     _read_rom_data:	
   135  0074                     	ds	1
   136  0075                     _data:	
   137  0075                     	ds	1
   138                           
   139                           	psect	cstackCOMMON
   140  0076                     __pcstackCOMMON:	
   141  0076                     ?_Memory_Write:	
   142  0076                     ?_Memory_Read:	
   143                           ; 1 bytes @ 0x0
   144                           
   145  0076                     ??_Memory_Read:	
   146                           ; 1 bytes @ 0x0
   147                           
   148  0076                     ?_Program_Read:	
   149                           ; 1 bytes @ 0x0
   150                           
   151  0076                     ?_main:	
   152                           ; 1 bytes @ 0x0
   153                           
   154  0076                     Memory_Write@Value:	
   155                           ; 1 bytes @ 0x0
   156                           
   157  0076                     Program_Read@P_Addr:	
   158                           ; 2 bytes @ 0x0
   159                           
   160                           
   161                           ; 2 bytes @ 0x0
   162  0076                     	ds	2
   163  0078                     ??_Memory_Write:	
   164  0078                     ??_Program_Read:	
   165                           ; 1 bytes @ 0x2
   166                           
   167  0078                     Memory_Write@Addr:	
   168                           ; 1 bytes @ 0x2
   169                           
   170  0078                     Memory_Read@Addr:	
   171                           ; 1 bytes @ 0x2
   172                           
   173                           
   174                           ; 1 bytes @ 0x2
   175  0078                     	ds	1
   176  0079                     ??_main:	
   177  0079                     main@read_addr:	
   178                           ; 1 bytes @ 0x3
   179                           
   180                           
   181                           ; 2 bytes @ 0x3
   182  0079                     	ds	2
   183                           
   184                           	psect	maintext
   185  070C                     __pmaintext:	
   186 ;;
   187 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   188 ;;
   189 ;; *************** function _main *****************
   190 ;; Defined at:
   191 ;;		line 23 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F072¿ª·¢°ü\SC8F072_DEMO_C\SC8F072_EEPRom_Demo\main.c"
   192 ;; Parameters:    Size  Location     Type
   193 ;;		None
   194 ;; Auto vars:     Size  Location     Type
   195 ;;  read_addr       2    3[COMMON] unsigned int 
   196 ;; Return value:  Size  Location     Type
   197 ;;                  1    wreg      void 
   198 ;; Registers used:
   199 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   200 ;; Tracked objects:
   201 ;;		On entry : B00/0
   202 ;;		On exit  : 100/100
   203 ;;		Unchanged: 0/0
   204 ;; Data sizes:     COMMON   BANK0   BANK1
   205 ;;      Params:         0       0       0
   206 ;;      Locals:         2       0       0
   207 ;;      Temps:          0       0       0
   208 ;;      Totals:         2       0       0
   209 ;;Total ram usage:        2 bytes
   210 ;; Hardware stack levels required when called:    1
   211 ;; This function calls:
   212 ;;		_Memory_Read
   213 ;;		_Memory_Write
   214 ;;		_Program_Read
   215 ;; This function is called by:
   216 ;;		Startup code after reset
   217 ;; This function uses a non-reentrant model
   218 ;;
   219                           
   220                           
   221                           ;psect for function _main
   222  070C                     _main:	
   223                           
   224                           ;incstack = 0
   225                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   226  070C  0000               	nop	;# 
   227  070D  0064               	clrwdt	;# 
   228                           
   229                           ;main.c: 27: TRISA = 0;
   230  070E  1683               	bsf	3,5	;RP0=1, select bank1
   231  070F  0185               	clrf	5	;volatile
   232  0710                     L1:	
   233                           
   234                           ;main.c: 28: data = 0;
   235  0710  01F5               	clrf	_data	;volatile
   236  0711                     l597:	
   237                           ;main.c: 47: while(1)
   238                           
   239  0711  0064               	clrwdt	;# 
   240                           
   241                           ;main.c: 50: for(datanum=0;datanum<32;datanum++)
   242  0712  01FB               	clrf	_datanum	;volatile
   243  0713  3020               	movlw	32
   244  0714  027B               	subwf	_datanum,w	;volatile
   245  0715  1803               	btfsc	3,0
   246  0716  2F2B               	goto	l1118
   247  0717                     l1108:	
   248                           
   249                           ;main.c: 51: {
   250                           ;main.c: 52: Memory_Write(datanum,0x55aa);
   251  0717  30AA               	movlw	170
   252  0718  00F6               	movwf	Memory_Write@Value
   253  0719  3055               	movlw	85
   254  071A  00F7               	movwf	Memory_Write@Value+1
   255  071B  087B               	movf	_datanum,w	;volatile
   256  071C  2756               	fcall	_Memory_Write
   257                           
   258                           ;main.c: 53: Memory_Read(datanum);
   259  071D  087B               	movf	_datanum,w	;volatile
   260  071E  276E               	fcall	_Memory_Read
   261                           
   262                           ;main.c: 54: if(0x55aa == read_data)
   263  071F  30AA               	movlw	170
   264  0720  0670               	xorwf	_read_data,w	;volatile
   265  0721  3055               	movlw	85
   266  0722  1903               	skipnz
   267  0723  0671               	xorwf	_read_data+1,w	;volatile
   268  0724  1903               	btfsc	3,2
   269                           
   270                           ;main.c: 55: {
   271                           ;main.c: 56: data++;
   272  0725  0AF5               	incf	_data,f	;volatile
   273  0726  0AFB               	incf	_datanum,f	;volatile
   274  0727  3020               	movlw	32
   275  0728  027B               	subwf	_datanum,w	;volatile
   276  0729  1C03               	skipc
   277  072A  2F17               	goto	l1108
   278  072B                     l1118:	
   279                           
   280                           ;main.c: 57: }
   281                           ;main.c: 59: }
   282                           ;main.c: 60: if(data == 32)
   283  072B  3020               	movlw	32
   284  072C  0675               	xorwf	_data,w	;volatile
   285                           
   286                           ;main.c: 61: {
   287                           ;main.c: 62: RA0 = 1;
   288  072D  1683               	bsf	3,5	;RP0=1, select bank1
   289  072E  1D03               	btfss	3,2
   290  072F  2F33               	goto	L2
   291  0730  1406               	bsf	6,0	;volatile
   292                           
   293                           ;main.c: 63: data = 0;
   294  0731  01F5               	clrf	_data	;volatile
   295                           
   296                           ;main.c: 64: }
   297  0732  2F34               	goto	l1124
   298  0733                     L2:	
   299                           ;main.c: 65: else RA0 = 0;
   300                           
   301  0733  1006               	bcf	6,0	;volatile
   302  0734                     l1124:	
   303                           
   304                           ;main.c: 67: for(datanum=0;datanum<4;datanum++)
   305  0734  01FB               	clrf	_datanum	;volatile
   306  0735  3004               	movlw	4
   307  0736  027B               	subwf	_datanum,w	;volatile
   308  0737  1803               	btfsc	3,0
   309  0738  2F4E               	goto	l1140
   310  0739                     l1130:	
   311                           
   312                           ;main.c: 68: {
   313                           ;main.c: 69: unsigned int read_addr = 0x0700;
   314  0739  3007               	movlw	7
   315  073A  01F9               	clrf	main@read_addr
   316  073B  00FA               	movwf	main@read_addr+1
   317                           
   318                           ;main.c: 70: read_addr = read_addr + datanum;
   319  073C  087B               	movf	_datanum,w	;volatile
   320  073D  07F9               	addwf	main@read_addr,f
   321  073E  1803               	skipnc
   322  073F  0AFA               	incf	main@read_addr+1,f
   323                           
   324                           ;main.c: 71: Program_Read(read_addr);
   325  0740  087A               	movf	main@read_addr+1,w
   326  0741  00F7               	movwf	Program_Read@P_Addr+1
   327  0742  0879               	movf	main@read_addr,w
   328  0743  00F6               	movwf	Program_Read@P_Addr
   329  0744  2782               	fcall	_Program_Read
   330                           
   331                           ;main.c: 72: if(0xaa == read_rom_data)
   332  0745  30AA               	movlw	170
   333  0746  0674               	xorwf	_read_rom_data,w	;volatile
   334  0747  1903               	btfsc	3,2
   335                           
   336                           ;main.c: 73: {
   337                           ;main.c: 74: data++;
   338  0748  0AF5               	incf	_data,f	;volatile
   339  0749  0AFB               	incf	_datanum,f	;volatile
   340  074A  3004               	movlw	4
   341  074B  027B               	subwf	_datanum,w	;volatile
   342  074C  1C03               	skipc
   343  074D  2F39               	goto	l1130
   344  074E                     l1140:	
   345                           
   346                           ;main.c: 75: }
   347                           ;main.c: 77: }
   348                           ;main.c: 78: if(data == 4)
   349  074E  3004               	movlw	4
   350  074F  0675               	xorwf	_data,w	;volatile
   351  0750  1D03               	btfss	3,2
   352  0751  2F54               	goto	l606
   353                           
   354                           ;main.c: 79: {
   355                           ;main.c: 80: RA1 = 1;
   356  0752  1486               	bsf	6,1	;volatile
   357  0753  2F10               	goto	L1
   358  0754                     l606:	
   359                           ;main.c: 82: }
   360                           
   361                           ;main.c: 81: data = 0;
   362                           
   363                           
   364                           ;main.c: 83: else RA1 = 0;
   365  0754  1086               	bcf	6,1	;volatile
   366  0755  2F11               	goto	l597
   367  0756                     __end_of_main:	
   368                           
   369                           	psect	text1
   370  0782                     __ptext1:	
   371 ;; *************** function _Program_Read *****************
   372 ;; Defined at:
   373 ;;		line 151 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F072¿ª·¢°ü\SC8F072_DEMO_C\SC8F072_EEPRom_Demo\main.c"
   374 ;; Parameters:    Size  Location     Type
   375 ;;  P_Addr          2    0[COMMON] unsigned int 
   376 ;; Auto vars:     Size  Location     Type
   377 ;;		None
   378 ;; Return value:  Size  Location     Type
   379 ;;                  1    wreg      void 
   380 ;; Registers used:
   381 ;;		wreg
   382 ;; Tracked objects:
   383 ;;		On entry : 0/100
   384 ;;		On exit  : 100/100
   385 ;;		Unchanged: 0/0
   386 ;; Data sizes:     COMMON   BANK0   BANK1
   387 ;;      Params:         2       0       0
   388 ;;      Locals:         0       0       0
   389 ;;      Temps:          0       0       0
   390 ;;      Totals:         2       0       0
   391 ;;Total ram usage:        2 bytes
   392 ;; Hardware stack levels used:    1
   393 ;; This function calls:
   394 ;;		Nothing
   395 ;; This function is called by:
   396 ;;		_main
   397 ;; This function uses a non-reentrant model
   398 ;;
   399                           
   400                           
   401                           ;psect for function _Program_Read
   402  0782                     _Program_Read:	
   403                           
   404                           ;main.c: 154: EEADR = P_Addr & 0x00ff;
   405                           
   406                           ;incstack = 0
   407                           ; Regs used in _Program_Read: [wreg]
   408  0782  0876               	movf	Program_Read@P_Addr,w
   409  0783  1683               	bsf	3,5	;RP0=1, select bank1
   410  0784  0091               	movwf	17	;volatile
   411                           
   412                           ;main.c: 155: EEADRH = (P_Addr & 0xff00)>>8;
   413  0785  0877               	movf	Program_Read@P_Addr+1,w
   414  0786  0092               	movwf	18	;volatile
   415                           
   416                           ;main.c: 157: EEPGD = 1;
   417  0787  178D               	bsf	13,7	;volatile
   418                           
   419                           ;main.c: 159: RD = 1;
   420  0788  140D               	bsf	13,0	;volatile
   421  0789  0000               	nop	;# 
   422  078A  0000               	nop	;# 
   423                           
   424                           ;main.c: 163: read_rom_data = EEDAT;
   425  078B  1683               	bsf	3,5	;RP0=1, select bank1
   426  078C  080F               	movf	15,w	;volatile
   427  078D  00F4               	movwf	_read_rom_data	;volatile
   428  078E  0008               	return
   429  078F                     __end_of_Program_Read:	
   430                           
   431                           	psect	text2
   432  0756                     __ptext2:	
   433 ;; *************** function _Memory_Write *****************
   434 ;; Defined at:
   435 ;;		line 97 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F072¿ª·¢°ü\SC8F072_DEMO_C\SC8F072_EEPRom_Demo\main.c"
   436 ;; Parameters:    Size  Location     Type
   437 ;;  Addr            1    wreg     unsigned char 
   438 ;;  Value           2    0[COMMON] unsigned int 
   439 ;; Auto vars:     Size  Location     Type
   440 ;;  Addr            1    2[COMMON] unsigned char 
   441 ;; Return value:  Size  Location     Type
   442 ;;                  1    wreg      void 
   443 ;; Registers used:
   444 ;;		wreg
   445 ;; Tracked objects:
   446 ;;		On entry : 0/100
   447 ;;		On exit  : 100/100
   448 ;;		Unchanged: 0/0
   449 ;; Data sizes:     COMMON   BANK0   BANK1
   450 ;;      Params:         2       0       0
   451 ;;      Locals:         1       0       0
   452 ;;      Temps:          0       0       0
   453 ;;      Totals:         3       0       0
   454 ;;Total ram usage:        3 bytes
   455 ;; Hardware stack levels used:    1
   456 ;; This function calls:
   457 ;;		Nothing
   458 ;; This function is called by:
   459 ;;		_main
   460 ;; This function uses a non-reentrant model
   461 ;;
   462                           
   463                           
   464                           ;psect for function _Memory_Write
   465  0756                     _Memory_Write:	
   466                           
   467                           ;incstack = 0
   468                           ; Regs used in _Memory_Write: [wreg]
   469                           ;Memory_Write@Addr stored from wreg
   470  0756  00F8               	movwf	Memory_Write@Addr
   471                           
   472                           ;main.c: 100: EEADR = Addr;
   473  0757  1683               	bsf	3,5	;RP0=1, select bank1
   474  0758  0091               	movwf	17	;volatile
   475                           
   476                           ;main.c: 101: EEPGD = 0;
   477  0759  138D               	bcf	13,7	;volatile
   478                           
   479                           ;main.c: 103: EEDAT = Value & 0x00ff;
   480  075A  0876               	movf	Memory_Write@Value,w
   481  075B  008F               	movwf	15	;volatile
   482                           
   483                           ;main.c: 104: EEDATH = (Value & 0xff00)>>8;
   484  075C  0877               	movf	Memory_Write@Value+1,w
   485  075D  0090               	movwf	16	;volatile
   486                           
   487                           ;main.c: 106: WREN = 1;
   488  075E  150D               	bsf	13,2	;volatile
   489  075F                     l1084:	
   490                           
   491                           ;main.c: 107: GIE = 0;
   492  075F  138B               	bcf	11,7	;volatile
   493                           
   494                           ;main.c: 109: while(GIE) GIE = 0;
   495  0760  1B8B               	btfsc	11,7	;volatile
   496  0761  2F5F               	goto	l1084
   497                           
   498                           ;main.c: 111: EECON2 = 0x55;
   499  0762  3055               	movlw	85
   500  0763  1683               	bsf	3,5	;RP0=1, select bank1
   501  0764  008E               	movwf	14	;volatile
   502                           
   503                           ;main.c: 112: EECON2 = 0xaa;
   504  0765  30AA               	movlw	170
   505  0766  008E               	movwf	14	;volatile
   506                           
   507                           ;main.c: 113: WR = 1;
   508  0767  148D               	bsf	13,1	;volatile
   509  0768  0000               	nop	;# 
   510  0769  0000               	nop	;# 
   511                           
   512                           ;main.c: 116: WREN = 0;
   513  076A  1683               	bsf	3,5	;RP0=1, select bank1
   514  076B  110D               	bcf	13,2	;volatile
   515                           
   516                           ;main.c: 117: GIE = 1;
   517  076C  178B               	bsf	11,7	;volatile
   518  076D  0008               	return
   519  076E                     __end_of_Memory_Write:	
   520                           
   521                           	psect	text3
   522  076E                     __ptext3:	
   523 ;; *************** function _Memory_Read *****************
   524 ;; Defined at:
   525 ;;		line 129 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F072¿ª·¢°ü\SC8F072_DEMO_C\SC8F072_EEPRom_Demo\main.c"
   526 ;; Parameters:    Size  Location     Type
   527 ;;  Addr            1    wreg     unsigned char 
   528 ;; Auto vars:     Size  Location     Type
   529 ;;  Addr            1    2[COMMON] unsigned char 
   530 ;; Return value:  Size  Location     Type
   531 ;;                  1    wreg      void 
   532 ;; Registers used:
   533 ;;		wreg, btemp+1
   534 ;; Tracked objects:
   535 ;;		On entry : 100/100
   536 ;;		On exit  : 100/100
   537 ;;		Unchanged: 0/0
   538 ;; Data sizes:     COMMON   BANK0   BANK1
   539 ;;      Params:         0       0       0
   540 ;;      Locals:         1       0       0
   541 ;;      Temps:          2       0       0
   542 ;;      Totals:         3       0       0
   543 ;;Total ram usage:        3 bytes
   544 ;; Hardware stack levels used:    1
   545 ;; This function calls:
   546 ;;		Nothing
   547 ;; This function is called by:
   548 ;;		_main
   549 ;; This function uses a non-reentrant model
   550 ;;
   551                           
   552                           
   553                           ;psect for function _Memory_Read
   554  076E                     _Memory_Read:	
   555                           
   556                           ;incstack = 0
   557                           ; Regs used in _Memory_Read: [wreg+btemp+1]
   558                           ;Memory_Read@Addr stored from wreg
   559  076E  00F8               	movwf	Memory_Read@Addr
   560                           
   561                           ;main.c: 132: EEADR = Addr;
   562  076F  0091               	movwf	17	;volatile
   563                           
   564                           ;main.c: 133: EEPGD = 0;
   565  0770  138D               	bcf	13,7	;volatile
   566                           
   567                           ;main.c: 135: RD = 1;
   568  0771  140D               	bsf	13,0	;volatile
   569  0772  0000               	nop	;# 
   570  0773  0000               	nop	;# 
   571                           
   572                           ;main.c: 139: read_data = EEDAT;
   573  0774  1683               	bsf	3,5	;RP0=1, select bank1
   574  0775  080F               	movf	15,w	;volatile
   575  0776  00F0               	movwf	_read_data	;volatile
   576  0777  01F1               	clrf	_read_data+1	;volatile
   577                           
   578                           ;main.c: 140: read_data = read_data | (int)(EEDATH<<8);
   579  0778  0810               	movf	16,w	;volatile
   580  0779  00F6               	movwf	??_Memory_Read
   581  077A  01F7               	clrf	??_Memory_Read+1
   582  077B  00F7               	movwf	??_Memory_Read+1
   583  077C  01F6               	clrf	??_Memory_Read
   584  077D  0876               	movf	??_Memory_Read,w
   585  077E  04F0               	iorwf	_read_data,f	;volatile
   586  077F  0877               	movf	??_Memory_Read+1,w
   587  0780  04F1               	iorwf	_read_data+1,f	;volatile
   588  0781  0008               	return
   589  0782                     __end_of_Memory_Read:	
   590  007E                     btemp	set	126	;btemp
   591  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         6
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      12
    BANK0            80      0       0
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_Memory_Read
    _main->_Memory_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     257
                                              3 COMMON     2     2      0
                        _Memory_Read
                       _Memory_Write
                       _Program_Read
 ---------------------------------------------------------------------------------
 (1) _Program_Read                                         2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Memory_Write                                         3     1      2     120
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Memory_Read                                          3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Memory_Read
   _Memory_Write
   _Program_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0       C       7        0.0%
DATA                 0      0       C       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Sep 13 10:21:52 2023

                      _t 0072                       _RD 0468                       _WR 0469  
                    l606 0754                      l597 0711                      _GIE 005F  
                    _RA0 0430                      _RA1 0431                     l1130 0739  
                   l1140 074E                     l1124 0734                     l1108 0717  
                   l1118 072B                     l1084 075F                     _WREN 046A  
                   _data 0075                     _main 070C                     _tmp1 0700  
                   _tmp2 0701                     _tmp3 0702                     _tmp4 0703  
                   btemp 007E                     start 0000                    ?_main 0076  
                  _EEADR 0091                    _EEDAT 008F                    _EEPGD 046F  
                  _TRISA 0085            ??_Memory_Read 0076                    status 0003  
                  wtemp0 007E          __initialization 0704             __end_of_main 0756  
           __end_of_tmp1 0701             __end_of_tmp2 0702             __end_of_tmp3 0703  
           __end_of_tmp4 0704            ?_Memory_Write 0076                   ??_main 0079  
                 _EEADRH 0092                   _EEDATH 0090                   _EECON2 008E  
    __end_of_Memory_Read 0782            main@read_addr 0079           ??_Memory_Write 0078  
__end_of__initialization 070A           __pcstackCOMMON 0076             __p_tmp1_text 0700  
           __p_tmp2_text 0701             __p_tmp3_text 0702             __p_tmp4_text 0703  
            _Memory_Read 076E               __pnvCOMMON 007B               __pmaintext 070C  
     Program_Read@P_Addr 0076            _read_rom_data 0074     __end_of_Memory_Write 076E  
                _datanum 007B                  __ptext1 0782                  __ptext2 0756  
                __ptext3 076E            ?_Program_Read 0076     end_of_initialization 070A  
         ??_Program_Read 0078        Memory_Write@Value 0076      start_initialization 0704  
  __size_of_Memory_Write 0018             ?_Memory_Read 0076             _Memory_Write 0756  
            __pbssCOMMON 0070                ___latbits 0000     __end_of_Program_Read 078F  
              __pstrings 0000                _read_data 0070         Memory_Write@Addr 0078  
           _tmp1_absaddr 0700             _tmp2_absaddr 0701     __size_of_Memory_Read 0014  
           _tmp3_absaddr 0702             _tmp4_absaddr 0703          Memory_Read@Addr 0078  
  __size_of_Program_Read 000D            __size_of_main 004A             _Program_Read 0782  



Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Dec 10 21:25:44 2024

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F072
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	swtext1,local,class=CONST,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	swtext2,local,class=CONST,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	swtext3,local,class=CONST,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	pa_nodes0,global,class=CODE,delta=2
    53                           	dabs	1,0x7E,2
    54  0000                     
    55                           ; Version 1.45
    56                           ; Generated 16/11/2017 GMT
    57                           ; 
    58                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC16F887 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     
    90                           	psect	idataCOMMON
    91  0000                     __pidataCOMMON:	
    92                           
    93                           	psect	idataBANK0
    94  0000                     __pidataBANK0:	
    95                           
    96                           	psect	idataBANK1
    97  0000                     __pidataBANK1:	
    98                           
    99                           	psect	strings
   100  07C1                     __pstrings:	
   101  07C1                     stringtab:	
   102  07C1                     __stringtab:	
   103  07C1                     stringcode:	
   104                           ;	String table - string pointers are 1 byte each
   105                           
   106  07C1                     stringdir:	
   107  07C1  3007               	movlw	high stringdir
   108  07C2  008A               	movwf	10
   109  07C3  0804               	movf	4,w
   110  07C4  0A84               	incf	4,f
   111  07C5  0782               	addwf	2,f
   112  07C6                     __stringbase:	
   113  07C6  3400               	retlw	0
   114  07C7                     __end_of__stringtab:	
   115  07C7                     _duty_steps:	
   116  07C7  3442               	retlw	66
   117  07C8  3449               	retlw	73
   118  07C9  3455               	retlw	85
   119  07CA  345B               	retlw	91
   120  07CB  345F               	retlw	95
   121  07CC  3400               	retlw	0
   122  07CD                     __end_of_duty_steps:	
   123  001E                     _PWMD01H	set	30
   124  001D                     _PWMCON2	set	29
   125  001C                     _PWMT4L	set	28
   126  001B                     _PWMD4L	set	27
   127  001A                     _PWMD1L	set	26
   128  0019                     _PWMD0L	set	25
   129  0018                     _PWMTH	set	24
   130  0017                     _PWMTL	set	23
   131  0016                     _PWMCON1	set	22
   132  0015                     _PWMCON0	set	21
   133  0014                     _OSCCON	set	20
   134  0013                     _T2CON	set	19
   135  0011                     _PR2	set	17
   136  000B                     _INTCON	set	11
   137  0009                     _IOCB	set	9
   138  0008                     _WPUB	set	8
   139  0007                     _WPDB	set	7
   140  0006                     _PORTB	set	6
   141  0005                     _TRISB	set	5
   142  0001                     _OPTION_REG	set	1
   143  0071                     _TMR2IE	set	113
   144  0073                     _RAIE	set	115
   145  0069                     _TMR2IF	set	105
   146  006B                     _RAIF	set	107
   147  0058                     _RBIF	set	88
   148  005A                     _T0IF	set	90
   149  005B                     _RBIE	set	91
   150  005D                     _T0IE	set	93
   151  005F                     _GIE	set	95
   152  0030                     _RB0	set	48
   153  0031                     _RB1	set	49
   154  0032                     _RB2	set	50
   155  0033                     _RB3	set	51
   156  0034                     _RB4	set	52
   157  0028                     _TRISB0	set	40
   158  0029                     _TRISB1	set	41
   159  002A                     _TRISB2	set	42
   160  002B                     _TRISB3	set	43
   161  002C                     _TRISB4	set	44
   162  009E                     _PWMD23H	set	158
   163  009C                     _PWMD3L	set	156
   164  009B                     _PWMD2L	set	155
   165  0099                     _ADRESH	set	153
   166  0098                     _ADRESL	set	152
   167  0096                     _ADCON1	set	150
   168  0095                     _ADCON0	set	149
   169  0089                     _IOCA	set	137
   170  0088                     _WPUA	set	136
   171  0087                     _WPDA	set	135
   172  0086                     _PORTA	set	134
   173  0085                     _TRISA	set	133
   174  0081                     _TMR0	set	129
   175  04B2                     _LDO_EN	set	1202
   176  04B6                     _CHS4	set	1206
   177  04A9                     _GODONE	set	1193
   178                           
   179                           	psect	cinit
   180  000D                     start_initialization:	
   181                           ; #config settings
   182                           
   183  000D                     __initialization:	
   184  000D  307E               	movlw	126
   185                           
   186                           ; Initialize objects allocated to BANK1
   187  000E  1683               	bsf	3,5	;RP0=1, select bank1
   188                           
   189                           ;initializer for _nums
   190  000F  00B3               	movwf	__pdataBANK1& (0+127)
   191  0010  3030               	movlw	48
   192  0011  00B4               	movwf	(__pdataBANK1+1)& (0+127)
   193  0012  306D               	movlw	109
   194  0013  00B5               	movwf	(__pdataBANK1+2)& (0+127)
   195  0014  3079               	movlw	121
   196  0015  00B6               	movwf	(__pdataBANK1+3)& (0+127)
   197  0016  3033               	movlw	51
   198  0017  00B7               	movwf	(__pdataBANK1+4)& (0+127)
   199  0018  305B               	movlw	91
   200  0019  00B8               	movwf	(__pdataBANK1+5)& (0+127)
   201  001A  305F               	movlw	95
   202  001B  00B9               	movwf	(__pdataBANK1+6)& (0+127)
   203  001C  3070               	movlw	112
   204  001D  00BA               	movwf	(__pdataBANK1+7)& (0+127)
   205  001E  307F               	movlw	127
   206  001F  00BB               	movwf	(__pdataBANK1+8)& (0+127)
   207  0020  307B               	movlw	123
   208  0021  00BC               	movwf	(__pdataBANK1+9)& (0+127)
   209  0022  3047               	movlw	71
   210  0023  00BD               	movwf	(__pdataBANK1+10)& (0+127)
   211  0024  3001               	movlw	1
   212  0025  01BE               	clrf	(__pdataBANK1+11)& (0+127)
   213                           
   214                           ;initializer for _num_hund
   215  0026  01BF               	clrf	(__pdataBANK1+12)& (0+127)
   216  0027  00C0               	movwf	(__pdataBANK1+13)& (0+127)
   217  0028  3003               	movlw	3
   218  0029  00C1               	movwf	(__pdataBANK1+14)& (0+127)
   219  002A  300D               	movlw	13
   220  002B  00C2               	movwf	(__pdataBANK1+15)& (0+127)
   221  002C  300F               	movlw	15
   222  002D  00C3               	movwf	(__pdataBANK1+16)& (0+127)
   223  002E  3002               	movlw	2
   224                           
   225                           ; Initialize objects allocated to BANK0
   226  002F  1283               	bcf	3,5	;RP0=0, select bank0
   227                           
   228                           ;initializer for _unit
   229  0030  00EE               	movwf	__pdataBANK0& (0+127)
   230                           
   231                           ;initializer for _hundreds
   232  0031  3004               	movlw	4
   233  0032  00EF               	movwf	(__pdataBANK0+1)& (0+127)
   234                           
   235                           ;initializer for _tens
   236  0033  00FD               	movwf	__pdataCOMMON& (0+127)
   237  0034  30A0               	movlw	low __pbssBANK1
   238                           
   239                           ; Clear objects allocated to BANK1
   240  0035  1383               	bcf	3,7	;select IRP bank0
   241  0036  0084               	movwf	4
   242  0037  30B3               	movlw	low (__pbssBANK1+19)
   243  0038  27D9               	fcall	clear_ram0
   244                           
   245                           ; Clear objects allocated to BANK0
   246  0039  01EC               	clrf	__pbssBANK0& (0+127)
   247  003A  01ED               	clrf	(__pbssBANK0+1)& (0+127)
   248  003B                     end_of_initialization:	
   249                           ;End of C runtime variable initialization code
   250                           
   251  003B                     __end_of__initialization:	
   252  003B  0183               	clrf	3
   253  003C  2FCD               	ljmp	_main	;jump to C main() function
   254                           
   255                           	psect	dataCOMMON
   256  007D                     __pdataCOMMON:	
   257  007D                     _tens:	
   258  007D                     	ds	1
   259                           
   260                           	psect	bssBANK0
   261  006C                     __pbssBANK0:	
   262  006C                     _pwm_duty:	
   263  006C                     	ds	1
   264  006D                     _power_percent:	
   265  006D                     	ds	1
   266                           
   267                           	psect	dataBANK0
   268  006E                     __pdataBANK0:	
   269  006E                     _unit:	
   270  006E                     	ds	1
   271  006F                     _hundreds:	
   272  006F                     	ds	1
   273                           
   274                           	psect	bssBANK1
   275  00A0                     __pbssBANK1:	
   276  00A0                     _Time_delay:	
   277  00A0                     	ds	2
   278  00A2                     _long_press_counter:	
   279  00A2                     	ds	2
   280  00A4                     _adc_last:	
   281  00A4                     	ds	2
   282  00A6                     _ADC_delay:	
   283  00A6                     	ds	2
   284  00A8                     _power_ad:	
   285  00A8                     	ds	2
   286  00AA                     Display@scan_cnt:	
   287  00AA                     	ds	1
   288  00AB                     _T_flag:	
   289  00AB                     	ds	1
   290  00AC                     _button_lflag:	
   291  00AC                     	ds	1
   292  00AD                     _button_sflag:	
   293  00AD                     	ds	1
   294  00AE                     _debounce_counter:	
   295  00AE                     	ds	1
   296  00AF                     _ADC_Flag:	
   297  00AF                     	ds	1
   298  00B0                     _test_adc:	
   299  00B0                     	ds	1
   300  00B1                     _adresult:	
   301  00B1                     	ds	2
   302                           
   303                           	psect	dataBANK1
   304  00B3                     __pdataBANK1:	
   305  00B3                     _nums:	
   306  00B3                     	ds	12
   307  00BF                     _num_hund:	
   308  00BF                     	ds	5
   309                           
   310                           	psect	clrtext
   311  07D9                     clear_ram0:	
   312                           ;	Called with FSR containing the base address, and
   313                           ;	W with the last address+1
   314                           
   315  07D9  0064               	clrwdt	;clear the watchdog before getting into this loop
   316  07DA                     clrloop0:	
   317  07DA  0180               	clrf	0	;clear RAM location pointed to by FSR
   318  07DB  0A84               	incf	4,f	;increment pointer
   319  07DC  0604               	xorwf	4,w	;XOR with final address
   320  07DD  1903               	btfsc	3,2	;have we reached the end yet?
   321  07DE  3400               	retlw	0	;all done for this memory range, return
   322  07DF  0604               	xorwf	4,w	;XOR again to restore value
   323  07E0  2FDA               	goto	clrloop0	;do the next byte
   324                           
   325                           	psect	cstackBANK1
   326  00C4                     __pcstackBANK1:	
   327  00C4                     ADC_Sample@j:	
   328                           
   329                           ; 1 bytes @ 0x0
   330  00C4                     	ds	1
   331  00C5                     ADC_Sample@adch:	
   332                           
   333                           ; 1 bytes @ 0x1
   334  00C5                     	ds	1
   335  00C6                     ADC_Sample@i:	
   336                           
   337                           ; 1 bytes @ 0x2
   338  00C6                     	ds	1
   339  00C7                     ADC_Sample@admin:	
   340                           
   341                           ; 2 bytes @ 0x3
   342  00C7                     	ds	2
   343  00C9                     ADC_Sample@admax:	
   344                           
   345                           ; 2 bytes @ 0x5
   346  00C9                     	ds	2
   347  00CB                     ADC_Sample@adsum:	
   348                           
   349                           ; 4 bytes @ 0x7
   350  00CB                     	ds	4
   351  00CF                     ADC_Sample@ad_temp:	
   352                           
   353                           ; 2 bytes @ 0xB
   354  00CF                     	ds	2
   355                           
   356                           	psect	cstackCOMMON
   357  0070                     __pcstackCOMMON:	
   358  0070                     ?_Init_System:	
   359  0070                     ?_Led_Gpio_Init:	
   360                           ; 1 bytes @ 0x0
   361                           
   362  0070                     ?_PWM_Init:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ?_Button_response:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ?_ADC_read:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     ?_Motor_num:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ?_Charge_num:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     ?_Uncharge_num:	
   378                           ; 1 bytes @ 0x0
   379                           
   380  0070                     ?_Display:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0070                     ??_Display:	
   384                           ; 1 bytes @ 0x0
   385                           
   386  0070                     ?_main:	
   387                           ; 1 bytes @ 0x0
   388                           
   389  0070                     ?_Isr_Timer:	
   390                           ; 1 bytes @ 0x0
   391                           
   392  0070                     ?_Set_AllPin_INPUT:	
   393                           ; 1 bytes @ 0x0
   394                           
   395  0070                     ??_Set_AllPin_INPUT:	
   396                           ; 1 bytes @ 0x0
   397                           
   398  0070                     ?_Display_Scan1:	
   399                           ; 1 bytes @ 0x0
   400                           
   401  0070                     ??_Display_Scan1:	
   402                           ; 1 bytes @ 0x0
   403                           
   404  0070                     ?_Display_Scan2:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0070                     ??_Display_Scan2:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0070                     ?_Display_Scan3:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0070                     ??_Display_Scan3:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0070                     ?_Display_Scan4:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0070                     ??_Display_Scan4:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ?_Display_Scan5:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0070                     ??_Display_Scan5:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0070                     ?___lbmod:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ___lbmod@divisor:	
   432                           ; 1 bytes @ 0x0
   433                           
   434                           
   435                           ; 1 bytes @ 0x0
   436  0070                     	ds	1
   437  0071                     ??___lbmod:	
   438                           
   439                           ; 1 bytes @ 0x1
   440  0071                     	ds	1
   441  0072                     ___lbmod@dividend:	
   442                           
   443                           ; 1 bytes @ 0x2
   444  0072                     	ds	1
   445  0073                     ___lbmod@counter:	
   446                           
   447                           ; 1 bytes @ 0x3
   448  0073                     	ds	1
   449  0074                     ___lbmod@rem:	
   450                           
   451                           ; 1 bytes @ 0x4
   452  0074                     	ds	1
   453  0075                     ?___lbdiv:	
   454  0075                     ___lbdiv@divisor:	
   455                           ; 1 bytes @ 0x5
   456                           
   457                           
   458                           ; 1 bytes @ 0x5
   459  0075                     	ds	1
   460  0076                     ??___lbdiv:	
   461  0076                     ___lbdiv@dividend:	
   462                           ; 1 bytes @ 0x6
   463                           
   464                           
   465                           ; 1 bytes @ 0x6
   466  0076                     	ds	1
   467  0077                     ___lbdiv@counter:	
   468                           
   469                           ; 1 bytes @ 0x7
   470  0077                     	ds	1
   471  0078                     ___lbdiv@quotient:	
   472                           
   473                           ; 1 bytes @ 0x8
   474  0078                     	ds	1
   475  0079                     ??_Charge_num:	
   476  0079                     ??_Uncharge_num:	
   477                           ; 1 bytes @ 0x9
   478                           
   479  0079                     Charge_num@hundred:	
   480                           ; 1 bytes @ 0x9
   481                           
   482  0079                     Uncharge_num@hundred:	
   483                           ; 1 bytes @ 0x9
   484                           
   485                           
   486                           ; 1 bytes @ 0x9
   487  0079                     	ds	1
   488  007A                     ??_Isr_Timer:	
   489                           
   490                           ; 1 bytes @ 0xA
   491  007A                     	ds	3
   492                           
   493                           	psect	cstackBANK0
   494  0020                     __pcstackBANK0:	
   495  0020                     ??_Init_System:	
   496  0020                     ??_Led_Gpio_Init:	
   497                           ; 1 bytes @ 0x0
   498                           
   499  0020                     ??_PWM_Init:	
   500                           ; 1 bytes @ 0x0
   501                           
   502  0020                     ??_Motor_num:	
   503                           ; 1 bytes @ 0x0
   504                           
   505  0020                     ?___wmul:	
   506                           ; 1 bytes @ 0x0
   507                           
   508  0020                     ?___awmod:	
   509                           ; 2 bytes @ 0x0
   510                           
   511  0020                     ?___ftpack:	
   512                           ; 2 bytes @ 0x0
   513                           
   514  0020                     ___wmul@multiplier:	
   515                           ; 3 bytes @ 0x0
   516                           
   517  0020                     ___awmod@divisor:	
   518                           ; 2 bytes @ 0x0
   519                           
   520  0020                     ___ftpack@arg:	
   521                           ; 2 bytes @ 0x0
   522                           
   523                           
   524                           ; 3 bytes @ 0x0
   525  0020                     	ds	2
   526  0022                     ___wmul@multiplicand:	
   527  0022                     ___awmod@dividend:	
   528                           ; 2 bytes @ 0x2
   529                           
   530                           
   531                           ; 2 bytes @ 0x2
   532  0022                     	ds	1
   533  0023                     ___ftpack@exp:	
   534                           
   535                           ; 1 bytes @ 0x3
   536  0023                     	ds	1
   537  0024                     ??___wmul:	
   538  0024                     ??___awmod:	
   539                           ; 1 bytes @ 0x4
   540                           
   541  0024                     ___awmod@counter:	
   542                           ; 1 bytes @ 0x4
   543                           
   544  0024                     ___ftpack@sign:	
   545                           ; 1 bytes @ 0x4
   546                           
   547  0024                     ___wmul@product:	
   548                           ; 1 bytes @ 0x4
   549                           
   550                           
   551                           ; 2 bytes @ 0x4
   552  0024                     	ds	1
   553  0025                     ??___ftpack:	
   554  0025                     ___awmod@sign:	
   555                           ; 1 bytes @ 0x5
   556                           
   557                           
   558                           ; 1 bytes @ 0x5
   559  0025                     	ds	1
   560  0026                     ?___awdiv:	
   561  0026                     ___awdiv@divisor:	
   562                           ; 2 bytes @ 0x6
   563                           
   564                           
   565                           ; 2 bytes @ 0x6
   566  0026                     	ds	2
   567  0028                     ?___lwtoft:	
   568  0028                     ___awdiv@dividend:	
   569                           ; 3 bytes @ 0x8
   570                           
   571  0028                     ___lwtoft@c:	
   572                           ; 2 bytes @ 0x8
   573                           
   574                           
   575                           ; 2 bytes @ 0x8
   576  0028                     	ds	2
   577  002A                     ??___awdiv:	
   578  002A                     ___awdiv@counter:	
   579                           ; 1 bytes @ 0xA
   580                           
   581                           
   582                           ; 1 bytes @ 0xA
   583  002A                     	ds	1
   584  002B                     ??___lwtoft:	
   585  002B                     ?___ftmul:	
   586                           ; 1 bytes @ 0xB
   587                           
   588  002B                     ___awdiv@sign:	
   589                           ; 3 bytes @ 0xB
   590                           
   591  002B                     ___ftmul@f1:	
   592                           ; 1 bytes @ 0xB
   593                           
   594                           
   595                           ; 3 bytes @ 0xB
   596  002B                     	ds	1
   597  002C                     ___awdiv@quotient:	
   598                           
   599                           ; 2 bytes @ 0xC
   600  002C                     	ds	2
   601  002E                     ?_Set_PWM:	
   602  002E                     Set_PWM@duty:	
   603                           ; 1 bytes @ 0xE
   604                           
   605  002E                     ___ftmul@f2:	
   606                           ; 1 bytes @ 0xE
   607                           
   608                           
   609                           ; 3 bytes @ 0xE
   610  002E                     	ds	1
   611  002F                     ??_Set_PWM:	
   612  002F                     Set_PWM@channel:	
   613                           ; 1 bytes @ 0xF
   614                           
   615                           
   616                           ; 1 bytes @ 0xF
   617  002F                     	ds	1
   618  0030                     Set_PWM@pulse_width:	
   619                           
   620                           ; 1 bytes @ 0x10
   621  0030                     	ds	1
   622  0031                     ??_Button_response:	
   623  0031                     ??___ftmul:	
   624                           ; 1 bytes @ 0x11
   625                           
   626                           
   627                           ; 1 bytes @ 0x11
   628  0031                     	ds	3
   629  0034                     ___ftmul@exp:	
   630                           
   631                           ; 1 bytes @ 0x14
   632  0034                     	ds	1
   633  0035                     ___ftmul@f3_as_product:	
   634                           
   635                           ; 3 bytes @ 0x15
   636  0035                     	ds	3
   637  0038                     ___ftmul@cntr:	
   638                           
   639                           ; 1 bytes @ 0x18
   640  0038                     	ds	1
   641  0039                     ___ftmul@sign:	
   642                           
   643                           ; 1 bytes @ 0x19
   644  0039                     	ds	1
   645  003A                     ?___ftadd:	
   646  003A                     ___ftadd@f1:	
   647                           ; 3 bytes @ 0x1A
   648                           
   649                           
   650                           ; 3 bytes @ 0x1A
   651  003A                     	ds	3
   652  003D                     ___ftadd@f2:	
   653                           
   654                           ; 3 bytes @ 0x1D
   655  003D                     	ds	3
   656  0040                     ??___ftadd:	
   657                           
   658                           ; 1 bytes @ 0x20
   659  0040                     	ds	3
   660  0043                     ___ftadd@sign:	
   661                           
   662                           ; 1 bytes @ 0x23
   663  0043                     	ds	1
   664  0044                     ___ftadd@exp2:	
   665                           
   666                           ; 1 bytes @ 0x24
   667  0044                     	ds	1
   668  0045                     ___ftadd@exp1:	
   669                           
   670                           ; 1 bytes @ 0x25
   671  0045                     	ds	1
   672  0046                     ?___ftdiv:	
   673  0046                     ___ftdiv@f2:	
   674                           ; 3 bytes @ 0x26
   675                           
   676                           
   677                           ; 3 bytes @ 0x26
   678  0046                     	ds	3
   679  0049                     ___ftdiv@f1:	
   680                           
   681                           ; 3 bytes @ 0x29
   682  0049                     	ds	3
   683  004C                     ??___ftdiv:	
   684                           
   685                           ; 1 bytes @ 0x2C
   686  004C                     	ds	3
   687  004F                     ___ftdiv@cntr:	
   688                           
   689                           ; 1 bytes @ 0x2F
   690  004F                     	ds	1
   691  0050                     ___ftdiv@f3:	
   692                           
   693                           ; 3 bytes @ 0x30
   694  0050                     	ds	3
   695  0053                     ___ftdiv@exp:	
   696                           
   697                           ; 1 bytes @ 0x33
   698  0053                     	ds	1
   699  0054                     ___ftdiv@sign:	
   700                           
   701                           ; 1 bytes @ 0x34
   702  0054                     	ds	1
   703  0055                     ?___fttol:	
   704  0055                     ___fttol@f1:	
   705                           ; 4 bytes @ 0x35
   706                           
   707                           
   708                           ; 3 bytes @ 0x35
   709  0055                     	ds	4
   710  0059                     ??___fttol:	
   711                           
   712                           ; 1 bytes @ 0x39
   713  0059                     	ds	3
   714  005C                     ___fttol@sign1:	
   715                           
   716                           ; 1 bytes @ 0x3C
   717  005C                     	ds	1
   718  005D                     ___fttol@lval:	
   719                           
   720                           ; 4 bytes @ 0x3D
   721  005D                     	ds	4
   722  0061                     ___fttol@exp1:	
   723                           
   724                           ; 1 bytes @ 0x41
   725  0061                     	ds	1
   726  0062                     ?_ADC_Sample:	
   727  0062                     ADC_Sample@adldo:	
   728                           ; 1 bytes @ 0x42
   729                           
   730                           
   731                           ; 1 bytes @ 0x42
   732  0062                     	ds	1
   733  0063                     ??_ADC_Sample:	
   734                           
   735                           ; 1 bytes @ 0x43
   736  0063                     	ds	4
   737  0067                     ??_ADC_read:	
   738                           
   739                           ; 1 bytes @ 0x47
   740  0067                     	ds	1
   741  0068                     ADC_read@power_temp:	
   742                           
   743                           ; 4 bytes @ 0x48
   744  0068                     	ds	4
   745  006C                     ??_main:	
   746                           
   747                           	psect	maintext
   748  07CD                     __pmaintext:	
   749                           ; 1 bytes @ 0x4C
   750 ;;
   751 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   752 ;;
   753 ;; *************** function _main *****************
   754 ;; Defined at:
   755 ;;		line 52 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_Demo\SC8F072_Pwm_Demo.c"
   756 ;; Parameters:    Size  Location     Type
   757 ;;		None
   758 ;; Auto vars:     Size  Location     Type
   759 ;;		None
   760 ;; Return value:  Size  Location     Type
   761 ;;                  1    wreg      void 
   762 ;; Registers used:
   763 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   764 ;; Tracked objects:
   765 ;;		On entry : B00/0
   766 ;;		On exit  : 0/0
   767 ;;		Unchanged: 0/0
   768 ;; Data sizes:     COMMON   BANK0   BANK1
   769 ;;      Params:         0       0       0
   770 ;;      Locals:         0       0       0
   771 ;;      Temps:          0       0       0
   772 ;;      Totals:         0       0       0
   773 ;;Total ram usage:        0 bytes
   774 ;; Hardware stack levels required when called:    7
   775 ;; This function calls:
   776 ;;		_ADC_read
   777 ;;		_Button_response
   778 ;;		_Init_System
   779 ;;		_Led_Gpio_Init
   780 ;;		_PWM_Init
   781 ;; This function is called by:
   782 ;;		Startup code after reset
   783 ;; This function uses a non-reentrant model
   784 ;;
   785                           
   786                           
   787                           ;psect for function _main
   788  07CD                     _main:	
   789                           
   790                           ;SC8F072_Pwm_Demo.c: 56: Init_System();
   791                           
   792                           ;incstack = 0
   793                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   794  07CD  260C               	fcall	_Init_System
   795                           
   796                           ;SC8F072_Pwm_Demo.c: 57: Led_Gpio_Init();
   797  07CE  27FF               	fcall	_Led_Gpio_Init
   798                           
   799                           ;SC8F072_Pwm_Demo.c: 58: PWM_Init();
   800  07CF  2778               	fcall	_PWM_Init
   801  07D0                     l657:	
   802                           ;SC8F072_Pwm_Demo.c: 59: while(1)
   803                           
   804  07D0  0064               	clrwdt	;# 
   805                           
   806                           ;SC8F072_Pwm_Demo.c: 62: Button_response();
   807  07D1  219B               	fcall	_Button_response
   808                           
   809                           ;SC8F072_Pwm_Demo.c: 63: if(ADC_Flag)
   810  07D2  1683               	bsf	3,5	;RP0=1, select bank1
   811  07D3  082F               	movf	_ADC_Flag^(0+128),w	;volatile
   812  07D4  1903               	btfsc	3,2
   813  07D5  2FD7               	goto	l658
   814                           
   815                           ;SC8F072_Pwm_Demo.c: 64: {
   816                           ;SC8F072_Pwm_Demo.c: 65: ADC_read();
   817  07D6  241C               	fcall	_ADC_read
   818  07D7                     l658:	
   819  07D7  0064               	clrwdt	;# 
   820  07D8  2FD0               	goto	l657
   821  07D9                     __end_of_main:	
   822                           
   823                           	psect	text1
   824  0778                     __ptext1:	
   825 ;; *************** function _PWM_Init *****************
   826 ;; Defined at:
   827 ;;		line 129 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_Demo\SC8F072_Pwm_Demo.c"
   828 ;; Parameters:    Size  Location     Type
   829 ;;		None
   830 ;; Auto vars:     Size  Location     Type
   831 ;;		None
   832 ;; Return value:  Size  Location     Type
   833 ;;                  1    wreg      void 
   834 ;; Registers used:
   835 ;;		wreg, status,2
   836 ;; Tracked objects:
   837 ;;		On entry : 100/0
   838 ;;		On exit  : 100/0
   839 ;;		Unchanged: 0/0
   840 ;; Data sizes:     COMMON   BANK0   BANK1
   841 ;;      Params:         0       0       0
   842 ;;      Locals:         0       0       0
   843 ;;      Temps:          0       0       0
   844 ;;      Totals:         0       0       0
   845 ;;Total ram usage:        0 bytes
   846 ;; Hardware stack levels used:    1
   847 ;; Hardware stack levels required when called:    3
   848 ;; This function calls:
   849 ;;		Nothing
   850 ;; This function is called by:
   851 ;;		_main
   852 ;; This function uses a non-reentrant model
   853 ;;
   854                           
   855                           
   856                           ;psect for function _PWM_Init
   857  0778                     _PWM_Init:	
   858                           
   859                           ;SC8F072_Pwm_Demo.c: 131: PWMCON1 = 0B11000000;
   860                           
   861                           ;incstack = 0
   862                           ; Regs used in _PWM_Init: [wreg+status,2]
   863  0778  30C0               	movlw	192
   864  0779  0096               	movwf	22	;volatile
   865                           
   866                           ;SC8F072_Pwm_Demo.c: 132: TRISA = 0B00111111;
   867  077A  303F               	movlw	63
   868  077B  1683               	bsf	3,5	;RP0=1, select bank1
   869  077C  0085               	movwf	5	;volatile
   870                           
   871                           ;SC8F072_Pwm_Demo.c: 133: PWMTL = 0XFF;
   872  077D  30FF               	movlw	255
   873  077E  1283               	bcf	3,5	;RP0=0, select bank0
   874  077F  0097               	movwf	23	;volatile
   875                           
   876                           ;SC8F072_Pwm_Demo.c: 134: PWMT4L = 0XFF;
   877  0780  009C               	movwf	28	;volatile
   878                           
   879                           ;SC8F072_Pwm_Demo.c: 135: PWMTH = 0X00;
   880  0781  0198               	clrf	24	;volatile
   881                           
   882                           ;SC8F072_Pwm_Demo.c: 140: PWMD0L = 0X00;
   883  0782  0199               	clrf	25	;volatile
   884                           
   885                           ;SC8F072_Pwm_Demo.c: 143: PWMD1L = 0X00;
   886  0783  019A               	clrf	26	;volatile
   887                           
   888                           ;SC8F072_Pwm_Demo.c: 144: PWMD01H = 0X00;
   889  0784  019E               	clrf	30	;volatile
   890                           
   891                           ;SC8F072_Pwm_Demo.c: 147: PWMD2L = 0X00;
   892  0785  1683               	bsf	3,5	;RP0=1, select bank1
   893  0786  019B               	clrf	27	;volatile
   894                           
   895                           ;SC8F072_Pwm_Demo.c: 149: PWMD23H = 0X00;
   896  0787  019E               	clrf	30	;volatile
   897                           
   898                           ;SC8F072_Pwm_Demo.c: 151: PWMD4L = 0X00;
   899  0788  1283               	bcf	3,5	;RP0=0, select bank0
   900  0789  019B               	clrf	27	;volatile
   901                           
   902                           ;SC8F072_Pwm_Demo.c: 167: PWMCON0 = 0X17;
   903  078A  3017               	movlw	23
   904  078B  0095               	movwf	21	;volatile
   905                           
   906                           ;SC8F072_Pwm_Demo.c: 168: PWMCON2 =0X00;
   907  078C  019D               	clrf	29	;volatile
   908  078D  0008               	return
   909  078E                     __end_of_PWM_Init:	
   910                           
   911                           	psect	text2
   912  07FF                     __ptext2:	
   913 ;; *************** function _Led_Gpio_Init *****************
   914 ;; Defined at:
   915 ;;		line 76 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_Demo\LED_188.c"
   916 ;; Parameters:    Size  Location     Type
   917 ;;		None
   918 ;; Auto vars:     Size  Location     Type
   919 ;;		None
   920 ;; Return value:  Size  Location     Type
   921 ;;                  1    wreg      void 
   922 ;; Registers used:
   923 ;;		None
   924 ;; Tracked objects:
   925 ;;		On entry : 100/100
   926 ;;		On exit  : 100/0
   927 ;;		Unchanged: 0/0
   928 ;; Data sizes:     COMMON   BANK0   BANK1
   929 ;;      Params:         0       0       0
   930 ;;      Locals:         0       0       0
   931 ;;      Temps:          0       0       0
   932 ;;      Totals:         0       0       0
   933 ;;Total ram usage:        0 bytes
   934 ;; Hardware stack levels used:    1
   935 ;; Hardware stack levels required when called:    3
   936 ;; This function calls:
   937 ;;		Nothing
   938 ;; This function is called by:
   939 ;;		_main
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           
   944                           ;psect for function _Led_Gpio_Init
   945  07FF                     _Led_Gpio_Init:	
   946                           
   947                           ;LED_188.c: 78: TRISB0 = 1;;
   948                           
   949                           ;incstack = 0
   950                           ; Regs used in _Led_Gpio_Init: []
   951                           
   952                           ;LED_188.c: 79: TRISB1 = 1;;
   953                           
   954                           ;LED_188.c: 80: TRISB2 = 1;;
   955                           
   956                           ;LED_188.c: 81: TRISB3 = 1;;
   957                           
   958                           ;LED_188.c: 82: TRISB4 = 1;;
   959  07FF  2FE2               	ljmp	PL14	;call to abstracted procedure
   960  0800                     __end_of_Led_Gpio_Init:	
   961                           
   962                           	psect	text3
   963  060C                     __ptext3:	
   964 ;; *************** function _Init_System *****************
   965 ;; Defined at:
   966 ;;		line 79 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_Demo\SC8F072_Pwm_Demo.c"
   967 ;; Parameters:    Size  Location     Type
   968 ;;		None
   969 ;; Auto vars:     Size  Location     Type
   970 ;;		None
   971 ;; Return value:  Size  Location     Type
   972 ;;                  1    wreg      void 
   973 ;; Registers used:
   974 ;;		wreg, status,2
   975 ;; Tracked objects:
   976 ;;		On entry : B00/0
   977 ;;		On exit  : 100/100
   978 ;;		Unchanged: 0/0
   979 ;; Data sizes:     COMMON   BANK0   BANK1
   980 ;;      Params:         0       0       0
   981 ;;      Locals:         0       0       0
   982 ;;      Temps:          0       0       0
   983 ;;      Totals:         0       0       0
   984 ;;Total ram usage:        0 bytes
   985 ;; Hardware stack levels used:    1
   986 ;; Hardware stack levels required when called:    3
   987 ;; This function calls:
   988 ;;		Nothing
   989 ;; This function is called by:
   990 ;;		_main
   991 ;; This function uses a non-reentrant model
   992 ;;
   993                           
   994                           
   995                           ;psect for function _Init_System
   996  060C                     _Init_System:	
   997                           
   998                           ;incstack = 0
   999                           ; Regs used in _Init_System: [wreg+status,2]
  1000  060C  0000               	nop	;# 
  1001  060D  0064               	clrwdt	;# 
  1002                           
  1003                           ;SC8F072_Pwm_Demo.c: 83: INTCON = 0;
  1004  060E  018B               	clrf	11	;volatile
  1005                           
  1006                           ;SC8F072_Pwm_Demo.c: 84: OSCCON = 0X72;
  1007  060F  3072               	movlw	114
  1008  0610  1283               	bcf	3,5	;RP0=0, select bank0
  1009  0611  0094               	movwf	20	;volatile
  1010                           
  1011                           ;SC8F072_Pwm_Demo.c: 85: OPTION_REG = 0B00000100;
  1012  0612  3004               	movlw	4
  1013  0613  0081               	movwf	1	;volatile
  1014  0614  0064               	clrwdt	;# 
  1015                           
  1016                           ;SC8F072_Pwm_Demo.c: 88: WPUA = 0B00000000;
  1017  0615  1683               	bsf	3,5	;RP0=1, select bank1
  1018  0616  0188               	clrf	8	;volatile
  1019                           
  1020                           ;SC8F072_Pwm_Demo.c: 89: WPUB = 0B00000000;
  1021  0617  1283               	bcf	3,5	;RP0=0, select bank0
  1022  0618  0188               	clrf	8	;volatile
  1023                           
  1024                           ;SC8F072_Pwm_Demo.c: 90: WPDA = 0B00000000;
  1025  0619  1683               	bsf	3,5	;RP0=1, select bank1
  1026  061A  0187               	clrf	7	;volatile
  1027                           
  1028                           ;SC8F072_Pwm_Demo.c: 91: WPDB = 0B00000000;
  1029  061B  1283               	bcf	3,5	;RP0=0, select bank0
  1030  061C  0187               	clrf	7	;volatile
  1031                           
  1032                           ;SC8F072_Pwm_Demo.c: 92: TRISA = 0B00000000;
  1033  061D  1683               	bsf	3,5	;RP0=1, select bank1
  1034  061E  0185               	clrf	5	;volatile
  1035                           
  1036                           ;SC8F072_Pwm_Demo.c: 93: TRISB = 0B00000000;
  1037  061F  1283               	bcf	3,5	;RP0=0, select bank0
  1038  0620  0185               	clrf	5	;volatile
  1039                           
  1040                           ;SC8F072_Pwm_Demo.c: 94: PORTA = 0B00000000;
  1041  0621  1683               	bsf	3,5	;RP0=1, select bank1
  1042  0622  0186               	clrf	6	;volatile
  1043                           
  1044                           ;SC8F072_Pwm_Demo.c: 95: PORTB = 0B00000000;
  1045  0623  1283               	bcf	3,5	;RP0=0, select bank0
  1046  0624  0186               	clrf	6	;volatile
  1047                           
  1048                           ;SC8F072_Pwm_Demo.c: 97: TMR0 = 6;
  1049  0625  3006               	movlw	6
  1050  0626  1683               	bsf	3,5	;RP0=1, select bank1
  1051  0627  0081               	movwf	1	;volatile
  1052                           
  1053                           ;SC8F072_Pwm_Demo.c: 98: T0IF = 0;
  1054  0628  110B               	bcf	11,2	;volatile
  1055                           
  1056                           ;SC8F072_Pwm_Demo.c: 99: T0IE = 1;
  1057  0629  168B               	bsf	11,5	;volatile
  1058                           
  1059                           ;SC8F072_Pwm_Demo.c: 100: GIE = 1;
  1060  062A  178B               	bsf	11,7	;volatile
  1061                           
  1062                           ;SC8F072_Pwm_Demo.c: 103: PR2 = 249;
  1063  062B  30F9               	movlw	249
  1064  062C  1283               	bcf	3,5	;RP0=0, select bank0
  1065  062D  0091               	movwf	17	;volatile
  1066                           
  1067                           ;SC8F072_Pwm_Demo.c: 104: TMR2IF = 0;
  1068  062E  108D               	bcf	13,1	;volatile
  1069                           
  1070                           ;SC8F072_Pwm_Demo.c: 105: TMR2IE = 1;
  1071  062F  148E               	bsf	14,1	;volatile
  1072                           
  1073                           ;SC8F072_Pwm_Demo.c: 106: T2CON = 0B00000111;
  1074  0630  3007               	movlw	7
  1075  0631  0093               	movwf	19	;volatile
  1076                           
  1077                           ;SC8F072_Pwm_Demo.c: 110: WPUB = 0B00100000;
  1078  0632  3020               	movlw	32
  1079  0633  0088               	movwf	8	;volatile
  1080                           
  1081                           ;SC8F072_Pwm_Demo.c: 111: TRISB= 0B00100000;
  1082  0634  0085               	movwf	5	;volatile
  1083                           
  1084                           ;SC8F072_Pwm_Demo.c: 112: IOCB = 0B00100000;
  1085  0635  0089               	movwf	9	;volatile
  1086                           
  1087                           ;SC8F072_Pwm_Demo.c: 113: RBIE = 1;
  1088  0636  158B               	bsf	11,3	;volatile
  1089                           
  1090                           ;SC8F072_Pwm_Demo.c: 115: PORTB;
  1091  0637  0806               	movf	6,w	;volatile
  1092                           
  1093                           ;SC8F072_Pwm_Demo.c: 118: WPUA = 0B00100000;
  1094  0638  3020               	movlw	32
  1095  0639  1683               	bsf	3,5	;RP0=1, select bank1
  1096  063A  0088               	movwf	8	;volatile
  1097                           
  1098                           ;SC8F072_Pwm_Demo.c: 119: TRISA= 0B00100000;
  1099  063B  0085               	movwf	5	;volatile
  1100                           
  1101                           ;SC8F072_Pwm_Demo.c: 120: IOCA = 0B00100000;
  1102  063C  0089               	movwf	9	;volatile
  1103                           
  1104                           ;SC8F072_Pwm_Demo.c: 121: RAIE = 1;
  1105  063D  1283               	bcf	3,5	;RP0=0, select bank0
  1106  063E  158E               	bsf	14,3	;volatile
  1107                           
  1108                           ;SC8F072_Pwm_Demo.c: 123: RAIF = 0;
  1109  063F  118D               	bcf	13,3	;volatile
  1110                           
  1111                           ;SC8F072_Pwm_Demo.c: 124: PORTA;
  1112  0640  1683               	bsf	3,5	;RP0=1, select bank1
  1113  0641  0806               	movf	6,w	;volatile
  1114                           
  1115                           ;SC8F072_Pwm_Demo.c: 125: INTCON = 0xE8;
  1116  0642  30E8               	movlw	232
  1117  0643  008B               	movwf	11	;volatile
  1118  0644  0008               	return
  1119  0645                     __end_of_Init_System:	
  1120                           
  1121                           	psect	text4
  1122  019B                     __ptext4:	
  1123 ;; *************** function _Button_response *****************
  1124 ;; Defined at:
  1125 ;;		line 317 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_Demo\SC8F072_Pwm_Demo.c"
  1126 ;; Parameters:    Size  Location     Type
  1127 ;;		None
  1128 ;; Auto vars:     Size  Location     Type
  1129 ;;		None
  1130 ;; Return value:  Size  Location     Type
  1131 ;;                  1    wreg      void 
  1132 ;; Registers used:
  1133 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1134 ;; Tracked objects:
  1135 ;;		On entry : 0/0
  1136 ;;		On exit  : 0/0
  1137 ;;		Unchanged: 0/0
  1138 ;; Data sizes:     COMMON   BANK0   BANK1
  1139 ;;      Params:         0       0       0
  1140 ;;      Locals:         0       0       0
  1141 ;;      Temps:          0       1       0
  1142 ;;      Totals:         0       1       0
  1143 ;;Total ram usage:        1 bytes
  1144 ;; Hardware stack levels used:    1
  1145 ;; Hardware stack levels required when called:    5
  1146 ;; This function calls:
  1147 ;;		_Motor_num
  1148 ;;		_Set_PWM
  1149 ;;		___awmod
  1150 ;; This function is called by:
  1151 ;;		_main
  1152 ;; This function uses a non-reentrant model
  1153 ;;
  1154                           
  1155                           
  1156                           ;psect for function _Button_response
  1157  019B                     _Button_response:	
  1158                           
  1159                           ;SC8F072_Pwm_Demo.c: 319: if (button_sflag)
  1160                           
  1161                           ;incstack = 0
  1162                           ; Regs used in _Button_response: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1163  019B  1683               	bsf	3,5	;RP0=1, select bank1
  1164  019C  082D               	movf	_button_sflag^(0+128),w	;volatile
  1165  019D  1903               	btfsc	3,2
  1166  019E  2A45               	goto	l3340
  1167                           
  1168                           ;SC8F072_Pwm_Demo.c: 320: {
  1169                           ;SC8F072_Pwm_Demo.c: 321: TRISA = 0B00101000;
  1170  019F  3028               	movlw	40
  1171  01A0  0085               	movwf	5	;volatile
  1172                           
  1173                           ;SC8F072_Pwm_Demo.c: 322: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1174  01A1  3084               	movlw	132
  1175  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  1176  01A3  00B1               	movwf	??_Button_response
  1177  01A4                     u2577:	
  1178  01A4  0BB1               	decfsz	??_Button_response,f
  1179  01A5  29A4               	goto	u2577
  1180  01A6  29A7               	nop2
  1181                           
  1182                           ;SC8F072_Pwm_Demo.c: 323: button_sflag = 0;
  1183  01A7  1683               	bsf	3,5	;RP0=1, select bank1
  1184  01A8  01AD               	clrf	_button_sflag^(0+128)	;volatile
  1185                           
  1186                           ;SC8F072_Pwm_Demo.c: 324: switch (pwm_duty)
  1187  01A9  2A24               	goto	l3332
  1188  01AA                     l3320:	
  1189                           
  1190                           ;SC8F072_Pwm_Demo.c: 327: Set_PWM(0, duty_steps[pwm_duty]);
  1191  01AA  086C               	movf	_pwm_duty,w
  1192  01AB  3E01               	addlw	low ((_duty_steps-__stringbase)| (0+32768))
  1193  01AC  0084               	movwf	4
  1194  01AD  27C1               	fcall	stringdir
  1195  01AE  00AE               	movwf	Set_PWM@duty
  1196  01AF  3000               	movlw	0
  1197  01B0  2645               	fcall	_Set_PWM
  1198                           
  1199                           ;SC8F072_Pwm_Demo.c: 328: Set_PWM(1, duty_steps[5]);
  1200  01B1  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1201  01B2  0084               	movwf	4
  1202  01B3  27C1               	fcall	stringdir
  1203  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  1204  01B5  00AE               	movwf	Set_PWM@duty
  1205  01B6  3001               	movlw	1
  1206  01B7  2645               	fcall	_Set_PWM
  1207                           
  1208                           ;SC8F072_Pwm_Demo.c: 329: Set_PWM(2, duty_steps[5]);
  1209  01B8  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1210  01B9  0084               	movwf	4
  1211  01BA  27C1               	fcall	stringdir
  1212  01BB  1283               	bcf	3,5	;RP0=0, select bank0
  1213  01BC  00AE               	movwf	Set_PWM@duty
  1214  01BD  3002               	movlw	2
  1215  01BE  2645               	fcall	_Set_PWM
  1216                           
  1217                           ;SC8F072_Pwm_Demo.c: 330: Set_PWM(4, duty_steps[pwm_duty]);
  1218  01BF  2272               	fcall	PL10	;call to abstracted procedure
  1219  01C0  27C1               	fcall	stringdir
  1220  01C1  00AE               	movwf	Set_PWM@duty
  1221  01C2  3004               	movlw	4
  1222  01C3  2645               	fcall	_Set_PWM
  1223                           
  1224                           ;SC8F072_Pwm_Demo.c: 331: break;
  1225  01C4  2A30               	goto	l3334
  1226  01C5                     l3322:	
  1227                           
  1228                           ;SC8F072_Pwm_Demo.c: 333: Set_PWM(0, duty_steps[pwm_duty]);
  1229  01C5  086C               	movf	_pwm_duty,w
  1230  01C6  3E01               	addlw	low ((_duty_steps-__stringbase)| (0+32768))
  1231  01C7  0084               	movwf	4
  1232  01C8  27C1               	fcall	stringdir
  1233  01C9  00AE               	movwf	Set_PWM@duty
  1234  01CA  3000               	movlw	0
  1235  01CB  2645               	fcall	_Set_PWM
  1236                           
  1237                           ;SC8F072_Pwm_Demo.c: 334: Set_PWM(1, duty_steps[pwm_duty]);
  1238  01CC  2272               	fcall	PL10	;call to abstracted procedure
  1239  01CD  27C1               	fcall	stringdir
  1240  01CE  00AE               	movwf	Set_PWM@duty
  1241  01CF  3001               	movlw	1
  1242  01D0  2645               	fcall	_Set_PWM
  1243                           
  1244                           ;SC8F072_Pwm_Demo.c: 335: Set_PWM(2, duty_steps[5]);
  1245  01D1  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1246  01D2  0084               	movwf	4
  1247  01D3  27C1               	fcall	stringdir
  1248  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  1249  01D5  00AE               	movwf	Set_PWM@duty
  1250  01D6  3002               	movlw	2
  1251  01D7  2645               	fcall	_Set_PWM
  1252                           
  1253                           ;SC8F072_Pwm_Demo.c: 336: Set_PWM(4, duty_steps[pwm_duty]);
  1254  01D8  2272               	fcall	PL10	;call to abstracted procedure
  1255  01D9  27C1               	fcall	stringdir
  1256  01DA  00AE               	movwf	Set_PWM@duty
  1257  01DB  3004               	movlw	4
  1258  01DC  2645               	fcall	_Set_PWM
  1259                           
  1260                           ;SC8F072_Pwm_Demo.c: 337: break;
  1261  01DD  2A30               	goto	l3334
  1262  01DE                     l3324:	
  1263                           
  1264                           ;SC8F072_Pwm_Demo.c: 339: Set_PWM(0, duty_steps[pwm_duty]);
  1265  01DE  086C               	movf	_pwm_duty,w
  1266  01DF  3E01               	addlw	low ((_duty_steps-__stringbase)| (0+32768))
  1267  01E0  0084               	movwf	4
  1268  01E1  27C1               	fcall	stringdir
  1269  01E2  00AE               	movwf	Set_PWM@duty
  1270  01E3  3000               	movlw	0
  1271  01E4  2645               	fcall	_Set_PWM
  1272                           
  1273                           ;SC8F072_Pwm_Demo.c: 340: Set_PWM(1, duty_steps[5]);
  1274  01E5  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1275  01E6  0084               	movwf	4
  1276  01E7  27C1               	fcall	stringdir
  1277  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  1278  01E9  00AE               	movwf	Set_PWM@duty
  1279  01EA  3001               	movlw	1
  1280  01EB  2645               	fcall	_Set_PWM
  1281                           
  1282                           ;SC8F072_Pwm_Demo.c: 341: Set_PWM(2, duty_steps[pwm_duty]);
  1283  01EC  2272               	fcall	PL10	;call to abstracted procedure
  1284  01ED  27C1               	fcall	stringdir
  1285  01EE  00AE               	movwf	Set_PWM@duty
  1286  01EF  3002               	movlw	2
  1287  01F0  2645               	fcall	_Set_PWM
  1288                           
  1289                           ;SC8F072_Pwm_Demo.c: 342: Set_PWM(4, duty_steps[pwm_duty]);
  1290  01F1  2272               	fcall	PL10	;call to abstracted procedure
  1291  01F2  27C1               	fcall	stringdir
  1292  01F3  00AE               	movwf	Set_PWM@duty
  1293  01F4  3004               	movlw	4
  1294  01F5  2645               	fcall	_Set_PWM
  1295                           
  1296                           ;SC8F072_Pwm_Demo.c: 343: break;
  1297  01F6  2A30               	goto	l3334
  1298  01F7                     l3326:	
  1299                           
  1300                           ;SC8F072_Pwm_Demo.c: 345: Set_PWM(0, duty_steps[5]);
  1301  01F7  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1302  01F8  0084               	movwf	4
  1303  01F9  27C1               	fcall	stringdir
  1304  01FA  00AE               	movwf	Set_PWM@duty
  1305  01FB  3000               	movlw	0
  1306  01FC  2645               	fcall	_Set_PWM
  1307                           
  1308                           ;SC8F072_Pwm_Demo.c: 346: Set_PWM(1, duty_steps[pwm_duty]);
  1309  01FD  2272               	fcall	PL10	;call to abstracted procedure
  1310  01FE  27C1               	fcall	stringdir
  1311  01FF  00AE               	movwf	Set_PWM@duty
  1312  0200  3001               	movlw	1
  1313  0201  2645               	fcall	_Set_PWM
  1314                           
  1315                           ;SC8F072_Pwm_Demo.c: 347: Set_PWM(2, duty_steps[pwm_duty]);
  1316  0202  2272               	fcall	PL10	;call to abstracted procedure
  1317  0203  27C1               	fcall	stringdir
  1318  0204  00AE               	movwf	Set_PWM@duty
  1319  0205  3002               	movlw	2
  1320  0206  2645               	fcall	_Set_PWM
  1321                           
  1322                           ;SC8F072_Pwm_Demo.c: 348: Set_PWM(4, duty_steps[pwm_duty]);
  1323  0207  2272               	fcall	PL10	;call to abstracted procedure
  1324  0208  27C1               	fcall	stringdir
  1325  0209  00AE               	movwf	Set_PWM@duty
  1326  020A  3004               	movlw	4
  1327  020B  2645               	fcall	_Set_PWM
  1328                           
  1329                           ;SC8F072_Pwm_Demo.c: 349: break;
  1330  020C  2A30               	goto	l3334
  1331  020D                     l3328:	
  1332                           
  1333                           ;SC8F072_Pwm_Demo.c: 351: Set_PWM(0, duty_steps[pwm_duty]);
  1334  020D  086C               	movf	_pwm_duty,w
  1335  020E  3E01               	addlw	low ((_duty_steps-__stringbase)| (0+32768))
  1336  020F  0084               	movwf	4
  1337  0210  27C1               	fcall	stringdir
  1338  0211  00AE               	movwf	Set_PWM@duty
  1339  0212  3000               	movlw	0
  1340  0213  2645               	fcall	_Set_PWM
  1341                           
  1342                           ;SC8F072_Pwm_Demo.c: 352: Set_PWM(1, duty_steps[pwm_duty]);
  1343  0214  2272               	fcall	PL10	;call to abstracted procedure
  1344  0215  27C1               	fcall	stringdir
  1345  0216  00AE               	movwf	Set_PWM@duty
  1346  0217  3001               	movlw	1
  1347  0218  2645               	fcall	_Set_PWM
  1348                           
  1349                           ;SC8F072_Pwm_Demo.c: 353: Set_PWM(2, duty_steps[pwm_duty]);
  1350  0219  2272               	fcall	PL10	;call to abstracted procedure
  1351  021A  27C1               	fcall	stringdir
  1352  021B  00AE               	movwf	Set_PWM@duty
  1353  021C  3002               	movlw	2
  1354  021D  2645               	fcall	_Set_PWM
  1355                           
  1356                           ;SC8F072_Pwm_Demo.c: 354: Set_PWM(4, duty_steps[pwm_duty]);
  1357  021E  2272               	fcall	PL10	;call to abstracted procedure
  1358  021F  27C1               	fcall	stringdir
  1359  0220  00AE               	movwf	Set_PWM@duty
  1360  0221  3004               	movlw	4
  1361  0222  2645               	fcall	_Set_PWM
  1362                           
  1363                           ;SC8F072_Pwm_Demo.c: 360: break;
  1364  0223  2A30               	goto	l3334
  1365  0224                     l3332:	
  1366  0224  1283               	bcf	3,5	;RP0=0, select bank0
  1367  0225  086C               	movf	_pwm_duty,w	;volatile
  1368                           
  1369                           ; Switch size 1, requested type "space"
  1370                           ; Number of cases is 5, Range of values is 0 to 4
  1371                           ; switch strategies available:
  1372                           ; Name         Instructions Cycles
  1373                           ; direct_byte           11     6 (fixed)
  1374                           ; simple_byte           16     9 (average)
  1375                           ; jumptable            260     6 (fixed)
  1376                           ;	Chosen strategy is direct_byte
  1377  0226  0084               	movwf	4
  1378  0227  3005               	movlw	5
  1379  0228  0204               	subwf	4,w
  1380  0229  1803               	skipnc
  1381  022A  2A30               	goto	l3334
  1382  022B  3007               	movlw	high S3576
  1383  022C  008A               	movwf	10
  1384  022D  30F0               	movlw	low S3576
  1385  022E  0704               	addwf	4,w
  1386  022F  0082               	movwf	2
  1387  0230                     l3334:	
  1388                           
  1389                           ;SC8F072_Pwm_Demo.c: 364: Time_delay=2500;
  1390  0230  30C4               	movlw	196
  1391  0231  1683               	bsf	3,5	;RP0=1, select bank1
  1392  0232  00A0               	movwf	_Time_delay^(0+128)	;volatile
  1393  0233  3009               	movlw	9
  1394  0234  00A1               	movwf	(_Time_delay^(0+128)+1)	;volatile
  1395                           
  1396                           ;SC8F072_Pwm_Demo.c: 365: Motor_num();
  1397  0235  27E9               	fcall	_Motor_num
  1398                           
  1399                           ;SC8F072_Pwm_Demo.c: 366: pwm_duty = (pwm_duty + 1) % 5;
  1400  0236  086C               	movf	_pwm_duty,w	;volatile
  1401  0237  00A2               	movwf	___awmod@dividend
  1402  0238  01A3               	clrf	___awmod@dividend+1
  1403  0239  0AA2               	incf	___awmod@dividend,f
  1404  023A  1903               	skipnz
  1405  023B  0AA3               	incf	___awmod@dividend+1,f
  1406  023C  3005               	movlw	5
  1407  023D  00A0               	movwf	___awmod@divisor
  1408  023E  01A1               	clrf	___awmod@divisor+1
  1409  023F  25CF               	fcall	___awmod
  1410  0240  0820               	movf	?___awmod,w
  1411  0241  00EC               	movwf	_pwm_duty	;volatile
  1412                           
  1413                           ;SC8F072_Pwm_Demo.c: 367: T_flag=1;
  1414  0242  3001               	movlw	1
  1415  0243  1683               	bsf	3,5	;RP0=1, select bank1
  1416  0244  00AB               	movwf	_T_flag^(0+128)	;volatile
  1417  0245                     l3340:	
  1418                           
  1419                           ;SC8F072_Pwm_Demo.c: 369: }
  1420                           ;SC8F072_Pwm_Demo.c: 370: if (button_lflag)
  1421  0245  082C               	movf	_button_lflag^(0+128),w	;volatile
  1422  0246  1903               	btfsc	3,2
  1423  0247  0008               	return
  1424                           
  1425                           ;SC8F072_Pwm_Demo.c: 371: {
  1426                           ;SC8F072_Pwm_Demo.c: 372: button_lflag = 0;
  1427  0248  01AC               	clrf	_button_lflag^(0+128)	;volatile
  1428                           
  1429                           ;SC8F072_Pwm_Demo.c: 373: Set_PWM(0, duty_steps[5]);
  1430  0249  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1431  024A  0084               	movwf	4
  1432  024B  27C1               	fcall	stringdir
  1433  024C  1283               	bcf	3,5	;RP0=0, select bank0
  1434  024D  00AE               	movwf	Set_PWM@duty
  1435  024E  3000               	movlw	0
  1436  024F  2645               	fcall	_Set_PWM
  1437                           
  1438                           ;SC8F072_Pwm_Demo.c: 374: Set_PWM(1, duty_steps[5]);
  1439  0250  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1440  0251  0084               	movwf	4
  1441  0252  27C1               	fcall	stringdir
  1442  0253  1283               	bcf	3,5	;RP0=0, select bank0
  1443  0254  00AE               	movwf	Set_PWM@duty
  1444  0255  3001               	movlw	1
  1445  0256  2645               	fcall	_Set_PWM
  1446                           
  1447                           ;SC8F072_Pwm_Demo.c: 375: Set_PWM(2, duty_steps[5]);
  1448  0257  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1449  0258  0084               	movwf	4
  1450  0259  27C1               	fcall	stringdir
  1451  025A  1283               	bcf	3,5	;RP0=0, select bank0
  1452  025B  00AE               	movwf	Set_PWM@duty
  1453  025C  3002               	movlw	2
  1454  025D  2645               	fcall	_Set_PWM
  1455                           
  1456                           ;SC8F072_Pwm_Demo.c: 376: Set_PWM(4, duty_steps[5]);
  1457  025E  3006               	movlw	low (((_duty_steps+5)-__stringbase)| (0+32768))
  1458  025F  0084               	movwf	4
  1459  0260  27C1               	fcall	stringdir
  1460  0261  1283               	bcf	3,5	;RP0=0, select bank0
  1461  0262  00AE               	movwf	Set_PWM@duty
  1462  0263  3004               	movlw	4
  1463  0264  2645               	fcall	_Set_PWM
  1464                           
  1465                           ;SC8F072_Pwm_Demo.c: 377: pwm_duty =0;
  1466  0265  1283               	bcf	3,5	;RP0=0, select bank0
  1467  0266  01EC               	clrf	_pwm_duty	;volatile
  1468                           
  1469                           ;SC8F072_Pwm_Demo.c: 378: TRISA = 0B00111111;
  1470  0267  303F               	movlw	63
  1471  0268  1683               	bsf	3,5	;RP0=1, select bank1
  1472  0269  0085               	movwf	5	;volatile
  1473                           
  1474                           ;SC8F072_Pwm_Demo.c: 379: TRISB = 0B00111111;
  1475  026A  1283               	bcf	3,5	;RP0=0, select bank0
  1476  026B  0085               	movwf	5	;volatile
  1477                           
  1478                           ;SC8F072_Pwm_Demo.c: 380: T_flag=0;
  1479  026C  1683               	bsf	3,5	;RP0=1, select bank1
  1480  026D  01AB               	clrf	_T_flag^(0+128)	;volatile
  1481  026E  0064               	clrwdt	;# 
  1482  026F                     stop:	
  1483                           
  1484                           ;# 
  1485  026F  0000               	nop	;# 
  1486  0270  0000               	nop	;# 
  1487  0271  0008               	return
  1488  0272                     __end_of_Button_response:	
  1489  0272                     PL10:	
  1490  0272  1283               	bcf	3,5	;RP0=0, select bank0
  1491  0273  086C               	movf	_pwm_duty,w
  1492  0274  3E01               	addlw	low ((_duty_steps-__stringbase)| (0+32768))
  1493  0275  0084               	movwf	4
  1494  0276  0008               	return
  1495  0277                     __end_ofPL10:	
  1496                           
  1497                           	psect	swtext1
  1498  07F0                     __pswtext1:	
  1499  07F0                     S3576:	
  1500  07F0  29AA               	ljmp	l3320
  1501  07F1  29C5               	ljmp	l3322
  1502  07F2  29DE               	ljmp	l3324
  1503  07F3  29F7               	ljmp	l3326
  1504  07F4  2A0D               	ljmp	l3328
  1505                           
  1506                           	psect	text5
  1507  05CF                     __ptext5:	
  1508 ;; *************** function ___awmod *****************
  1509 ;; Defined at:
  1510 ;;		line 6 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\awmod.c"
  1511 ;; Parameters:    Size  Location     Type
  1512 ;;  divisor         2    0[BANK0 ] int 
  1513 ;;  dividend        2    2[BANK0 ] int 
  1514 ;; Auto vars:     Size  Location     Type
  1515 ;;  sign            1    5[BANK0 ] unsigned char 
  1516 ;;  counter         1    4[BANK0 ] unsigned char 
  1517 ;; Return value:  Size  Location     Type
  1518 ;;                  2    0[BANK0 ] int 
  1519 ;; Registers used:
  1520 ;;		wreg, status,2, status,0
  1521 ;; Tracked objects:
  1522 ;;		On entry : 100/0
  1523 ;;		On exit  : 100/0
  1524 ;;		Unchanged: 0/0
  1525 ;; Data sizes:     COMMON   BANK0   BANK1
  1526 ;;      Params:         0       4       0
  1527 ;;      Locals:         0       2       0
  1528 ;;      Temps:          0       0       0
  1529 ;;      Totals:         0       6       0
  1530 ;;Total ram usage:        6 bytes
  1531 ;; Hardware stack levels used:    1
  1532 ;; Hardware stack levels required when called:    3
  1533 ;; This function calls:
  1534 ;;		Nothing
  1535 ;; This function is called by:
  1536 ;;		_Button_response
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540                           
  1541                           ;psect for function ___awmod
  1542  05CF                     ___awmod:	
  1543                           
  1544                           ;incstack = 0
  1545                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1546  05CF  01A5               	clrf	___awmod@sign
  1547  05D0  1FA3               	btfss	___awmod@dividend+1,7
  1548  05D1  2DD9               	goto	l3136
  1549  05D2  09A2               	comf	___awmod@dividend,f
  1550  05D3  09A3               	comf	___awmod@dividend+1,f
  1551  05D4  0AA2               	incf	___awmod@dividend,f
  1552  05D5  1903               	skipnz
  1553  05D6  0AA3               	incf	___awmod@dividend+1,f
  1554  05D7  01A5               	clrf	___awmod@sign
  1555  05D8  0AA5               	incf	___awmod@sign,f
  1556  05D9                     l3136:	
  1557  05D9  1FA1               	btfss	___awmod@divisor+1,7
  1558  05DA  2DE0               	goto	l3140
  1559  05DB  09A0               	comf	___awmod@divisor,f
  1560  05DC  09A1               	comf	___awmod@divisor+1,f
  1561  05DD  0AA0               	incf	___awmod@divisor,f
  1562  05DE  1903               	skipnz
  1563  05DF  0AA1               	incf	___awmod@divisor+1,f
  1564  05E0                     l3140:	
  1565  05E0  0820               	movf	___awmod@divisor,w
  1566  05E1  0421               	iorwf	___awmod@divisor+1,w
  1567  05E2  1903               	btfsc	3,2
  1568  05E3  2DFF               	goto	l3156
  1569  05E4  01A4               	clrf	___awmod@counter
  1570  05E5                     L1:	
  1571  05E5  0AA4               	incf	___awmod@counter,f
  1572  05E6  1BA1               	btfsc	___awmod@divisor+1,7
  1573  05E7  2DEC               	goto	l3148
  1574  05E8  1003               	clrc
  1575  05E9  0DA0               	rlf	___awmod@divisor,f
  1576  05EA  0DA1               	rlf	___awmod@divisor+1,f
  1577  05EB  2DE5               	goto	L1
  1578  05EC                     l3148:	
  1579  05EC  0821               	movf	___awmod@divisor+1,w
  1580  05ED  0223               	subwf	___awmod@dividend+1,w
  1581  05EE  1D03               	skipz
  1582  05EF  2DF2               	goto	u2215
  1583  05F0  0820               	movf	___awmod@divisor,w
  1584  05F1  0222               	subwf	___awmod@dividend,w
  1585  05F2                     u2215:	
  1586  05F2  1C03               	skipc
  1587  05F3  2DFB               	goto	L2
  1588  05F4  0820               	movf	___awmod@divisor,w
  1589  05F5  02A2               	subwf	___awmod@dividend,f
  1590  05F6  0821               	movf	___awmod@divisor+1,w
  1591  05F7  1C03               	skipc
  1592  05F8  03A3               	decf	___awmod@dividend+1,f
  1593  05F9  02A3               	subwf	___awmod@dividend+1,f
  1594  05FA  1003               	clrc
  1595  05FB                     L2:	
  1596  05FB  0CA1               	rrf	___awmod@divisor+1,f
  1597  05FC  0CA0               	rrf	___awmod@divisor,f
  1598  05FD  0BA4               	decfsz	___awmod@counter,f
  1599  05FE  2DEC               	goto	l3148
  1600  05FF                     l3156:	
  1601  05FF  0825               	movf	___awmod@sign,w
  1602  0600  1903               	btfsc	3,2
  1603  0601  2E07               	goto	l3160
  1604  0602  09A2               	comf	___awmod@dividend,f
  1605  0603  09A3               	comf	___awmod@dividend+1,f
  1606  0604  0AA2               	incf	___awmod@dividend,f
  1607  0605  1903               	skipnz
  1608  0606  0AA3               	incf	___awmod@dividend+1,f
  1609  0607                     l3160:	
  1610  0607  0823               	movf	___awmod@dividend+1,w
  1611  0608  00A1               	movwf	?___awmod+1
  1612  0609  0822               	movf	___awmod@dividend,w
  1613  060A  00A0               	movwf	?___awmod
  1614  060B  0008               	return
  1615  060C                     __end_of___awmod:	
  1616                           
  1617                           	psect	text6
  1618  0645                     __ptext6:	
  1619 ;; *************** function _Set_PWM *****************
  1620 ;; Defined at:
  1621 ;;		line 180 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_Demo\SC8F072_Pwm_Demo.c"
  1622 ;; Parameters:    Size  Location     Type
  1623 ;;  channel         1    wreg     unsigned char 
  1624 ;;  duty            1   14[BANK0 ] unsigned char 
  1625 ;; Auto vars:     Size  Location     Type
  1626 ;;  channel         1   15[BANK0 ] unsigned char 
  1627 ;;  pulse_width     1   16[BANK0 ] unsigned char 
  1628 ;; Return value:  Size  Location     Type
  1629 ;;                  1    wreg      void 
  1630 ;; Registers used:
  1631 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1632 ;; Tracked objects:
  1633 ;;		On entry : 100/0
  1634 ;;		On exit  : 0/0
  1635 ;;		Unchanged: 0/0
  1636 ;; Data sizes:     COMMON   BANK0   BANK1
  1637 ;;      Params:         0       1       0
  1638 ;;      Locals:         0       2       0
  1639 ;;      Temps:          0       0       0
  1640 ;;      Totals:         0       3       0
  1641 ;;Total ram usage:        3 bytes
  1642 ;; Hardware stack levels used:    1
  1643 ;; Hardware stack levels required when called:    4
  1644 ;; This function calls:
  1645 ;;		___awdiv
  1646 ;;		___wmul
  1647 ;; This function is called by:
  1648 ;;		_Button_response
  1649 ;; This function uses a non-reentrant model
  1650 ;;
  1651                           
  1652                           
  1653                           ;psect for function _Set_PWM
  1654  0645                     _Set_PWM:	
  1655                           
  1656                           ;incstack = 0
  1657                           ; Regs used in _Set_PWM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1658                           ;Set_PWM@channel stored from wreg
  1659  0645  00AF               	movwf	Set_PWM@channel
  1660                           
  1661                           ;SC8F072_Pwm_Demo.c: 182: unsigned char pulse_width = (unsigned char)((duty * 255) / 100
      +                          );
  1662  0646  3064               	movlw	100
  1663  0647  00A6               	movwf	___awdiv@divisor
  1664  0648  01A7               	clrf	___awdiv@divisor+1
  1665  0649  082E               	movf	Set_PWM@duty,w
  1666  064A  00A0               	movwf	___wmul@multiplier
  1667  064B  30FF               	movlw	255
  1668  064C  01A1               	clrf	___wmul@multiplier+1
  1669  064D  00A2               	movwf	___wmul@multiplicand
  1670  064E  01A3               	clrf	___wmul@multiplicand+1
  1671  064F  275F               	fcall	___wmul
  1672  0650  0821               	movf	?___wmul+1,w
  1673  0651  00A9               	movwf	___awdiv@dividend+1
  1674  0652  0820               	movf	?___wmul,w
  1675  0653  00A8               	movwf	___awdiv@dividend
  1676  0654  2549               	fcall	___awdiv
  1677  0655  0826               	movf	?___awdiv,w
  1678  0656  00B0               	movwf	Set_PWM@pulse_width
  1679                           
  1680                           ;SC8F072_Pwm_Demo.c: 183: switch (channel)
  1681  0657  2E69               	goto	l2952
  1682  0658                     l2940:	
  1683                           
  1684                           ;SC8F072_Pwm_Demo.c: 186: PWMD0L = pulse_width & 0xFF;
  1685  0658  0830               	movf	Set_PWM@pulse_width,w
  1686  0659  0099               	movwf	25	;volatile
  1687                           
  1688                           ;SC8F072_Pwm_Demo.c: 188: break;
  1689  065A  0008               	return
  1690  065B                     l2942:	
  1691                           
  1692                           ;SC8F072_Pwm_Demo.c: 190: PWMD1L = pulse_width & 0xFF;
  1693  065B  0830               	movf	Set_PWM@pulse_width,w
  1694  065C  009A               	movwf	26	;volatile
  1695                           
  1696                           ;SC8F072_Pwm_Demo.c: 192: break;
  1697  065D  0008               	return
  1698  065E                     l2944:	
  1699                           
  1700                           ;SC8F072_Pwm_Demo.c: 194: PWMD2L = pulse_width & 0xFF;
  1701  065E  0830               	movf	Set_PWM@pulse_width,w
  1702  065F  1683               	bsf	3,5	;RP0=1, select bank1
  1703  0660  009B               	movwf	27	;volatile
  1704                           
  1705                           ;SC8F072_Pwm_Demo.c: 196: break;
  1706  0661  0008               	return
  1707  0662                     l2946:	
  1708                           
  1709                           ;SC8F072_Pwm_Demo.c: 198: PWMD3L = pulse_width & 0xFF;
  1710  0662  0830               	movf	Set_PWM@pulse_width,w
  1711  0663  1683               	bsf	3,5	;RP0=1, select bank1
  1712  0664  009C               	movwf	28	;volatile
  1713                           
  1714                           ;SC8F072_Pwm_Demo.c: 200: break;
  1715  0665  0008               	return
  1716  0666                     l2948:	
  1717                           
  1718                           ;SC8F072_Pwm_Demo.c: 202: PWMD4L = pulse_width & 0xFF;
  1719  0666  0830               	movf	Set_PWM@pulse_width,w
  1720  0667  009B               	movwf	27	;volatile
  1721                           
  1722                           ;SC8F072_Pwm_Demo.c: 204: break;
  1723  0668  0008               	return
  1724  0669                     l2952:	
  1725  0669  082F               	movf	Set_PWM@channel,w
  1726                           
  1727                           ; Switch size 1, requested type "space"
  1728                           ; Number of cases is 5, Range of values is 0 to 4
  1729                           ; switch strategies available:
  1730                           ; Name         Instructions Cycles
  1731                           ; direct_byte           11     6 (fixed)
  1732                           ; simple_byte           16     9 (average)
  1733                           ; jumptable            260     6 (fixed)
  1734                           ;	Chosen strategy is direct_byte
  1735  066A  0084               	movwf	4
  1736  066B  3005               	movlw	5
  1737  066C  0204               	subwf	4,w
  1738  066D  1803               	skipnc
  1739  066E  0008               	return
  1740  066F  3007               	movlw	high S3578
  1741  0670  008A               	movwf	10
  1742  0671  30F5               	movlw	low S3578
  1743  0672  0704               	addwf	4,w
  1744  0673  0082               	movwf	2
  1745  0674  0008               	return
  1746  0675                     __end_of_Set_PWM:	
  1747                           
  1748                           	psect	swtext2
  1749  07F5                     __pswtext2:	
  1750  07F5                     S3578:	
  1751  07F5  2E58               	ljmp	l2940
  1752  07F6  2E5B               	ljmp	l2942
  1753  07F7  2E5E               	ljmp	l2944
  1754  07F8  2E62               	ljmp	l2946
  1755  07F9  2E66               	ljmp	l2948
  1756                           
  1757                           	psect	text7
  1758  075F                     __ptext7:	
  1759 ;; *************** function ___wmul *****************
  1760 ;; Defined at:
  1761 ;;		line 15 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\Umul16.c"
  1762 ;; Parameters:    Size  Location     Type
  1763 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1764 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1765 ;; Auto vars:     Size  Location     Type
  1766 ;;  product         2    4[BANK0 ] unsigned int 
  1767 ;; Return value:  Size  Location     Type
  1768 ;;                  2    0[BANK0 ] unsigned int 
  1769 ;; Registers used:
  1770 ;;		wreg, status,2, status,0
  1771 ;; Tracked objects:
  1772 ;;		On entry : 100/0
  1773 ;;		On exit  : 100/0
  1774 ;;		Unchanged: 0/0
  1775 ;; Data sizes:     COMMON   BANK0   BANK1
  1776 ;;      Params:         0       4       0
  1777 ;;      Locals:         0       2       0
  1778 ;;      Temps:          0       0       0
  1779 ;;      Totals:         0       6       0
  1780 ;;Total ram usage:        6 bytes
  1781 ;; Hardware stack levels used:    1
  1782 ;; Hardware stack levels required when called:    3
  1783 ;; This function calls:
  1784 ;;		Nothing
  1785 ;; This function is called by:
  1786 ;;		_Set_PWM
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789                           
  1790                           
  1791                           ;psect for function ___wmul
  1792  075F                     ___wmul:	
  1793                           
  1794                           ;incstack = 0
  1795                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1796  075F  01A4               	clrf	___wmul@product
  1797  0760  01A5               	clrf	___wmul@product+1
  1798  0761                     l2708:	
  1799  0761  1C20               	btfss	___wmul@multiplier,0
  1800  0762  2F69               	goto	l2712
  1801  0763  0822               	movf	___wmul@multiplicand,w
  1802  0764  07A4               	addwf	___wmul@product,f
  1803  0765  1803               	skipnc
  1804  0766  0AA5               	incf	___wmul@product+1,f
  1805  0767  0823               	movf	___wmul@multiplicand+1,w
  1806  0768  07A5               	addwf	___wmul@product+1,f
  1807  0769                     l2712:	
  1808  0769  1003               	clrc
  1809  076A  0DA2               	rlf	___wmul@multiplicand,f
  1810  076B  0DA3               	rlf	___wmul@multiplicand+1,f
  1811  076C  1003               	clrc
  1812  076D  0CA1               	rrf	___wmul@multiplier+1,f
  1813  076E  0CA0               	rrf	___wmul@multiplier,f
  1814  076F  0820               	movf	___wmul@multiplier,w
  1815  0770  0421               	iorwf	___wmul@multiplier+1,w
  1816  0771  1D03               	btfss	3,2
  1817  0772  2F61               	goto	l2708
  1818  0773  0825               	movf	___wmul@product+1,w
  1819  0774  00A1               	movwf	?___wmul+1
  1820  0775  0824               	movf	___wmul@product,w
  1821  0776  00A0               	movwf	?___wmul
  1822  0777  0008               	return
  1823  0778                     __end_of___wmul:	
  1824                           
  1825                           	psect	text8
  1826  0549                     __ptext8:	
  1827 ;; *************** function ___awdiv *****************
  1828 ;; Defined at:
  1829 ;;		line 6 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\awdiv.c"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;  divisor         2    6[BANK0 ] int 
  1832 ;;  dividend        2    8[BANK0 ] int 
  1833 ;; Auto vars:     Size  Location     Type
  1834 ;;  quotient        2   12[BANK0 ] int 
  1835 ;;  sign            1   11[BANK0 ] unsigned char 
  1836 ;;  counter         1   10[BANK0 ] unsigned char 
  1837 ;; Return value:  Size  Location     Type
  1838 ;;                  2    6[BANK0 ] int 
  1839 ;; Registers used:
  1840 ;;		wreg, status,2, status,0
  1841 ;; Tracked objects:
  1842 ;;		On entry : 100/0
  1843 ;;		On exit  : 100/0
  1844 ;;		Unchanged: 0/0
  1845 ;; Data sizes:     COMMON   BANK0   BANK1
  1846 ;;      Params:         0       4       0
  1847 ;;      Locals:         0       4       0
  1848 ;;      Temps:          0       0       0
  1849 ;;      Totals:         0       8       0
  1850 ;;Total ram usage:        8 bytes
  1851 ;; Hardware stack levels used:    1
  1852 ;; Hardware stack levels required when called:    3
  1853 ;; This function calls:
  1854 ;;		Nothing
  1855 ;; This function is called by:
  1856 ;;		_Set_PWM
  1857 ;; This function uses a non-reentrant model
  1858 ;;
  1859                           
  1860                           
  1861                           ;psect for function ___awdiv
  1862  0549                     ___awdiv:	
  1863                           
  1864                           ;incstack = 0
  1865                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1866  0549  01AB               	clrf	___awdiv@sign
  1867  054A  1FA7               	btfss	___awdiv@divisor+1,7
  1868  054B  2D53               	goto	l2730
  1869  054C  09A6               	comf	___awdiv@divisor,f
  1870  054D  09A7               	comf	___awdiv@divisor+1,f
  1871  054E  0AA6               	incf	___awdiv@divisor,f
  1872  054F  1903               	skipnz
  1873  0550  0AA7               	incf	___awdiv@divisor+1,f
  1874  0551  01AB               	clrf	___awdiv@sign
  1875  0552  0AAB               	incf	___awdiv@sign,f
  1876  0553                     l2730:	
  1877  0553  1FA9               	btfss	___awdiv@dividend+1,7
  1878  0554  2D5C               	goto	l2736
  1879  0555  09A8               	comf	___awdiv@dividend,f
  1880  0556  09A9               	comf	___awdiv@dividend+1,f
  1881  0557  0AA8               	incf	___awdiv@dividend,f
  1882  0558  1903               	skipnz
  1883  0559  0AA9               	incf	___awdiv@dividend+1,f
  1884  055A  3001               	movlw	1
  1885  055B  06AB               	xorwf	___awdiv@sign,f
  1886  055C                     l2736:	
  1887  055C  01AC               	clrf	___awdiv@quotient
  1888  055D  01AD               	clrf	___awdiv@quotient+1
  1889  055E  0826               	movf	___awdiv@divisor,w
  1890  055F  0427               	iorwf	___awdiv@divisor+1,w
  1891  0560  1903               	btfsc	3,2
  1892  0561  2D81               	goto	l2758
  1893  0562  01AA               	clrf	___awdiv@counter
  1894  0563                     L3:	
  1895  0563  0AAA               	incf	___awdiv@counter,f
  1896  0564  1BA7               	btfsc	___awdiv@divisor+1,7
  1897  0565  2D6A               	goto	l2746
  1898  0566  1003               	clrc
  1899  0567  0DA6               	rlf	___awdiv@divisor,f
  1900  0568  0DA7               	rlf	___awdiv@divisor+1,f
  1901  0569  2D63               	goto	L3
  1902  056A                     l2746:	
  1903  056A  1003               	clrc
  1904  056B  0DAC               	rlf	___awdiv@quotient,f
  1905  056C  0DAD               	rlf	___awdiv@quotient+1,f
  1906  056D  0827               	movf	___awdiv@divisor+1,w
  1907  056E  0229               	subwf	___awdiv@dividend+1,w
  1908  056F  1D03               	skipz
  1909  0570  2D73               	goto	u1435
  1910  0571  0826               	movf	___awdiv@divisor,w
  1911  0572  0228               	subwf	___awdiv@dividend,w
  1912  0573                     u1435:	
  1913  0573  1C03               	skipc
  1914  0574  2D7D               	goto	L4
  1915  0575  0826               	movf	___awdiv@divisor,w
  1916  0576  02A8               	subwf	___awdiv@dividend,f
  1917  0577  0827               	movf	___awdiv@divisor+1,w
  1918  0578  1C03               	skipc
  1919  0579  03A9               	decf	___awdiv@dividend+1,f
  1920  057A  02A9               	subwf	___awdiv@dividend+1,f
  1921  057B  142C               	bsf	___awdiv@quotient,0
  1922  057C  1003               	clrc
  1923  057D                     L4:	
  1924  057D  0CA7               	rrf	___awdiv@divisor+1,f
  1925  057E  0CA6               	rrf	___awdiv@divisor,f
  1926  057F  0BAA               	decfsz	___awdiv@counter,f
  1927  0580  2D6A               	goto	l2746
  1928  0581                     l2758:	
  1929  0581  082B               	movf	___awdiv@sign,w
  1930  0582  1903               	btfsc	3,2
  1931  0583  2D89               	goto	l2762
  1932  0584  09AC               	comf	___awdiv@quotient,f
  1933  0585  09AD               	comf	___awdiv@quotient+1,f
  1934  0586  0AAC               	incf	___awdiv@quotient,f
  1935  0587  1903               	skipnz
  1936  0588  0AAD               	incf	___awdiv@quotient+1,f
  1937  0589                     l2762:	
  1938  0589  082D               	movf	___awdiv@quotient+1,w
  1939  058A  00A7               	movwf	?___awdiv+1
  1940  058B  082C               	movf	___awdiv@quotient,w
  1941  058C  00A6               	movwf	?___awdiv
  1942  058D  0008               	return
  1943  058E                     __end_of___awdiv:	
  1944                           
  1945                           	psect	text9
  1946  07E9                     __ptext9:	
  1947 ;; *************** function _Motor_num *****************
  1948 ;; Defined at:
  1949 ;;		line 39 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_Demo\LED_188.c"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;		None
  1952 ;; Auto vars:     Size  Location     Type
  1953 ;;		None
  1954 ;; Return value:  Size  Location     Type
  1955 ;;                  1    wreg      void 
  1956 ;; Registers used:
  1957 ;;		wreg, status,2, status,0
  1958 ;; Tracked objects:
  1959 ;;		On entry : 100/100
  1960 ;;		On exit  : 100/0
  1961 ;;		Unchanged: 0/0
  1962 ;; Data sizes:     COMMON   BANK0   BANK1
  1963 ;;      Params:         0       0       0
  1964 ;;      Locals:         0       0       0
  1965 ;;      Temps:          0       0       0
  1966 ;;      Totals:         0       0       0
  1967 ;;Total ram usage:        0 bytes
  1968 ;; Hardware stack levels used:    1
  1969 ;; Hardware stack levels required when called:    3
  1970 ;; This function calls:
  1971 ;;		Nothing
  1972 ;; This function is called by:
  1973 ;;		_Button_response
  1974 ;; This function uses a non-reentrant model
  1975 ;;
  1976                           
  1977                           
  1978                           ;psect for function _Motor_num
  1979  07E9                     _Motor_num:	
  1980                           
  1981                           ;LED_188.c: 41: hundreds =0;
  1982                           
  1983                           ;incstack = 0
  1984                           ; Regs used in _Motor_num: [wreg+status,2+status,0]
  1985  07E9  1283               	bcf	3,5	;RP0=0, select bank0
  1986  07EA  01EF               	clrf	_hundreds	;volatile
  1987                           
  1988                           ;LED_188.c: 42: tens = 0;
  1989  07EB  01FD               	clrf	_tens	;volatile
  1990                           
  1991                           ;LED_188.c: 43: unit = (unsigned char)(pwm_duty+1) ;
  1992  07EC  086C               	movf	_pwm_duty,w	;volatile
  1993  07ED  3E01               	addlw	1
  1994  07EE  00EE               	movwf	_unit	;volatile
  1995  07EF  0008               	return
  1996  07F0                     __end_of_Motor_num:	
  1997                           
  1998                           	psect	text10
  1999  041C                     __ptext10:	
  2000 ;; *************** function _ADC_read *****************
  2001 ;; Defined at:
  2002 ;;		line 299 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_Demo\SC8F072_Pwm_Demo.c"
  2003 ;; Parameters:    Size  Location     Type
  2004 ;;		None
  2005 ;; Auto vars:     Size  Location     Type
  2006 ;;  power_temp      4   72[BANK0 ] volatile unsigned long 
  2007 ;; Return value:  Size  Location     Type
  2008 ;;                  1    wreg      void 
  2009 ;; Registers used:
  2010 ;;		wreg, status,2, status,0, pclath, cstack
  2011 ;; Tracked objects:
  2012 ;;		On entry : 100/100
  2013 ;;		On exit  : 100/100
  2014 ;;		Unchanged: 0/0
  2015 ;; Data sizes:     COMMON   BANK0   BANK1
  2016 ;;      Params:         0       0       0
  2017 ;;      Locals:         0       4       0
  2018 ;;      Temps:          0       1       0
  2019 ;;      Totals:         0       5       0
  2020 ;;Total ram usage:        5 bytes
  2021 ;; Hardware stack levels used:    1
  2022 ;; Hardware stack levels required when called:    6
  2023 ;; This function calls:
  2024 ;;		_ADC_Sample
  2025 ;;		___ftadd
  2026 ;;		___ftdiv
  2027 ;;		___fttol
  2028 ;;		___lwtoft
  2029 ;; This function is called by:
  2030 ;;		_main
  2031 ;; This function uses a non-reentrant model
  2032 ;;
  2033                           
  2034                           
  2035                           ;psect for function _ADC_read
  2036  041C                     _ADC_read:	
  2037                           
  2038                           ;incstack = 0
  2039                           ; Regs used in _ADC_read: [wreg+status,2+status,0+pclath+cstack]
  2040  041C  301F               	movlw	31
  2041                           
  2042                           ;SC8F072_Pwm_Demo.c: 301: test_adc = ADC_Sample(31, 0);
  2043  041D  1283               	bcf	3,5	;RP0=0, select bank0
  2044  041E  01E2               	clrf	ADC_Sample@adldo
  2045  041F  203D               	fcall	_ADC_Sample
  2046  0420  00B0               	movwf	_test_adc^(0+128)	;volatile
  2047                           
  2048                           ;SC8F072_Pwm_Demo.c: 302: if (0xA5 == test_adc)
  2049  0421  30A5               	movlw	165
  2050  0422  0630               	xorwf	_test_adc^(0+128),w	;volatile
  2051  0423  1D03               	btfss	3,2
  2052  0424  2C6B               	goto	l3370
  2053                           
  2054                           ;SC8F072_Pwm_Demo.c: 303: {
  2055                           ;SC8F072_Pwm_Demo.c: 304: volatile unsigned long power_temp;
  2056                           ;SC8F072_Pwm_Demo.c: 305: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
  2057  0425  3096               	movlw	150
  2058  0426  1283               	bcf	3,5	;RP0=0, select bank0
  2059  0427  01C9               	clrf	___ftdiv@f1
  2060  0428  00CA               	movwf	___ftdiv@f1+1
  2061  0429  304A               	movlw	74
  2062  042A  00CB               	movwf	___ftdiv@f1+2
  2063  042B  1683               	bsf	3,5	;RP0=1, select bank1
  2064  042C  2476               	fcall	PL16	;call to abstracted procedure
  2065  042D  27B1               	fcall	___lwtoft
  2066  042E  0828               	movf	?___lwtoft,w
  2067  042F  00C6               	movwf	___ftdiv@f2
  2068  0430  0829               	movf	?___lwtoft+1,w
  2069  0431  00C7               	movwf	___ftdiv@f2+1
  2070  0432  082A               	movf	?___lwtoft+2,w
  2071  0433  00C8               	movwf	___ftdiv@f2+2
  2072  0434  2485               	fcall	___ftdiv
  2073  0435  247E               	fcall	PL22	;call to abstracted procedure
  2074  0436  24EB               	fcall	___fttol
  2075  0437  0858               	movf	?___fttol+3,w
  2076  0438  00EB               	movwf	ADC_read@power_temp+3	;volatile
  2077  0439  0857               	movf	?___fttol+2,w
  2078  043A  00EA               	movwf	ADC_read@power_temp+2	;volatile
  2079  043B  0856               	movf	?___fttol+1,w
  2080  043C  00E9               	movwf	ADC_read@power_temp+1	;volatile
  2081  043D  0855               	movf	?___fttol,w
  2082  043E  00E8               	movwf	ADC_read@power_temp	;volatile
  2083                           
  2084                           ;SC8F072_Pwm_Demo.c: 306: power_ad = (unsigned int)(power_temp);
  2085  043F  0869               	movf	ADC_read@power_temp+1,w	;volatile
  2086  0440  1683               	bsf	3,5	;RP0=1, select bank1
  2087  0441  00A9               	movwf	(_power_ad+1)^(0+128)	;volatile
  2088  0442  1283               	bcf	3,5	;RP0=0, select bank0
  2089  0443  0868               	movf	ADC_read@power_temp,w	;volatile
  2090  0444  1683               	bsf	3,5	;RP0=1, select bank1
  2091  0445  00A8               	movwf	_power_ad^(0+128)	;volatile
  2092                           
  2093                           ;SC8F072_Pwm_Demo.c: 307: power_percent = (unsigned char)((power_ad-(1000UL*2.8))/(10UL*
      +                          1.4));
  2094  0446  0829               	movf	(_power_ad+1)^(0+128),w	;volatile
  2095  0447  1283               	bcf	3,5	;RP0=0, select bank0
  2096  0448  00A9               	movwf	___lwtoft@c+1
  2097  0449  1683               	bsf	3,5	;RP0=1, select bank1
  2098  044A  0828               	movf	_power_ad^(0+128),w	;volatile
  2099  044B  1283               	bcf	3,5	;RP0=0, select bank0
  2100  044C  00A8               	movwf	___lwtoft@c
  2101  044D  27B1               	fcall	___lwtoft
  2102  044E  0828               	movf	?___lwtoft,w
  2103  044F  00BD               	movwf	___ftadd@f2
  2104  0450  0829               	movf	?___lwtoft+1,w
  2105  0451  00BE               	movwf	___ftadd@f2+1
  2106  0452  082A               	movf	?___lwtoft+2,w
  2107  0453  00BF               	movwf	___ftadd@f2+2
  2108  0454  302F               	movlw	47
  2109  0455  01BA               	clrf	___ftadd@f1
  2110  0456  00BB               	movwf	___ftadd@f1+1
  2111  0457  30C5               	movlw	197
  2112  0458  00BC               	movwf	___ftadd@f1+2
  2113  0459  2277               	fcall	___ftadd
  2114  045A  083A               	movf	?___ftadd,w
  2115  045B  00C9               	movwf	___ftdiv@f1
  2116  045C  083B               	movf	?___ftadd+1,w
  2117  045D  00CA               	movwf	___ftdiv@f1+1
  2118  045E  083C               	movf	?___ftadd+2,w
  2119  045F  00CB               	movwf	___ftdiv@f1+2
  2120  0460  3060               	movlw	96
  2121  0461  01C6               	clrf	___ftdiv@f2
  2122  0462  00C7               	movwf	___ftdiv@f2+1
  2123  0463  3041               	movlw	65
  2124  0464  00C8               	movwf	___ftdiv@f2+2
  2125  0465  2485               	fcall	___ftdiv
  2126  0466  247E               	fcall	PL22	;call to abstracted procedure
  2127  0467  24EB               	fcall	___fttol
  2128  0468  0855               	movf	?___fttol,w
  2129  0469  00ED               	movwf	_power_percent	;volatile
  2130                           
  2131                           ;SC8F072_Pwm_Demo.c: 308: }
  2132  046A  2C73               	goto	l3374
  2133  046B                     l3370:	
  2134                           
  2135                           ;SC8F072_Pwm_Demo.c: 309: else
  2136                           ;SC8F072_Pwm_Demo.c: 310: {
  2137                           ;SC8F072_Pwm_Demo.c: 311: ADCON0 = 0;
  2138  046B  0195               	clrf	21	;volatile
  2139                           
  2140                           ;SC8F072_Pwm_Demo.c: 312: ADCON1 = 0;
  2141  046C  0196               	clrf	22	;volatile
  2142                           
  2143                           ;SC8F072_Pwm_Demo.c: 313: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2144  046D  3084               	movlw	132
  2145  046E  1283               	bcf	3,5	;RP0=0, select bank0
  2146  046F  00E7               	movwf	??_ADC_read
  2147  0470                     u2587:	
  2148  0470  0BE7               	decfsz	??_ADC_read,f
  2149  0471  2C70               	goto	u2587
  2150  0472  2C73               	nop2
  2151  0473                     l3374:	
  2152                           
  2153                           ;SC8F072_Pwm_Demo.c: 314: }
  2154                           ;SC8F072_Pwm_Demo.c: 315: ADC_Flag=0;
  2155  0473  1683               	bsf	3,5	;RP0=1, select bank1
  2156  0474  01AF               	clrf	_ADC_Flag^(0+128)	;volatile
  2157  0475  0008               	return
  2158  0476                     __end_of_ADC_read:	
  2159  0476                     PL16:	
  2160  0476  0832               	movf	(_adresult+1)^(0+128),w	;volatile
  2161  0477  1283               	bcf	3,5	;RP0=0, select bank0
  2162  0478  00A9               	movwf	___lwtoft@c+1
  2163  0479  1683               	bsf	3,5	;RP0=1, select bank1
  2164  047A  0831               	movf	_adresult^(0+128),w	;volatile
  2165  047B  1283               	bcf	3,5	;RP0=0, select bank0
  2166  047C  00A8               	movwf	___lwtoft@c
  2167  047D  0008               	return
  2168  047E                     __end_ofPL16:	
  2169  047E                     PL22:	
  2170  047E  0846               	movf	?___ftdiv,w
  2171  047F  00D5               	movwf	___fttol@f1
  2172  0480  0847               	movf	?___ftdiv+1,w
  2173  0481  00D6               	movwf	___fttol@f1+1
  2174  0482  0848               	movf	?___ftdiv+2,w
  2175  0483  00D7               	movwf	___fttol@f1+2
  2176  0484  0008               	return
  2177  0485                     __end_ofPL22:	
  2178                           
  2179                           	psect	text11
  2180  0485                     __ptext11:	
  2181 ;; *************** function ___ftdiv *****************
  2182 ;; Defined at:
  2183 ;;		line 56 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\ftdiv.c"
  2184 ;; Parameters:    Size  Location     Type
  2185 ;;  f2              3   38[BANK0 ] float 
  2186 ;;  f1              3   41[BANK0 ] float 
  2187 ;; Auto vars:     Size  Location     Type
  2188 ;;  f3              3   48[BANK0 ] float 
  2189 ;;  sign            1   52[BANK0 ] unsigned char 
  2190 ;;  exp             1   51[BANK0 ] unsigned char 
  2191 ;;  cntr            1   47[BANK0 ] unsigned char 
  2192 ;; Return value:  Size  Location     Type
  2193 ;;                  3   38[BANK0 ] float 
  2194 ;; Registers used:
  2195 ;;		wreg, status,2, status,0, pclath, cstack
  2196 ;; Tracked objects:
  2197 ;;		On entry : 100/0
  2198 ;;		On exit  : 100/0
  2199 ;;		Unchanged: 0/0
  2200 ;; Data sizes:     COMMON   BANK0   BANK1
  2201 ;;      Params:         0       6       0
  2202 ;;      Locals:         0       6       0
  2203 ;;      Temps:          0       3       0
  2204 ;;      Totals:         0      15       0
  2205 ;;Total ram usage:       15 bytes
  2206 ;; Hardware stack levels used:    1
  2207 ;; Hardware stack levels required when called:    4
  2208 ;; This function calls:
  2209 ;;		___ftpack
  2210 ;; This function is called by:
  2211 ;;		_ADC_read
  2212 ;; This function uses a non-reentrant model
  2213 ;;
  2214                           
  2215                           
  2216                           ;psect for function ___ftdiv
  2217  0485                     ___ftdiv:	
  2218                           
  2219                           ;incstack = 0
  2220                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2221  0485  0849               	movf	___ftdiv@f1,w
  2222  0486  00CC               	movwf	??___ftdiv
  2223  0487  084A               	movf	___ftdiv@f1+1,w
  2224  0488  00CD               	movwf	??___ftdiv+1
  2225  0489  084B               	movf	___ftdiv@f1+2,w
  2226  048A  00CE               	movwf	??___ftdiv+2
  2227  048B  1003               	clrc
  2228  048C  0D4D               	rlf	??___ftdiv+1,w
  2229  048D  0D4E               	rlf	??___ftdiv+2,w
  2230  048E  00D3               	movwf	___ftdiv@exp
  2231  048F  0853               	movf	___ftdiv@exp,w
  2232  0490  1D03               	btfss	3,2
  2233  0491  2C93               	goto	l3168
  2234  0492  2CE7               	ljmp	PL40	;call to abstracted procedure
  2235  0493                     l3168:	
  2236  0493  0846               	movf	___ftdiv@f2,w
  2237  0494  00CC               	movwf	??___ftdiv
  2238  0495  0847               	movf	___ftdiv@f2+1,w
  2239  0496  00CD               	movwf	??___ftdiv+1
  2240  0497  0848               	movf	___ftdiv@f2+2,w
  2241  0498  00CE               	movwf	??___ftdiv+2
  2242  0499  1003               	clrc
  2243  049A  0D4D               	rlf	??___ftdiv+1,w
  2244  049B  0D4E               	rlf	??___ftdiv+2,w
  2245  049C  00D4               	movwf	___ftdiv@sign
  2246  049D  0854               	movf	___ftdiv@sign,w
  2247  049E  1D03               	btfss	3,2
  2248  049F  2CA1               	goto	l1632
  2249  04A0  2CE7               	ljmp	PL40	;call to abstracted procedure
  2250  04A1                     l1632:	
  2251  04A1  3089               	movlw	137
  2252  04A2  01D0               	clrf	___ftdiv@f3
  2253  04A3  01D1               	clrf	___ftdiv@f3+1
  2254  04A4  01D2               	clrf	___ftdiv@f3+2
  2255  04A5  0754               	addwf	___ftdiv@sign,w
  2256  04A6  00CC               	movwf	??___ftdiv
  2257  04A7  02D3               	subwf	___ftdiv@exp,f
  2258  04A8  084B               	movf	___ftdiv@f1+2,w
  2259  04A9  00D4               	movwf	___ftdiv@sign
  2260  04AA  0848               	movf	___ftdiv@f2+2,w
  2261  04AB  06D4               	xorwf	___ftdiv@sign,f
  2262  04AC  3080               	movlw	128
  2263  04AD  05D4               	andwf	___ftdiv@sign,f
  2264  04AE  3018               	movlw	24
  2265  04AF  17CA               	bsf	___ftdiv@f1+1,7
  2266  04B0  01CB               	clrf	___ftdiv@f1+2
  2267  04B1  17C7               	bsf	___ftdiv@f2+1,7
  2268  04B2  01C8               	clrf	___ftdiv@f2+2
  2269  04B3  00CF               	movwf	___ftdiv@cntr
  2270  04B4                     l3190:	
  2271  04B4  1003               	clrc
  2272  04B5  0DD0               	rlf	___ftdiv@f3,f
  2273  04B6  0DD1               	rlf	___ftdiv@f3+1,f
  2274  04B7  0DD2               	rlf	___ftdiv@f3+2,f
  2275  04B8  0848               	movf	___ftdiv@f2+2,w
  2276  04B9  024B               	subwf	___ftdiv@f1+2,w
  2277  04BA  1D03               	skipz
  2278  04BB  2CC2               	goto	u2265
  2279  04BC  0847               	movf	___ftdiv@f2+1,w
  2280  04BD  024A               	subwf	___ftdiv@f1+1,w
  2281  04BE  1D03               	skipz
  2282  04BF  2CC2               	goto	u2265
  2283  04C0  0846               	movf	___ftdiv@f2,w
  2284  04C1  0249               	subwf	___ftdiv@f1,w
  2285  04C2                     u2265:	
  2286  04C2  1C03               	skipc
  2287  04C3  2CD0               	goto	L5
  2288  04C4  0846               	movf	___ftdiv@f2,w
  2289  04C5  02C9               	subwf	___ftdiv@f1,f
  2290  04C6  0847               	movf	___ftdiv@f2+1,w
  2291  04C7  1C03               	skipc
  2292  04C8  0F47               	incfsz	___ftdiv@f2+1,w
  2293  04C9  02CA               	subwf	___ftdiv@f1+1,f
  2294  04CA  0848               	movf	___ftdiv@f2+2,w
  2295  04CB  1C03               	skipc
  2296  04CC  0A48               	incf	___ftdiv@f2+2,w
  2297  04CD  02CB               	subwf	___ftdiv@f1+2,f
  2298  04CE  1450               	bsf	___ftdiv@f3,0
  2299  04CF  1003               	clrc
  2300  04D0                     L5:	
  2301  04D0  0DC9               	rlf	___ftdiv@f1,f
  2302  04D1  0DCA               	rlf	___ftdiv@f1+1,f
  2303  04D2  0DCB               	rlf	___ftdiv@f1+2,f
  2304  04D3  0BCF               	decfsz	___ftdiv@cntr,f
  2305  04D4  2CB4               	goto	l3190
  2306  04D5  0850               	movf	___ftdiv@f3,w
  2307  04D6  00A0               	movwf	___ftpack@arg
  2308  04D7  0851               	movf	___ftdiv@f3+1,w
  2309  04D8  00A1               	movwf	___ftpack@arg+1
  2310  04D9  0852               	movf	___ftdiv@f3+2,w
  2311  04DA  00A2               	movwf	___ftpack@arg+2
  2312  04DB  0853               	movf	___ftdiv@exp,w
  2313  04DC  00A3               	movwf	___ftpack@exp
  2314  04DD  0854               	movf	___ftdiv@sign,w
  2315  04DE  00A4               	movwf	___ftpack@sign
  2316  04DF  258E               	fcall	___ftpack
  2317  04E0  0820               	movf	?___ftpack,w
  2318  04E1  00C6               	movwf	?___ftdiv
  2319  04E2  0821               	movf	?___ftpack+1,w
  2320  04E3  00C7               	movwf	?___ftdiv+1
  2321  04E4  0822               	movf	?___ftpack+2,w
  2322  04E5  00C8               	movwf	?___ftdiv+2
  2323  04E6  0008               	return
  2324  04E7                     __end_of___ftdiv:	
  2325  04E7                     PL40:	
  2326  04E7  01C6               	clrf	?___ftdiv
  2327  04E8  01C7               	clrf	?___ftdiv+1
  2328  04E9  01C8               	clrf	?___ftdiv+2
  2329  04EA  0008               	return
  2330  04EB                     __end_ofPL40:	
  2331                           
  2332                           	psect	text12
  2333  003D                     __ptext12:	
  2334 ;; *************** function _ADC_Sample *****************
  2335 ;; Defined at:
  2336 ;;		line 228 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_Demo\SC8F072_Pwm_Demo.c"
  2337 ;; Parameters:    Size  Location     Type
  2338 ;;  adch            1    wreg     unsigned char 
  2339 ;;  adldo           1   66[BANK0 ] unsigned char 
  2340 ;; Auto vars:     Size  Location     Type
  2341 ;;  adch            1    1[BANK1 ] unsigned char 
  2342 ;;  j               1    0[BANK1 ] unsigned char 
  2343 ;;  adsum           4    7[BANK1 ] volatile unsigned long 
  2344 ;;  ad_temp         2   11[BANK1 ] volatile unsigned int 
  2345 ;;  admax           2    5[BANK1 ] volatile unsigned int 
  2346 ;;  admin           2    3[BANK1 ] volatile unsigned int 
  2347 ;;  i               1    2[BANK1 ] unsigned char 
  2348 ;; Return value:  Size  Location     Type
  2349 ;;                  1    wreg      unsigned char 
  2350 ;; Registers used:
  2351 ;;		wreg, status,2, status,0, pclath, cstack
  2352 ;; Tracked objects:
  2353 ;;		On entry : 100/0
  2354 ;;		On exit  : 100/100
  2355 ;;		Unchanged: 0/0
  2356 ;; Data sizes:     COMMON   BANK0   BANK1
  2357 ;;      Params:         0       1       0
  2358 ;;      Locals:         0       0      13
  2359 ;;      Temps:          0       4       0
  2360 ;;      Totals:         0       5      13
  2361 ;;Total ram usage:       18 bytes
  2362 ;; Hardware stack levels used:    1
  2363 ;; Hardware stack levels required when called:    5
  2364 ;; This function calls:
  2365 ;;		___ftadd
  2366 ;;		___ftmul
  2367 ;;		___fttol
  2368 ;;		___lwtoft
  2369 ;; This function is called by:
  2370 ;;		_ADC_read
  2371 ;; This function uses a non-reentrant model
  2372 ;;
  2373                           
  2374                           
  2375                           ;psect for function _ADC_Sample
  2376  003D                     _ADC_Sample:	
  2377                           
  2378                           ;incstack = 0
  2379                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0+pclath+cstack]
  2380                           ;ADC_Sample@adch stored from wreg
  2381  003D  1683               	bsf	3,5	;RP0=1, select bank1
  2382  003E  00C5               	movwf	ADC_Sample@adch^(0+128)
  2383                           
  2384                           ;SC8F072_Pwm_Demo.c: 231: volatile unsigned long adsum = 0;
  2385                           
  2386                           ;SC8F072_Pwm_Demo.c: 232: volatile unsigned int admin = 0, admax = 0;
  2387  003F  2186               	fcall	PL12	;call to abstracted procedure
  2388                           
  2389                           ;SC8F072_Pwm_Demo.c: 233: volatile unsigned int ad_temp = 0;
  2390  0040  01CF               	clrf	ADC_Sample@ad_temp^(0+128)	;volatile
  2391  0041  01D0               	clrf	(ADC_Sample@ad_temp+1)^(0+128)	;volatile
  2392                           
  2393                           ;SC8F072_Pwm_Demo.c: 235: if ((!LDO_EN) && (adldo & 0x04) )
  2394  0042  1916               	btfsc	22,2	;volatile
  2395  0043  2851               	goto	l2968
  2396  0044  1283               	bcf	3,5	;RP0=0, select bank0
  2397  0045  1D62               	btfss	ADC_Sample@adldo,2
  2398  0046  2851               	goto	l2968
  2399                           
  2400                           ;SC8F072_Pwm_Demo.c: 236: {
  2401                           ;SC8F072_Pwm_Demo.c: 238: ADCON1 = adldo;
  2402  0047  0862               	movf	ADC_Sample@adldo,w
  2403  0048  1683               	bsf	3,5	;RP0=1, select bank1
  2404  0049  0096               	movwf	22	;volatile
  2405                           
  2406                           ;SC8F072_Pwm_Demo.c: 239: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2407  004A  3084               	movlw	132
  2408  004B  1283               	bcf	3,5	;RP0=0, select bank0
  2409  004C  00E3               	movwf	??_ADC_Sample
  2410  004D                     u2597:	
  2411  004D  0BE3               	decfsz	??_ADC_Sample,f
  2412  004E  284D               	goto	u2597
  2413  004F  2850               	nop2
  2414                           
  2415                           ;SC8F072_Pwm_Demo.c: 240: }
  2416  0050  2855               	goto	l2970
  2417  0051                     l2968:	
  2418                           
  2419                           ;SC8F072_Pwm_Demo.c: 241: else
  2420                           ;SC8F072_Pwm_Demo.c: 242: ADCON1 = adldo;
  2421  0051  1283               	bcf	3,5	;RP0=0, select bank0
  2422  0052  0862               	movf	ADC_Sample@adldo,w
  2423  0053  1683               	bsf	3,5	;RP0=1, select bank1
  2424  0054  0096               	movwf	22	;volatile
  2425  0055                     l2970:	
  2426                           
  2427                           ;SC8F072_Pwm_Demo.c: 243: if(adch & 0x10)
  2428  0055  1683               	bsf	3,5	;RP0=1, select bank1
  2429  0056  1E45               	btfss	ADC_Sample@adch^(0+128),4
  2430  0057  285B               	goto	l2978
  2431                           
  2432                           ;SC8F072_Pwm_Demo.c: 244: {
  2433                           ;SC8F072_Pwm_Demo.c: 245: CHS4 = 1;
  2434  0058  1716               	bsf	22,6	;volatile
  2435                           
  2436                           ;SC8F072_Pwm_Demo.c: 246: adch &= 0x0f;
  2437  0059  300F               	movlw	15
  2438  005A  05C5               	andwf	ADC_Sample@adch^(0+128),f
  2439  005B                     l2978:	
  2440                           
  2441                           ;SC8F072_Pwm_Demo.c: 249: for (i = 0; i < 10; i++)
  2442  005B  01C6               	clrf	ADC_Sample@i^(0+128)
  2443  005C                     l2984:	
  2444                           
  2445                           ;SC8F072_Pwm_Demo.c: 250: {
  2446                           ;SC8F072_Pwm_Demo.c: 251: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  2447  005C  0845               	movf	ADC_Sample@adch^(0+128),w
  2448  005D  1283               	bcf	3,5	;RP0=0, select bank0
  2449  005E  00E3               	movwf	??_ADC_Sample
  2450  005F  3001               	movlw	1
  2451  0060  1003               	clrc
  2452  0061                     L6:	
  2453  0061  0DE3               	rlf	??_ADC_Sample,f
  2454  0062  3EFF               	addlw	-1
  2455  0063  1003               	clrc
  2456  0064  1D03               	skipz
  2457  0065  2861               	goto	L6
  2458  0066  0D63               	rlf	??_ADC_Sample,w
  2459  0067  3841               	iorlw	65
  2460  0068  1683               	bsf	3,5	;RP0=1, select bank1
  2461  0069  0095               	movwf	21	;volatile
  2462  006A  0000               	nop	;# 
  2463  006B  0000               	nop	;# 
  2464  006C  0000               	nop	;# 
  2465  006D  0000               	nop	;# 
  2466                           
  2467                           ;SC8F072_Pwm_Demo.c: 256: GODONE = 1;
  2468  006E  1683               	bsf	3,5	;RP0=1, select bank1
  2469  006F  1495               	bsf	21,1	;volatile
  2470                           
  2471                           ;SC8F072_Pwm_Demo.c: 257: unsigned char j = 0;
  2472  0070  01C4               	clrf	ADC_Sample@j^(0+128)
  2473  0071                     l686:	
  2474                           ;SC8F072_Pwm_Demo.c: 258: while (GODONE)
  2475                           
  2476  0071  1C95               	btfss	21,1	;volatile
  2477  0072  287B               	goto	l2994
  2478                           
  2479                           ;SC8F072_Pwm_Demo.c: 259: {
  2480                           ;SC8F072_Pwm_Demo.c: 260: _delay((unsigned long)((2)*(16000000/4000000.0)));
  2481  0073  2874               	nop2	;2 cycle nop
  2482  0074  2875               	nop2	;2 cycle nop
  2483  0075  2876               	nop2	;2 cycle nop
  2484  0076  2877               	nop2	;2 cycle nop
  2485                           
  2486                           ;SC8F072_Pwm_Demo.c: 261: if (0 == (--j))
  2487  0077  1683               	bsf	3,5	;RP0=1, select bank1
  2488  0078  0BC4               	decfsz	ADC_Sample@j^(0+128),f
  2489  0079  2871               	goto	l686
  2490                           
  2491                           ;SC8F072_Pwm_Demo.c: 262: return 0;
  2492  007A  3400               	retlw	0
  2493  007B                     l2994:	
  2494                           
  2495                           ;SC8F072_Pwm_Demo.c: 263: }
  2496                           ;SC8F072_Pwm_Demo.c: 265: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  2497  007B  0819               	movf	25,w	;volatile
  2498  007C  00CF               	movwf	ADC_Sample@ad_temp^(0+128)	;volatile
  2499  007D  01D0               	clrf	(ADC_Sample@ad_temp+1)^(0+128)	;volatile
  2500  007E  0ECF               	swapf	ADC_Sample@ad_temp^(0+128),f	;volatile
  2501  007F  0ED0               	swapf	(ADC_Sample@ad_temp+1)^(0+128),f	;volatile
  2502  0080  30F0               	movlw	240
  2503  0081  05D0               	andwf	(ADC_Sample@ad_temp+1)^(0+128),f	;volatile
  2504  0082  084F               	movf	ADC_Sample@ad_temp^(0+128),w	;volatile
  2505  0083  390F               	andlw	15
  2506  0084  04D0               	iorwf	(ADC_Sample@ad_temp+1)^(0+128),f	;volatile
  2507  0085  30F0               	movlw	240
  2508  0086  05CF               	andwf	ADC_Sample@ad_temp^(0+128),f	;volatile
  2509  0087  0E18               	swapf	24,w	;volatile
  2510  0088  390F               	andlw	15
  2511  0089  07CF               	addwf	ADC_Sample@ad_temp^(0+128),f	;volatile
  2512  008A  1803               	skipnc
  2513  008B  0AD0               	incf	(ADC_Sample@ad_temp+1)^(0+128),f	;volatile
  2514                           
  2515                           ;SC8F072_Pwm_Demo.c: 267: if (0 == admax)
  2516  008C  0849               	movf	ADC_Sample@admax^(0+128),w	;volatile
  2517  008D  044A               	iorwf	(ADC_Sample@admax+1)^(0+128),w	;volatile
  2518  008E  1D03               	btfss	3,2
  2519  008F  2892               	goto	l3002
  2520                           
  2521                           ;SC8F072_Pwm_Demo.c: 268: {
  2522                           ;SC8F072_Pwm_Demo.c: 269: admax = ad_temp;
  2523  0090  2196               	fcall	PL36	;call to abstracted procedure
  2524  0091  28A4               	goto	l3008
  2525  0092                     l3002:	
  2526                           ;SC8F072_Pwm_Demo.c: 271: }
  2527                           
  2528                           ;SC8F072_Pwm_Demo.c: 270: admin = ad_temp;
  2529                           
  2530                           
  2531                           ;SC8F072_Pwm_Demo.c: 272: else if (ad_temp > admax)admax = ad_temp;
  2532  0092  0850               	movf	(ADC_Sample@ad_temp+1)^(0+128),w	;volatile
  2533  0093  024A               	subwf	(ADC_Sample@admax+1)^(0+128),w	;volatile
  2534  0094  1D03               	skipz
  2535  0095  2898               	goto	u1895
  2536  0096  084F               	movf	ADC_Sample@ad_temp^(0+128),w	;volatile
  2537  0097  0249               	subwf	ADC_Sample@admax^(0+128),w	;volatile
  2538  0098                     u1895:	
  2539  0098  1803               	skipnc
  2540  0099  289C               	goto	l3006
  2541  009A  2196               	fcall	PL36	;call to abstracted procedure
  2542  009B  28A8               	goto	l692
  2543  009C                     l3006:	
  2544                           
  2545                           ;SC8F072_Pwm_Demo.c: 274: else if (ad_temp < admin)admin = ad_temp;
  2546  009C  0848               	movf	(ADC_Sample@admin+1)^(0+128),w	;volatile
  2547  009D  0250               	subwf	(ADC_Sample@ad_temp+1)^(0+128),w	;volatile
  2548  009E  1D03               	skipz
  2549  009F  28A2               	goto	u1905
  2550  00A0  0847               	movf	ADC_Sample@admin^(0+128),w	;volatile
  2551  00A1  024F               	subwf	ADC_Sample@ad_temp^(0+128),w	;volatile
  2552  00A2                     u1905:	
  2553  00A2  1803               	skipnc
  2554  00A3  28A8               	goto	l692
  2555  00A4                     l3008:	
  2556  00A4  0850               	movf	(ADC_Sample@ad_temp+1)^(0+128),w	;volatile
  2557  00A5  00C8               	movwf	(ADC_Sample@admin+1)^(0+128)	;volatile
  2558  00A6  084F               	movf	ADC_Sample@ad_temp^(0+128),w	;volatile
  2559  00A7  00C7               	movwf	ADC_Sample@admin^(0+128)	;volatile
  2560  00A8                     l692:	
  2561                           
  2562                           ;SC8F072_Pwm_Demo.c: 275: adsum += ad_temp;
  2563  00A8  084F               	movf	ADC_Sample@ad_temp^(0+128),w	;volatile
  2564  00A9  1283               	bcf	3,5	;RP0=0, select bank0
  2565  00AA  00E3               	movwf	??_ADC_Sample
  2566  00AB  1683               	bsf	3,5	;RP0=1, select bank1
  2567  00AC  0850               	movf	(ADC_Sample@ad_temp+1)^(0+128),w	;volatile
  2568  00AD  1283               	bcf	3,5	;RP0=0, select bank0
  2569  00AE  00E4               	movwf	??_ADC_Sample+1
  2570  00AF  01E5               	clrf	??_ADC_Sample+2
  2571  00B0  01E6               	clrf	??_ADC_Sample+3
  2572  00B1  0863               	movf	??_ADC_Sample,w
  2573  00B2  1683               	bsf	3,5	;RP0=1, select bank1
  2574  00B3  07CB               	addwf	ADC_Sample@adsum^(0+128),f	;volatile
  2575  00B4  1283               	bcf	3,5	;RP0=0, select bank0
  2576  00B5  0864               	movf	??_ADC_Sample+1,w
  2577  00B6  1103               	clrz
  2578  00B7  1803               	skipnc
  2579  00B8  3E01               	addlw	1
  2580  00B9  1683               	bsf	3,5	;RP0=1, select bank1
  2581  00BA  1D03               	btfss	3,2
  2582  00BB  07CC               	addwf	(ADC_Sample@adsum+1)^(0+128),f	;volatile
  2583  00BC  1283               	bcf	3,5	;RP0=0, select bank0
  2584  00BD  0865               	movf	??_ADC_Sample+2,w
  2585  00BE  1103               	clrz
  2586  00BF  1803               	skipnc
  2587  00C0  3E01               	addlw	1
  2588  00C1  1683               	bsf	3,5	;RP0=1, select bank1
  2589  00C2  1D03               	btfss	3,2
  2590  00C3  07CD               	addwf	(ADC_Sample@adsum+2)^(0+128),f	;volatile
  2591  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  2592  00C5  0866               	movf	??_ADC_Sample+3,w
  2593  00C6  1103               	clrz
  2594  00C7  1803               	skipnc
  2595  00C8  3E01               	addlw	1
  2596  00C9  1683               	bsf	3,5	;RP0=1, select bank1
  2597  00CA  1D03               	btfss	3,2
  2598  00CB  07CE               	addwf	(ADC_Sample@adsum+3)^(0+128),f	;volatile
  2599  00CC  300A               	movlw	10
  2600  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  2601  00CE  1683               	bsf	3,5	;RP0=1, select bank1
  2602  00CF  0AC6               	incf	ADC_Sample@i^(0+128),f
  2603  00D0  0246               	subwf	ADC_Sample@i^(0+128),w
  2604  00D1  1C03               	skipc
  2605  00D2  285C               	goto	l2984
  2606                           
  2607                           ;SC8F072_Pwm_Demo.c: 276: }
  2608                           ;SC8F072_Pwm_Demo.c: 277: adsum -= admax;
  2609  00D3  0849               	movf	ADC_Sample@admax^(0+128),w	;volatile
  2610  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  2611  00D5  00E3               	movwf	??_ADC_Sample
  2612  00D6  1683               	bsf	3,5	;RP0=1, select bank1
  2613  00D7  084A               	movf	(ADC_Sample@admax+1)^(0+128),w	;volatile
  2614  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  2615  00D9  00E4               	movwf	??_ADC_Sample+1
  2616  00DA  2140               	fcall	PL2	;call to abstracted procedure
  2617                           
  2618                           ;SC8F072_Pwm_Demo.c: 278: if (adsum >= admin)
  2619  00DB  217E               	fcall	PL8	;call to abstracted procedure
  2620  00DC  01E5               	clrf	??_ADC_Sample+2
  2621  00DD  01E6               	clrf	??_ADC_Sample+3
  2622  00DE  0866               	movf	??_ADC_Sample+3,w
  2623  00DF  1683               	bsf	3,5	;RP0=1, select bank1
  2624  00E0  024E               	subwf	(ADC_Sample@adsum+3)^(0+128),w	;volatile
  2625  00E1  1D03               	skipz
  2626  00E2  28F3               	goto	u1945
  2627  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  2628  00E4  0865               	movf	??_ADC_Sample+2,w
  2629  00E5  1683               	bsf	3,5	;RP0=1, select bank1
  2630  00E6  024D               	subwf	(ADC_Sample@adsum+2)^(0+128),w	;volatile
  2631  00E7  1D03               	skipz
  2632  00E8  28F3               	goto	u1945
  2633  00E9  1283               	bcf	3,5	;RP0=0, select bank0
  2634  00EA  0864               	movf	??_ADC_Sample+1,w
  2635  00EB  1683               	bsf	3,5	;RP0=1, select bank1
  2636  00EC  024C               	subwf	(ADC_Sample@adsum+1)^(0+128),w	;volatile
  2637  00ED  1D03               	skipz
  2638  00EE  28F3               	goto	u1945
  2639  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  2640  00F0  0863               	movf	??_ADC_Sample,w
  2641  00F1  1683               	bsf	3,5	;RP0=1, select bank1
  2642  00F2  024B               	subwf	ADC_Sample@adsum^(0+128),w	;volatile
  2643  00F3                     u1945:	
  2644  00F3  1C03               	skipc
  2645  00F4  28F8               	goto	l696
  2646                           
  2647                           ;SC8F072_Pwm_Demo.c: 279: adsum -= admin;
  2648  00F5  217E               	fcall	PL8	;call to abstracted procedure
  2649  00F6  2140               	fcall	PL2	;call to abstracted procedure
  2650  00F7  28FC               	goto	l3018
  2651  00F8                     l696:	
  2652                           
  2653                           ;SC8F072_Pwm_Demo.c: 280: else
  2654                           ;SC8F072_Pwm_Demo.c: 281: adsum = 0;
  2655  00F8  01CB               	clrf	ADC_Sample@adsum^(0+128)	;volatile
  2656  00F9  01CC               	clrf	(ADC_Sample@adsum+1)^(0+128)	;volatile
  2657  00FA  01CD               	clrf	(ADC_Sample@adsum+2)^(0+128)	;volatile
  2658  00FB  01CE               	clrf	(ADC_Sample@adsum+3)^(0+128)	;volatile
  2659  00FC                     l3018:	
  2660                           
  2661                           ;SC8F072_Pwm_Demo.c: 283: if (adc_last)
  2662  00FC  0824               	movf	_adc_last^(0+128),w
  2663  00FD  0425               	iorwf	(_adc_last+1)^(0+128),w
  2664  00FE  1903               	btfsc	3,2
  2665  00FF  2937               	goto	l3026
  2666                           
  2667                           ;SC8F072_Pwm_Demo.c: 284: {
  2668                           ;SC8F072_Pwm_Demo.c: 285: adresult = adsum>>3;
  2669  0100  2160               	fcall	PL4	;call to abstracted procedure
  2670  0101  1683               	bsf	3,5	;RP0=1, select bank1
  2671  0102  00B1               	movwf	_adresult^(0+128)	;volatile
  2672                           
  2673                           ;SC8F072_Pwm_Demo.c: 286: adresult = (int)(0.3*adresult + 0.7*adc_last);
  2674  0103  2476               	fcall	PL16	;call to abstracted procedure
  2675  0104  27B1               	fcall	___lwtoft
  2676  0105  218F               	fcall	PL18	;call to abstracted procedure
  2677  0106  309A               	movlw	154
  2678  0107  00AB               	movwf	___ftmul@f1
  2679  0108  3099               	movlw	153
  2680  0109  00AC               	movwf	___ftmul@f1+1
  2681  010A  303E               	movlw	62
  2682  010B  00AD               	movwf	___ftmul@f1+2
  2683  010C  23AC               	fcall	___ftmul
  2684  010D  082B               	movf	?___ftmul,w
  2685  010E  00BD               	movwf	___ftadd@f2
  2686  010F  082C               	movf	?___ftmul+1,w
  2687  0110  00BE               	movwf	___ftadd@f2+1
  2688  0111  082D               	movf	?___ftmul+2,w
  2689  0112  00BF               	movwf	___ftadd@f2+2
  2690  0113  1683               	bsf	3,5	;RP0=1, select bank1
  2691  0114  0825               	movf	(_adc_last+1)^(0+128),w
  2692  0115  1283               	bcf	3,5	;RP0=0, select bank0
  2693  0116  00A9               	movwf	___lwtoft@c+1
  2694  0117  1683               	bsf	3,5	;RP0=1, select bank1
  2695  0118  0824               	movf	_adc_last^(0+128),w
  2696  0119  1283               	bcf	3,5	;RP0=0, select bank0
  2697  011A  00A8               	movwf	___lwtoft@c
  2698  011B  27B1               	fcall	___lwtoft
  2699  011C  218F               	fcall	PL18	;call to abstracted procedure
  2700  011D  3033               	movlw	51
  2701  011E  00AB               	movwf	___ftmul@f1
  2702  011F  00AC               	movwf	___ftmul@f1+1
  2703  0120  303F               	movlw	63
  2704  0121  00AD               	movwf	___ftmul@f1+2
  2705  0122  23AC               	fcall	___ftmul
  2706  0123  082B               	movf	?___ftmul,w
  2707  0124  00BA               	movwf	___ftadd@f1
  2708  0125  082C               	movf	?___ftmul+1,w
  2709  0126  00BB               	movwf	___ftadd@f1+1
  2710  0127  082D               	movf	?___ftmul+2,w
  2711  0128  00BC               	movwf	___ftadd@f1+2
  2712  0129  2277               	fcall	___ftadd
  2713  012A  083A               	movf	?___ftadd,w
  2714  012B  00D5               	movwf	___fttol@f1
  2715  012C  083B               	movf	?___ftadd+1,w
  2716  012D  00D6               	movwf	___fttol@f1+1
  2717  012E  083C               	movf	?___ftadd+2,w
  2718  012F  00D7               	movwf	___fttol@f1+2
  2719  0130  24EB               	fcall	___fttol
  2720  0131  0856               	movf	?___fttol+1,w
  2721  0132  1683               	bsf	3,5	;RP0=1, select bank1
  2722  0133  00B2               	movwf	(_adresult+1)^(0+128)	;volatile
  2723  0134  1283               	bcf	3,5	;RP0=0, select bank0
  2724  0135  0855               	movf	?___fttol,w
  2725  0136  2938               	goto	L7
  2726  0137                     l3026:	
  2727                           ;SC8F072_Pwm_Demo.c: 288: } else
  2728                           
  2729                           
  2730                           ;SC8F072_Pwm_Demo.c: 289: {
  2731                           ;SC8F072_Pwm_Demo.c: 290: adresult = adsum>>3;
  2732  0137  2160               	fcall	PL4	;call to abstracted procedure
  2733  0138                     L7:	
  2734  0138  1683               	bsf	3,5	;RP0=1, select bank1
  2735  0139  00B1               	movwf	_adresult^(0+128)	;volatile
  2736                           
  2737                           ;SC8F072_Pwm_Demo.c: 287: adc_last = adresult;
  2738  013A  0832               	movf	(_adresult+1)^(0+128),w	;volatile
  2739  013B  00A5               	movwf	(_adc_last+1)^(0+128)
  2740  013C  0831               	movf	_adresult^(0+128),w	;volatile
  2741  013D  00A4               	movwf	_adc_last^(0+128)
  2742                           
  2743                           ;SC8F072_Pwm_Demo.c: 292: }
  2744                           ;SC8F072_Pwm_Demo.c: 293: adsum = 0;
  2745                           
  2746                           ;SC8F072_Pwm_Demo.c: 294: admin = 0;
  2747                           
  2748                           ;SC8F072_Pwm_Demo.c: 295: admax = 0;
  2749  013E  2186               	fcall	PL12	;call to abstracted procedure
  2750                           
  2751                           ;SC8F072_Pwm_Demo.c: 296: return 0xA5;
  2752  013F  34A5               	retlw	165
  2753  0140                     __end_of_ADC_Sample:	
  2754  0140                     PL2:	
  2755  0140  01E5               	clrf	??_ADC_Sample+2
  2756  0141  01E6               	clrf	??_ADC_Sample+3
  2757  0142  0863               	movf	??_ADC_Sample,w
  2758  0143  1683               	bsf	3,5	;RP0=1, select bank1
  2759  0144  02CB               	subwf	ADC_Sample@adsum^(0+128),f	;volatile
  2760  0145  1283               	bcf	3,5	;RP0=0, select bank0
  2761  0146  0864               	movf	??_ADC_Sample+1,w
  2762  0147  1C03               	skipc
  2763  0148  0F64               	incfsz	??_ADC_Sample+1,w
  2764  0149  294B               	goto	u1935
  2765  014A  294D               	goto	u1936
  2766  014B                     u1935:	
  2767  014B  1683               	bsf	3,5	;RP0=1, select bank1
  2768  014C  02CC               	subwf	(ADC_Sample@adsum+1)^(0+128),f	;volatile
  2769  014D                     u1936:	
  2770  014D  1283               	bcf	3,5	;RP0=0, select bank0
  2771  014E  0865               	movf	??_ADC_Sample+2,w
  2772  014F  1C03               	skipc
  2773  0150  0F65               	incfsz	??_ADC_Sample+2,w
  2774  0151  2953               	goto	u1937
  2775  0152  2955               	goto	u1938
  2776  0153                     u1937:	
  2777  0153  1683               	bsf	3,5	;RP0=1, select bank1
  2778  0154  02CD               	subwf	(ADC_Sample@adsum+2)^(0+128),f	;volatile
  2779  0155                     u1938:	
  2780  0155  1283               	bcf	3,5	;RP0=0, select bank0
  2781  0156  0866               	movf	??_ADC_Sample+3,w
  2782  0157  1C03               	skipc
  2783  0158  0F66               	incfsz	??_ADC_Sample+3,w
  2784  0159  295B               	goto	u1939
  2785  015A  295D               	goto	u1930
  2786  015B                     u1939:	
  2787  015B  1683               	bsf	3,5	;RP0=1, select bank1
  2788  015C  02CE               	subwf	(ADC_Sample@adsum+3)^(0+128),f	;volatile
  2789  015D                     u1930:	
  2790  015D  1283               	bcf	3,5	;RP0=0, select bank0
  2791  015E  1683               	bsf	3,5	;RP0=1, select bank1
  2792  015F  0008               	return
  2793  0160                     __end_ofPL2:	
  2794  0160                     PL4:	
  2795  0160  084B               	movf	ADC_Sample@adsum^(0+128),w	;volatile
  2796  0161  1283               	bcf	3,5	;RP0=0, select bank0
  2797  0162  00E3               	movwf	??_ADC_Sample
  2798  0163  1683               	bsf	3,5	;RP0=1, select bank1
  2799  0164  084C               	movf	(ADC_Sample@adsum+1)^(0+128),w	;volatile
  2800  0165  1283               	bcf	3,5	;RP0=0, select bank0
  2801  0166  00E4               	movwf	??_ADC_Sample+1
  2802  0167  1683               	bsf	3,5	;RP0=1, select bank1
  2803  0168  084D               	movf	(ADC_Sample@adsum+2)^(0+128),w	;volatile
  2804  0169  1283               	bcf	3,5	;RP0=0, select bank0
  2805  016A  00E5               	movwf	??_ADC_Sample+2
  2806  016B  1683               	bsf	3,5	;RP0=1, select bank1
  2807  016C  084E               	movf	(ADC_Sample@adsum+3)^(0+128),w	;volatile
  2808  016D  1283               	bcf	3,5	;RP0=0, select bank0
  2809  016E  00E6               	movwf	??_ADC_Sample+3
  2810  016F  3003               	movlw	3
  2811  0170                     u1975:	
  2812  0170  1003               	clrc
  2813  0171  0CE6               	rrf	??_ADC_Sample+3,f
  2814  0172  0CE5               	rrf	??_ADC_Sample+2,f
  2815  0173  0CE4               	rrf	??_ADC_Sample+1,f
  2816  0174  0CE3               	rrf	??_ADC_Sample,f
  2817  0175  3EFF               	addlw	-1
  2818  0176  1D03               	skipz
  2819  0177  2970               	goto	u1975
  2820  0178  0864               	movf	??_ADC_Sample+1,w
  2821  0179  1683               	bsf	3,5	;RP0=1, select bank1
  2822  017A  00B2               	movwf	(_adresult+1)^(0+128)	;volatile
  2823  017B  1283               	bcf	3,5	;RP0=0, select bank0
  2824  017C  0863               	movf	??_ADC_Sample,w
  2825  017D  0008               	return
  2826  017E                     __end_ofPL4:	
  2827  017E                     PL8:	
  2828  017E  0847               	movf	ADC_Sample@admin^(0+128),w	;volatile
  2829  017F  1283               	bcf	3,5	;RP0=0, select bank0
  2830  0180  00E3               	movwf	??_ADC_Sample
  2831  0181  1683               	bsf	3,5	;RP0=1, select bank1
  2832  0182  0848               	movf	(ADC_Sample@admin+1)^(0+128),w	;volatile
  2833  0183  1283               	bcf	3,5	;RP0=0, select bank0
  2834  0184  00E4               	movwf	??_ADC_Sample+1
  2835  0185  0008               	return
  2836  0186                     __end_ofPL8:	
  2837  0186                     PL12:	
  2838  0186  01CB               	clrf	ADC_Sample@adsum^(0+128)	;volatile
  2839  0187  01CC               	clrf	(ADC_Sample@adsum+1)^(0+128)	;volatile
  2840  0188  01CD               	clrf	(ADC_Sample@adsum+2)^(0+128)	;volatile
  2841  0189  01CE               	clrf	(ADC_Sample@adsum+3)^(0+128)	;volatile
  2842  018A  01C7               	clrf	ADC_Sample@admin^(0+128)	;volatile
  2843  018B  01C8               	clrf	(ADC_Sample@admin+1)^(0+128)	;volatile
  2844  018C  01C9               	clrf	ADC_Sample@admax^(0+128)	;volatile
  2845  018D  01CA               	clrf	(ADC_Sample@admax+1)^(0+128)	;volatile
  2846  018E  0008               	return
  2847  018F                     __end_ofPL12:	
  2848  018F                     PL18:	
  2849  018F  0828               	movf	?___lwtoft,w
  2850  0190  00AE               	movwf	___ftmul@f2
  2851  0191  0829               	movf	?___lwtoft+1,w
  2852  0192  00AF               	movwf	___ftmul@f2+1
  2853  0193  082A               	movf	?___lwtoft+2,w
  2854  0194  00B0               	movwf	___ftmul@f2+2
  2855  0195  0008               	return
  2856  0196                     __end_ofPL18:	
  2857  0196                     PL36:	
  2858  0196  0850               	movf	(ADC_Sample@ad_temp+1)^(0+128),w	;volatile
  2859  0197  00CA               	movwf	(ADC_Sample@admax+1)^(0+128)	;volatile
  2860  0198  084F               	movf	ADC_Sample@ad_temp^(0+128),w	;volatile
  2861  0199  00C9               	movwf	ADC_Sample@admax^(0+128)	;volatile
  2862  019A  0008               	return
  2863  019B                     __end_ofPL36:	
  2864                           
  2865                           	psect	text13
  2866  07B1                     __ptext13:	
  2867 ;; *************** function ___lwtoft *****************
  2868 ;; Defined at:
  2869 ;;		line 28 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\lwtoft.c"
  2870 ;; Parameters:    Size  Location     Type
  2871 ;;  c               2    8[BANK0 ] unsigned int 
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;		None
  2874 ;; Return value:  Size  Location     Type
  2875 ;;                  3    8[BANK0 ] float 
  2876 ;; Registers used:
  2877 ;;		wreg, status,2, status,0, pclath, cstack
  2878 ;; Tracked objects:
  2879 ;;		On entry : 100/0
  2880 ;;		On exit  : 100/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMMON   BANK0   BANK1
  2883 ;;      Params:         0       3       0
  2884 ;;      Locals:         0       0       0
  2885 ;;      Temps:          0       0       0
  2886 ;;      Totals:         0       3       0
  2887 ;;Total ram usage:        3 bytes
  2888 ;; Hardware stack levels used:    1
  2889 ;; Hardware stack levels required when called:    4
  2890 ;; This function calls:
  2891 ;;		___ftpack
  2892 ;; This function is called by:
  2893 ;;		_ADC_Sample
  2894 ;;		_ADC_read
  2895 ;; This function uses a non-reentrant model
  2896 ;;
  2897                           
  2898                           
  2899                           ;psect for function ___lwtoft
  2900  07B1                     ___lwtoft:	
  2901                           
  2902                           ;incstack = 0
  2903                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  2904  07B1  0828               	movf	___lwtoft@c,w
  2905  07B2  00A0               	movwf	___ftpack@arg
  2906  07B3  0829               	movf	___lwtoft@c+1,w
  2907  07B4  00A1               	movwf	___ftpack@arg+1
  2908  07B5  308E               	movlw	142
  2909  07B6  01A2               	clrf	___ftpack@arg+2
  2910  07B7  00A3               	movwf	___ftpack@exp
  2911  07B8  01A4               	clrf	___ftpack@sign
  2912  07B9  258E               	fcall	___ftpack
  2913  07BA  0820               	movf	?___ftpack,w
  2914  07BB  00A8               	movwf	?___lwtoft
  2915  07BC  0821               	movf	?___ftpack+1,w
  2916  07BD  00A9               	movwf	?___lwtoft+1
  2917  07BE  0822               	movf	?___ftpack+2,w
  2918  07BF  00AA               	movwf	?___lwtoft+2
  2919  07C0  0008               	return
  2920  07C1                     __end_of___lwtoft:	
  2921                           
  2922                           	psect	text14
  2923  04EB                     __ptext14:	
  2924 ;; *************** function ___fttol *****************
  2925 ;; Defined at:
  2926 ;;		line 44 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\fttol.c"
  2927 ;; Parameters:    Size  Location     Type
  2928 ;;  f1              3   53[BANK0 ] float 
  2929 ;; Auto vars:     Size  Location     Type
  2930 ;;  lval            4   61[BANK0 ] unsigned long 
  2931 ;;  exp1            1   65[BANK0 ] unsigned char 
  2932 ;;  sign1           1   60[BANK0 ] unsigned char 
  2933 ;; Return value:  Size  Location     Type
  2934 ;;                  4   53[BANK0 ] long 
  2935 ;; Registers used:
  2936 ;;		wreg, status,2, status,0
  2937 ;; Tracked objects:
  2938 ;;		On entry : 100/0
  2939 ;;		On exit  : 100/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMMON   BANK0   BANK1
  2942 ;;      Params:         0       4       0
  2943 ;;      Locals:         0       6       0
  2944 ;;      Temps:          0       3       0
  2945 ;;      Totals:         0      13       0
  2946 ;;Total ram usage:       13 bytes
  2947 ;; Hardware stack levels used:    1
  2948 ;; Hardware stack levels required when called:    3
  2949 ;; This function calls:
  2950 ;;		Nothing
  2951 ;; This function is called by:
  2952 ;;		_ADC_Sample
  2953 ;;		_ADC_read
  2954 ;; This function uses a non-reentrant model
  2955 ;;
  2956                           
  2957                           
  2958                           ;psect for function ___fttol
  2959  04EB                     ___fttol:	
  2960                           
  2961                           ;incstack = 0
  2962                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2963  04EB  2542               	fcall	PL20	;call to abstracted procedure
  2964  04EC  1003               	clrc
  2965  04ED  0D5A               	rlf	??___fttol+1,w
  2966  04EE  0D5B               	rlf	??___fttol+2,w
  2967  04EF  00E1               	movwf	___fttol@exp1
  2968  04F0  0861               	movf	___fttol@exp1,w
  2969  04F1  1D03               	btfss	3,2
  2970  04F2  2CF8               	goto	l2898
  2971  04F3                     l2896:	
  2972  04F3  01D5               	clrf	?___fttol
  2973  04F4  01D6               	clrf	?___fttol+1
  2974  04F5  01D7               	clrf	?___fttol+2
  2975  04F6  01D8               	clrf	?___fttol+3
  2976  04F7  0008               	return
  2977  04F8                     l2898:	
  2978  04F8  2542               	fcall	PL20	;call to abstracted procedure
  2979  04F9  3017               	movlw	23
  2980  04FA                     u1755:	
  2981  04FA  1003               	clrc
  2982  04FB  0CDB               	rrf	??___fttol+2,f
  2983  04FC  0CDA               	rrf	??___fttol+1,f
  2984  04FD  0CD9               	rrf	??___fttol,f
  2985  04FE  3EFF               	addlw	-1
  2986  04FF  1D03               	skipz
  2987  0500  2CFA               	goto	u1755
  2988  0501  0859               	movf	??___fttol,w
  2989  0502  00DC               	movwf	___fttol@sign1
  2990  0503  17D6               	bsf	___fttol@f1+1,7
  2991  0504  01D7               	clrf	___fttol@f1+2
  2992  0505  0855               	movf	___fttol@f1,w
  2993  0506  00DD               	movwf	___fttol@lval
  2994  0507  0856               	movf	___fttol@f1+1,w
  2995  0508  00DE               	movwf	___fttol@lval+1
  2996  0509  0857               	movf	___fttol@f1+2,w
  2997  050A  00DF               	movwf	___fttol@lval+2
  2998  050B  308E               	movlw	142
  2999  050C  01E0               	clrf	___fttol@lval+3
  3000  050D  02E1               	subwf	___fttol@exp1,f
  3001  050E  1FE1               	btfss	___fttol@exp1,7
  3002  050F  2D1D               	goto	l2918
  3003  0510  0861               	movf	___fttol@exp1,w
  3004  0511  3A80               	xorlw	128
  3005  0512  3E8F               	addlw	143
  3006  0513  1C03               	btfss	3,0
  3007  0514  2CF3               	goto	l2896
  3008  0515                     l2914:	
  3009  0515  1003               	clrc
  3010  0516  0CE0               	rrf	___fttol@lval+3,f
  3011  0517  0CDF               	rrf	___fttol@lval+2,f
  3012  0518  0CDE               	rrf	___fttol@lval+1,f
  3013  0519  0CDD               	rrf	___fttol@lval,f
  3014  051A  0FE1               	incfsz	___fttol@exp1,f
  3015  051B  2D15               	goto	l2914
  3016  051C  2D2B               	goto	l2926
  3017  051D                     l2918:	
  3018  051D  3018               	movlw	24
  3019  051E  0261               	subwf	___fttol@exp1,w
  3020  051F  1803               	btfsc	3,0
  3021  0520  2CF3               	goto	l2896
  3022  0521                     l2924:	
  3023  0521  0861               	movf	___fttol@exp1,w
  3024  0522  1903               	btfsc	3,2
  3025  0523  2D2B               	goto	l2926
  3026  0524  1003               	clrc
  3027  0525  0DDD               	rlf	___fttol@lval,f
  3028  0526  0DDE               	rlf	___fttol@lval+1,f
  3029  0527  0DDF               	rlf	___fttol@lval+2,f
  3030  0528  0DE0               	rlf	___fttol@lval+3,f
  3031  0529  03E1               	decf	___fttol@exp1,f
  3032  052A  2D21               	goto	l2924
  3033  052B                     l2926:	
  3034  052B  085C               	movf	___fttol@sign1,w
  3035  052C  1903               	btfsc	3,2
  3036  052D  2D39               	goto	l2930
  3037  052E  09DD               	comf	___fttol@lval,f
  3038  052F  09DE               	comf	___fttol@lval+1,f
  3039  0530  09DF               	comf	___fttol@lval+2,f
  3040  0531  09E0               	comf	___fttol@lval+3,f
  3041  0532  0ADD               	incf	___fttol@lval,f
  3042  0533  1903               	skipnz
  3043  0534  0ADE               	incf	___fttol@lval+1,f
  3044  0535  1903               	skipnz
  3045  0536  0ADF               	incf	___fttol@lval+2,f
  3046  0537  1903               	skipnz
  3047  0538  0AE0               	incf	___fttol@lval+3,f
  3048  0539                     l2930:	
  3049  0539  0860               	movf	___fttol@lval+3,w
  3050  053A  00D8               	movwf	?___fttol+3
  3051  053B  085F               	movf	___fttol@lval+2,w
  3052  053C  00D7               	movwf	?___fttol+2
  3053  053D  085E               	movf	___fttol@lval+1,w
  3054  053E  00D6               	movwf	?___fttol+1
  3055  053F  085D               	movf	___fttol@lval,w
  3056  0540  00D5               	movwf	?___fttol
  3057  0541  0008               	return
  3058  0542                     __end_of___fttol:	
  3059  0542                     PL20:	
  3060  0542  0855               	movf	___fttol@f1,w
  3061  0543  00D9               	movwf	??___fttol
  3062  0544  0856               	movf	___fttol@f1+1,w
  3063  0545  00DA               	movwf	??___fttol+1
  3064  0546  0857               	movf	___fttol@f1+2,w
  3065  0547  00DB               	movwf	??___fttol+2
  3066  0548  0008               	return
  3067  0549                     __end_ofPL20:	
  3068                           
  3069                           	psect	text15
  3070  03AC                     __ptext15:	
  3071 ;; *************** function ___ftmul *****************
  3072 ;; Defined at:
  3073 ;;		line 62 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\ftmul.c"
  3074 ;; Parameters:    Size  Location     Type
  3075 ;;  f1              3   11[BANK0 ] float 
  3076 ;;  f2              3   14[BANK0 ] float 
  3077 ;; Auto vars:     Size  Location     Type
  3078 ;;  f3_as_produc    3   21[BANK0 ] unsigned um
  3079 ;;  sign            1   25[BANK0 ] unsigned char 
  3080 ;;  cntr            1   24[BANK0 ] unsigned char 
  3081 ;;  exp             1   20[BANK0 ] unsigned char 
  3082 ;; Return value:  Size  Location     Type
  3083 ;;                  3   11[BANK0 ] float 
  3084 ;; Registers used:
  3085 ;;		wreg, status,2, status,0, pclath, cstack
  3086 ;; Tracked objects:
  3087 ;;		On entry : 100/0
  3088 ;;		On exit  : 100/0
  3089 ;;		Unchanged: 0/0
  3090 ;; Data sizes:     COMMON   BANK0   BANK1
  3091 ;;      Params:         0       6       0
  3092 ;;      Locals:         0       6       0
  3093 ;;      Temps:          0       3       0
  3094 ;;      Totals:         0      15       0
  3095 ;;Total ram usage:       15 bytes
  3096 ;; Hardware stack levels used:    1
  3097 ;; Hardware stack levels required when called:    4
  3098 ;; This function calls:
  3099 ;;		___ftpack
  3100 ;; This function is called by:
  3101 ;;		_ADC_Sample
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           
  3106                           ;psect for function ___ftmul
  3107  03AC                     ___ftmul:	
  3108                           
  3109                           ;incstack = 0
  3110                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  3111  03AC  082B               	movf	___ftmul@f1,w
  3112  03AD  00B1               	movwf	??___ftmul
  3113  03AE  082C               	movf	___ftmul@f1+1,w
  3114  03AF  00B2               	movwf	??___ftmul+1
  3115  03B0  082D               	movf	___ftmul@f1+2,w
  3116  03B1  00B3               	movwf	??___ftmul+2
  3117  03B2  1003               	clrc
  3118  03B3  0D32               	rlf	??___ftmul+1,w
  3119  03B4  0D33               	rlf	??___ftmul+2,w
  3120  03B5  00B4               	movwf	___ftmul@exp
  3121  03B6  0834               	movf	___ftmul@exp,w
  3122  03B7  1D03               	btfss	3,2
  3123  03B8  2BBA               	goto	l2846
  3124  03B9  2C18               	ljmp	PL34	;call to abstracted procedure
  3125  03BA                     l2846:	
  3126  03BA  082E               	movf	___ftmul@f2,w
  3127  03BB  00B1               	movwf	??___ftmul
  3128  03BC  082F               	movf	___ftmul@f2+1,w
  3129  03BD  00B2               	movwf	??___ftmul+1
  3130  03BE  0830               	movf	___ftmul@f2+2,w
  3131  03BF  00B3               	movwf	??___ftmul+2
  3132  03C0  1003               	clrc
  3133  03C1  0D32               	rlf	??___ftmul+1,w
  3134  03C2  0D33               	rlf	??___ftmul+2,w
  3135  03C3  00B9               	movwf	___ftmul@sign
  3136  03C4  0839               	movf	___ftmul@sign,w
  3137  03C5  1D03               	btfss	3,2
  3138  03C6  2BC8               	goto	l2850
  3139  03C7  2C18               	ljmp	PL34	;call to abstracted procedure
  3140  03C8                     l2850:	
  3141  03C8  0839               	movf	___ftmul@sign,w
  3142  03C9  3E7B               	addlw	123
  3143  03CA  07B4               	addwf	___ftmul@exp,f
  3144  03CB  082D               	movf	___ftmul@f1+2,w
  3145  03CC  00B9               	movwf	___ftmul@sign
  3146  03CD  0830               	movf	___ftmul@f2+2,w
  3147  03CE  06B9               	xorwf	___ftmul@sign,f
  3148  03CF  3080               	movlw	128
  3149  03D0  05B9               	andwf	___ftmul@sign,f
  3150  03D1  3007               	movlw	7
  3151  03D2  17AC               	bsf	___ftmul@f1+1,7
  3152  03D3  17AF               	bsf	___ftmul@f2+1,7
  3153  03D4  01B0               	clrf	___ftmul@f2+2
  3154  03D5  01B5               	clrf	___ftmul@f3_as_product
  3155  03D6  01B6               	clrf	___ftmul@f3_as_product+1
  3156  03D7  01B7               	clrf	___ftmul@f3_as_product+2
  3157  03D8  00B8               	movwf	___ftmul@cntr
  3158  03D9                     l2868:	
  3159  03D9  1C2B               	btfss	___ftmul@f1,0
  3160  03DA  2BE0               	goto	l2872
  3161  03DB  2407               	fcall	PL6	;call to abstracted procedure
  3162  03DC  1803               	skipnc
  3163  03DD  0A30               	incf	___ftmul@f2+2,w
  3164  03DE  1D03               	btfss	3,2
  3165  03DF  07B7               	addwf	___ftmul@f3_as_product+2,f
  3166  03E0                     l2872:	
  3167  03E0  2412               	fcall	PL28	;call to abstracted procedure
  3168  03E1  0DAE               	rlf	___ftmul@f2,f
  3169  03E2  0DAF               	rlf	___ftmul@f2+1,f
  3170  03E3  0DB0               	rlf	___ftmul@f2+2,f
  3171  03E4  0BB8               	decfsz	___ftmul@cntr,f
  3172  03E5  2BD9               	goto	l2868
  3173  03E6  3009               	movlw	9
  3174  03E7  00B8               	movwf	___ftmul@cntr
  3175  03E8                     l2880:	
  3176  03E8  1C2B               	btfss	___ftmul@f1,0
  3177  03E9  2BEF               	goto	l2884
  3178  03EA  2407               	fcall	PL6	;call to abstracted procedure
  3179  03EB  1803               	skipnc
  3180  03EC  0A30               	incf	___ftmul@f2+2,w
  3181  03ED  1D03               	btfss	3,2
  3182  03EE  07B7               	addwf	___ftmul@f3_as_product+2,f
  3183  03EF                     l2884:	
  3184  03EF  2412               	fcall	PL28	;call to abstracted procedure
  3185  03F0  0CB7               	rrf	___ftmul@f3_as_product+2,f
  3186  03F1  0CB6               	rrf	___ftmul@f3_as_product+1,f
  3187  03F2  0CB5               	rrf	___ftmul@f3_as_product,f
  3188  03F3  0BB8               	decfsz	___ftmul@cntr,f
  3189  03F4  2BE8               	goto	l2880
  3190  03F5  0835               	movf	___ftmul@f3_as_product,w
  3191  03F6  00A0               	movwf	___ftpack@arg
  3192  03F7  0836               	movf	___ftmul@f3_as_product+1,w
  3193  03F8  00A1               	movwf	___ftpack@arg+1
  3194  03F9  0837               	movf	___ftmul@f3_as_product+2,w
  3195  03FA  00A2               	movwf	___ftpack@arg+2
  3196  03FB  0834               	movf	___ftmul@exp,w
  3197  03FC  00A3               	movwf	___ftpack@exp
  3198  03FD  0839               	movf	___ftmul@sign,w
  3199  03FE  00A4               	movwf	___ftpack@sign
  3200  03FF  258E               	fcall	___ftpack
  3201  0400  0820               	movf	?___ftpack,w
  3202  0401  00AB               	movwf	?___ftmul
  3203  0402  0821               	movf	?___ftpack+1,w
  3204  0403  00AC               	movwf	?___ftmul+1
  3205  0404  0822               	movf	?___ftpack+2,w
  3206  0405  00AD               	movwf	?___ftmul+2
  3207  0406  0008               	return
  3208  0407                     __end_of___ftmul:	
  3209  0407                     PL6:	
  3210  0407  082E               	movf	___ftmul@f2,w
  3211  0408  07B5               	addwf	___ftmul@f3_as_product,f
  3212  0409  082F               	movf	___ftmul@f2+1,w
  3213  040A  1103               	clrz
  3214  040B  1803               	skipnc
  3215  040C  0A2F               	incf	___ftmul@f2+1,w
  3216  040D  1D03               	btfss	3,2
  3217  040E  07B6               	addwf	___ftmul@f3_as_product+1,f
  3218  040F  0830               	movf	___ftmul@f2+2,w
  3219  0410  1103               	clrz
  3220  0411  0008               	return
  3221  0412                     __end_ofPL6:	
  3222  0412                     PL28:	
  3223  0412  1003               	clrc
  3224  0413  0CAD               	rrf	___ftmul@f1+2,f
  3225  0414  0CAC               	rrf	___ftmul@f1+1,f
  3226  0415  0CAB               	rrf	___ftmul@f1,f
  3227  0416  1003               	clrc
  3228  0417  0008               	return
  3229  0418                     __end_ofPL28:	
  3230  0418                     PL34:	
  3231  0418  01AB               	clrf	?___ftmul
  3232  0419  01AC               	clrf	?___ftmul+1
  3233  041A  01AD               	clrf	?___ftmul+2
  3234  041B  0008               	return
  3235  041C                     __end_ofPL34:	
  3236                           
  3237                           	psect	text16
  3238  0277                     __ptext16:	
  3239 ;; *************** function ___ftadd *****************
  3240 ;; Defined at:
  3241 ;;		line 86 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\ftadd.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;  f1              3   26[BANK0 ] float 
  3244 ;;  f2              3   29[BANK0 ] float 
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;  exp1            1   37[BANK0 ] unsigned char 
  3247 ;;  exp2            1   36[BANK0 ] unsigned char 
  3248 ;;  sign            1   35[BANK0 ] unsigned char 
  3249 ;; Return value:  Size  Location     Type
  3250 ;;                  3   26[BANK0 ] float 
  3251 ;; Registers used:
  3252 ;;		wreg, status,2, status,0, pclath, cstack
  3253 ;; Tracked objects:
  3254 ;;		On entry : 100/0
  3255 ;;		On exit  : 100/0
  3256 ;;		Unchanged: 0/0
  3257 ;; Data sizes:     COMMON   BANK0   BANK1
  3258 ;;      Params:         0       6       0
  3259 ;;      Locals:         0       3       0
  3260 ;;      Temps:          0       3       0
  3261 ;;      Totals:         0      12       0
  3262 ;;Total ram usage:       12 bytes
  3263 ;; Hardware stack levels used:    1
  3264 ;; Hardware stack levels required when called:    4
  3265 ;; This function calls:
  3266 ;;		___ftpack
  3267 ;; This function is called by:
  3268 ;;		_ADC_Sample
  3269 ;;		_ADC_read
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           
  3274                           ;psect for function ___ftadd
  3275  0277                     ___ftadd:	
  3276                           
  3277                           ;incstack = 0
  3278                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  3279  0277  083A               	movf	___ftadd@f1,w
  3280  0278  00C0               	movwf	??___ftadd
  3281  0279  083B               	movf	___ftadd@f1+1,w
  3282  027A  00C1               	movwf	??___ftadd+1
  3283  027B  083C               	movf	___ftadd@f1+2,w
  3284  027C  00C2               	movwf	??___ftadd+2
  3285  027D  1003               	clrc
  3286  027E  0D41               	rlf	??___ftadd+1,w
  3287  027F  0D42               	rlf	??___ftadd+2,w
  3288  0280  00C5               	movwf	___ftadd@exp1
  3289  0281  083D               	movf	___ftadd@f2,w
  3290  0282  00C0               	movwf	??___ftadd
  3291  0283  083E               	movf	___ftadd@f2+1,w
  3292  0284  00C1               	movwf	??___ftadd+1
  3293  0285  083F               	movf	___ftadd@f2+2,w
  3294  0286  00C2               	movwf	??___ftadd+2
  3295  0287  1003               	clrc
  3296  0288  0D41               	rlf	??___ftadd+1,w
  3297  0289  0D42               	rlf	??___ftadd+2,w
  3298  028A  00C4               	movwf	___ftadd@exp2
  3299  028B  0845               	movf	___ftadd@exp1,w
  3300  028C  1903               	btfsc	3,2
  3301  028D  2A9A               	goto	l2772
  3302  028E  0844               	movf	___ftadd@exp2,w
  3303  028F  0245               	subwf	___ftadd@exp1,w
  3304  0290  0844               	movf	___ftadd@exp2,w
  3305  0291  1803               	skipnc
  3306  0292  2AA2               	goto	L8
  3307  0293  00C0               	movwf	??___ftadd
  3308  0294  0845               	movf	___ftadd@exp1,w
  3309  0295  02C0               	subwf	??___ftadd,f
  3310  0296  3019               	movlw	25
  3311  0297  0240               	subwf	??___ftadd,w
  3312  0298  1C03               	skipc
  3313  0299  2AA1               	goto	l2776
  3314  029A                     l2772:	
  3315  029A  083D               	movf	___ftadd@f2,w
  3316  029B  00BA               	movwf	?___ftadd
  3317  029C  083E               	movf	___ftadd@f2+1,w
  3318  029D  00BB               	movwf	?___ftadd+1
  3319  029E  083F               	movf	___ftadd@f2+2,w
  3320  029F  00BC               	movwf	?___ftadd+2
  3321  02A0  0008               	return
  3322  02A1                     l2776:	
  3323  02A1  0844               	movf	___ftadd@exp2,w
  3324  02A2                     L8:	
  3325  02A2  1903               	btfsc	3,2
  3326  02A3  0008               	return
  3327  02A4  0845               	movf	___ftadd@exp1,w
  3328  02A5  0244               	subwf	___ftadd@exp2,w
  3329  02A6  1803               	skipnc
  3330  02A7  2AB0               	goto	l2782
  3331  02A8  0845               	movf	___ftadd@exp1,w
  3332  02A9  00C0               	movwf	??___ftadd
  3333  02AA  0844               	movf	___ftadd@exp2,w
  3334  02AB  02C0               	subwf	??___ftadd,f
  3335  02AC  3019               	movlw	25
  3336  02AD  0240               	subwf	??___ftadd,w
  3337  02AE  1803               	btfsc	3,0
  3338  02AF  0008               	return
  3339  02B0                     l2782:	
  3340  02B0  3006               	movlw	6
  3341  02B1  00C3               	movwf	___ftadd@sign
  3342  02B2  1BBC               	btfsc	___ftadd@f1+2,7
  3343  02B3  17C3               	bsf	___ftadd@sign,7
  3344  02B4  1BBF               	btfsc	___ftadd@f2+2,7
  3345  02B5  1743               	bsf	___ftadd@sign,6
  3346  02B6  17BB               	bsf	___ftadd@f1+1,7
  3347  02B7  01BC               	clrf	___ftadd@f1+2
  3348  02B8  17BE               	bsf	___ftadd@f2+1,7
  3349  02B9  01BF               	clrf	___ftadd@f2+2
  3350  02BA  0844               	movf	___ftadd@exp2,w
  3351  02BB  0245               	subwf	___ftadd@exp1,w
  3352  02BC  1803               	skipnc
  3353  02BD  2AD7               	goto	l2804
  3354  02BE                     l2794:	
  3355  02BE  1003               	clrc
  3356  02BF  0DBD               	rlf	___ftadd@f2,f
  3357  02C0  0DBE               	rlf	___ftadd@f2+1,f
  3358  02C1  0DBF               	rlf	___ftadd@f2+2,f
  3359  02C2  03C4               	decf	___ftadd@exp2,f
  3360  02C3  0844               	movf	___ftadd@exp2,w
  3361  02C4  0645               	xorwf	___ftadd@exp1,w
  3362  02C5  1903               	skipnz
  3363  02C6  2AD2               	goto	l2802
  3364  02C7  03C3               	decf	___ftadd@sign,f
  3365  02C8  0843               	movf	___ftadd@sign,w
  3366  02C9  3907               	andlw	7
  3367  02CA  1903               	btfsc	3,2
  3368  02CB  2AD2               	goto	l2802
  3369  02CC  2ABE               	goto	l2794
  3370  02CD                     l2800:	
  3371  02CD  1003               	clrc
  3372  02CE  0CBC               	rrf	___ftadd@f1+2,f
  3373  02CF  0CBB               	rrf	___ftadd@f1+1,f
  3374  02D0  0CBA               	rrf	___ftadd@f1,f
  3375  02D1  0AC5               	incf	___ftadd@exp1,f
  3376  02D2                     l2802:	
  3377  02D2  0845               	movf	___ftadd@exp1,w
  3378  02D3  0644               	xorwf	___ftadd@exp2,w
  3379  02D4  1903               	btfsc	3,2
  3380  02D5  2AF3               	goto	l1614
  3381  02D6  2ACD               	goto	l2800
  3382  02D7                     l2804:	
  3383  02D7  0845               	movf	___ftadd@exp1,w
  3384  02D8  0244               	subwf	___ftadd@exp2,w
  3385  02D9  1803               	skipnc
  3386  02DA  2AF3               	goto	l1614
  3387  02DB                     l2806:	
  3388  02DB  1003               	clrc
  3389  02DC  0DBA               	rlf	___ftadd@f1,f
  3390  02DD  0DBB               	rlf	___ftadd@f1+1,f
  3391  02DE  0DBC               	rlf	___ftadd@f1+2,f
  3392  02DF  03C5               	decf	___ftadd@exp1,f
  3393  02E0  0844               	movf	___ftadd@exp2,w
  3394  02E1  0645               	xorwf	___ftadd@exp1,w
  3395  02E2  1903               	skipnz
  3396  02E3  2AEF               	goto	l2814
  3397  02E4  03C3               	decf	___ftadd@sign,f
  3398  02E5  0843               	movf	___ftadd@sign,w
  3399  02E6  3907               	andlw	7
  3400  02E7  1903               	btfsc	3,2
  3401  02E8  2AEF               	goto	l2814
  3402  02E9  2ADB               	goto	l2806
  3403  02EA                     l2812:	
  3404  02EA  1003               	clrc
  3405  02EB  0CBF               	rrf	___ftadd@f2+2,f
  3406  02EC  0CBE               	rrf	___ftadd@f2+1,f
  3407  02ED  0CBD               	rrf	___ftadd@f2,f
  3408  02EE  0AC4               	incf	___ftadd@exp2,f
  3409  02EF                     l2814:	
  3410  02EF  0845               	movf	___ftadd@exp1,w
  3411  02F0  0644               	xorwf	___ftadd@exp2,w
  3412  02F1  1D03               	skipz
  3413  02F2  2AEA               	goto	l2812
  3414  02F3                     l1614:	
  3415  02F3  1FC3               	btfss	___ftadd@sign,7
  3416  02F4  2AFE               	goto	l2820
  3417  02F5  30FF               	movlw	255
  3418  02F6  06BA               	xorwf	___ftadd@f1,f
  3419  02F7  06BB               	xorwf	___ftadd@f1+1,f
  3420  02F8  06BC               	xorwf	___ftadd@f1+2,f
  3421  02F9  0ABA               	incf	___ftadd@f1,f
  3422  02FA  1903               	skipnz
  3423  02FB  0ABB               	incf	___ftadd@f1+1,f
  3424  02FC  1903               	skipnz
  3425  02FD  0ABC               	incf	___ftadd@f1+2,f
  3426  02FE                     l2820:	
  3427  02FE  1F43               	btfss	___ftadd@sign,6
  3428  02FF  2B05               	goto	l2826
  3429  0300  232F               	fcall	PL26	;call to abstracted procedure
  3430  0301  1903               	skipnz
  3431  0302  0ABE               	incf	___ftadd@f2+1,f
  3432  0303  1903               	skipnz
  3433  0304  0ABF               	incf	___ftadd@f2+2,f
  3434  0305                     l2826:	
  3435  0305  01C3               	clrf	___ftadd@sign
  3436  0306  083A               	movf	___ftadd@f1,w
  3437  0307  07BD               	addwf	___ftadd@f2,f
  3438  0308  083B               	movf	___ftadd@f1+1,w
  3439  0309  1103               	clrz
  3440  030A  1803               	skipnc
  3441  030B  0A3B               	incf	___ftadd@f1+1,w
  3442  030C  1D03               	btfss	3,2
  3443  030D  07BE               	addwf	___ftadd@f2+1,f
  3444  030E  083C               	movf	___ftadd@f1+2,w
  3445  030F  1103               	clrz
  3446  0310  1803               	skipnc
  3447  0311  0A3C               	incf	___ftadd@f1+2,w
  3448  0312  1D03               	btfss	3,2
  3449  0313  07BF               	addwf	___ftadd@f2+2,f
  3450  0314  1FBF               	btfss	___ftadd@f2+2,7
  3451  0315  2B1D               	goto	l2838
  3452  0316  232F               	fcall	PL26	;call to abstracted procedure
  3453  0317  1903               	skipnz
  3454  0318  0ABE               	incf	___ftadd@f2+1,f
  3455  0319  1903               	skipnz
  3456  031A  0ABF               	incf	___ftadd@f2+2,f
  3457  031B  01C3               	clrf	___ftadd@sign
  3458  031C  0AC3               	incf	___ftadd@sign,f
  3459  031D                     l2838:	
  3460  031D  083D               	movf	___ftadd@f2,w
  3461  031E  00A0               	movwf	___ftpack@arg
  3462  031F  083E               	movf	___ftadd@f2+1,w
  3463  0320  00A1               	movwf	___ftpack@arg+1
  3464  0321  083F               	movf	___ftadd@f2+2,w
  3465  0322  00A2               	movwf	___ftpack@arg+2
  3466  0323  0845               	movf	___ftadd@exp1,w
  3467  0324  00A3               	movwf	___ftpack@exp
  3468  0325  0843               	movf	___ftadd@sign,w
  3469  0326  00A4               	movwf	___ftpack@sign
  3470  0327  258E               	fcall	___ftpack
  3471  0328  0820               	movf	?___ftpack,w
  3472  0329  00BA               	movwf	?___ftadd
  3473  032A  0821               	movf	?___ftpack+1,w
  3474  032B  00BB               	movwf	?___ftadd+1
  3475  032C  0822               	movf	?___ftpack+2,w
  3476  032D  00BC               	movwf	?___ftadd+2
  3477  032E  0008               	return
  3478  032F                     __end_of___ftadd:	
  3479  032F                     PL26:	
  3480  032F  30FF               	movlw	255
  3481  0330  06BD               	xorwf	___ftadd@f2,f
  3482  0331  06BE               	xorwf	___ftadd@f2+1,f
  3483  0332  06BF               	xorwf	___ftadd@f2+2,f
  3484  0333  0ABD               	incf	___ftadd@f2,f
  3485  0334  0008               	return
  3486  0335                     __end_ofPL26:	
  3487                           
  3488                           	psect	text17
  3489  058E                     __ptext17:	
  3490 ;; *************** function ___ftpack *****************
  3491 ;; Defined at:
  3492 ;;		line 62 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\float.c"
  3493 ;; Parameters:    Size  Location     Type
  3494 ;;  arg             3    0[BANK0 ] unsigned um
  3495 ;;  exp             1    3[BANK0 ] unsigned char 
  3496 ;;  sign            1    4[BANK0 ] unsigned char 
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;		None
  3499 ;; Return value:  Size  Location     Type
  3500 ;;                  3    0[BANK0 ] float 
  3501 ;; Registers used:
  3502 ;;		wreg, status,2, status,0
  3503 ;; Tracked objects:
  3504 ;;		On entry : 100/0
  3505 ;;		On exit  : 100/0
  3506 ;;		Unchanged: 0/0
  3507 ;; Data sizes:     COMMON   BANK0   BANK1
  3508 ;;      Params:         0       5       0
  3509 ;;      Locals:         0       0       0
  3510 ;;      Temps:          0       3       0
  3511 ;;      Totals:         0       8       0
  3512 ;;Total ram usage:        8 bytes
  3513 ;; Hardware stack levels used:    1
  3514 ;; Hardware stack levels required when called:    3
  3515 ;; This function calls:
  3516 ;;		Nothing
  3517 ;; This function is called by:
  3518 ;;		___ftadd
  3519 ;;		___ftdiv
  3520 ;;		___ftmul
  3521 ;;		___lwtoft
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           
  3526                           ;psect for function ___ftpack
  3527  058E                     ___ftpack:	
  3528                           
  3529                           ;incstack = 0
  3530                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  3531  058E  0823               	movf	___ftpack@exp,w
  3532  058F  1903               	btfsc	3,2
  3533  0590  2D96               	goto	l1578
  3534  0591  0822               	movf	___ftpack@arg+2,w
  3535  0592  0421               	iorwf	___ftpack@arg+1,w
  3536  0593  0420               	iorwf	___ftpack@arg,w
  3537  0594  1D03               	skipz
  3538  0595  2D9C               	goto	l2688
  3539  0596                     l1578:	
  3540  0596  01A0               	clrf	?___ftpack
  3541  0597  01A1               	clrf	?___ftpack+1
  3542  0598  01A2               	clrf	?___ftpack+2
  3543  0599  0008               	return
  3544  059A                     l2686:	
  3545  059A  0AA3               	incf	___ftpack@exp,f
  3546  059B  25CA               	fcall	PL38	;call to abstracted procedure
  3547  059C                     l2688:	
  3548  059C  30FE               	movlw	254
  3549  059D  0522               	andwf	___ftpack@arg+2,w
  3550  059E  1903               	btfsc	3,2
  3551  059F  2DA8               	goto	l2692
  3552  05A0  2D9A               	goto	l2686
  3553  05A1                     l2690:	
  3554  05A1  0AA3               	incf	___ftpack@exp,f
  3555  05A2  0AA0               	incf	___ftpack@arg,f
  3556  05A3  1903               	skipnz
  3557  05A4  0AA1               	incf	___ftpack@arg+1,f
  3558  05A5  1903               	skipnz
  3559  05A6  0AA2               	incf	___ftpack@arg+2,f
  3560  05A7  25CA               	fcall	PL38	;call to abstracted procedure
  3561  05A8                     l2692:	
  3562  05A8  30FF               	movlw	255
  3563  05A9  0522               	andwf	___ftpack@arg+2,w
  3564  05AA  1903               	btfsc	3,2
  3565  05AB  2DB6               	goto	l2696
  3566  05AC  2DA1               	goto	l2690
  3567  05AD                     l2698:	
  3568  05AD  3002               	movlw	2
  3569  05AE  0223               	subwf	___ftpack@exp,w
  3570  05AF  1C03               	btfss	3,0
  3571  05B0  2DB8               	goto	l1590
  3572  05B1  03A3               	decf	___ftpack@exp,f
  3573  05B2  1003               	clrc
  3574  05B3  0DA0               	rlf	___ftpack@arg,f
  3575  05B4  0DA1               	rlf	___ftpack@arg+1,f
  3576  05B5  0DA2               	rlf	___ftpack@arg+2,f
  3577  05B6                     l2696:	
  3578  05B6  1FA1               	btfss	___ftpack@arg+1,7
  3579  05B7  2DAD               	goto	l2698
  3580  05B8                     l1590:	
  3581  05B8  1C23               	btfss	___ftpack@exp,0
  3582  05B9  13A1               	bcf	___ftpack@arg+1,7
  3583  05BA  1003               	clrc
  3584  05BB  0CA3               	rrf	___ftpack@exp,f
  3585  05BC  0823               	movf	___ftpack@exp,w
  3586  05BD  00A7               	movwf	??___ftpack+2
  3587  05BE  01A6               	clrf	??___ftpack+1
  3588  05BF  01A5               	clrf	??___ftpack
  3589  05C0  0825               	movf	??___ftpack,w
  3590  05C1  04A0               	iorwf	___ftpack@arg,f
  3591  05C2  0826               	movf	??___ftpack+1,w
  3592  05C3  04A1               	iorwf	___ftpack@arg+1,f
  3593  05C4  0827               	movf	??___ftpack+2,w
  3594  05C5  04A2               	iorwf	___ftpack@arg+2,f
  3595  05C6  0824               	movf	___ftpack@sign,w
  3596  05C7  1D03               	btfss	3,2
  3597  05C8  17A2               	bsf	___ftpack@arg+2,7
  3598  05C9  0008               	return
  3599  05CA                     __end_of___ftpack:	
  3600  05CA                     PL38:	
  3601  05CA  1003               	clrc
  3602  05CB  0CA2               	rrf	___ftpack@arg+2,f
  3603  05CC  0CA1               	rrf	___ftpack@arg+1,f
  3604  05CD  0CA0               	rrf	___ftpack@arg,f
  3605  05CE  0008               	return
  3606  05CF                     __end_ofPL38:	
  3607                           
  3608                           	psect	text18
  3609  0335                     __ptext18:	
  3610 ;; *************** function _Isr_Timer *****************
  3611 ;; Defined at:
  3612 ;;		line 390 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_Demo\SC8F072_Pwm_Demo.c"
  3613 ;; Parameters:    Size  Location     Type
  3614 ;;		None
  3615 ;; Auto vars:     Size  Location     Type
  3616 ;;		None
  3617 ;; Return value:  Size  Location     Type
  3618 ;;                  1    wreg      void 
  3619 ;; Registers used:
  3620 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3621 ;; Tracked objects:
  3622 ;;		On entry : 0/0
  3623 ;;		On exit  : 0/0
  3624 ;;		Unchanged: 0/0
  3625 ;; Data sizes:     COMMON   BANK0   BANK1
  3626 ;;      Params:         0       0       0
  3627 ;;      Locals:         0       0       0
  3628 ;;      Temps:          3       0       0
  3629 ;;      Totals:         3       0       0
  3630 ;;Total ram usage:        3 bytes
  3631 ;; Hardware stack levels used:    1
  3632 ;; Hardware stack levels required when called:    2
  3633 ;; This function calls:
  3634 ;;		_Charge_num
  3635 ;;		_Display
  3636 ;;		_Uncharge_num
  3637 ;; This function is called by:
  3638 ;;		Interrupt level 1
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642                           
  3643                           ;psect for function _Isr_Timer
  3644  0335                     _Isr_Timer:	
  3645                           
  3646                           ;SC8F072_Pwm_Demo.c: 392: if(RAIF)
  3647  0335  1283               	bcf	3,5	;RP0=0, select bank0
  3648  0336  1D8D               	btfss	13,3	;volatile
  3649  0337  2B41               	goto	i1l3450
  3650                           
  3651                           ;SC8F072_Pwm_Demo.c: 393: {
  3652                           ;SC8F072_Pwm_Demo.c: 394: T_flag=1;
  3653  0338  3001               	movlw	1
  3654  0339  1683               	bsf	3,5	;RP0=1, select bank1
  3655  033A  00AB               	movwf	_T_flag^(0+128)	;volatile
  3656                           
  3657                           ;SC8F072_Pwm_Demo.c: 395: if (!(PORTA & 0x20))
  3658  033B  1A86               	btfsc	6,5	;volatile
  3659  033C  2B3F               	goto	i1l3446
  3660                           
  3661                           ;SC8F072_Pwm_Demo.c: 396: {
  3662                           ;SC8F072_Pwm_Demo.c: 397: Charge_num();
  3663  033D  2675               	fcall	_Charge_num
  3664                           
  3665                           ;SC8F072_Pwm_Demo.c: 398: }
  3666  033E  2B40               	goto	i1l3448
  3667  033F                     i1l3446:	
  3668                           
  3669                           ;SC8F072_Pwm_Demo.c: 399: else
  3670                           ;SC8F072_Pwm_Demo.c: 400: {
  3671                           ;SC8F072_Pwm_Demo.c: 401: Uncharge_num();
  3672  033F  278E               	fcall	_Uncharge_num
  3673  0340                     i1l3448:	
  3674                           
  3675                           ;SC8F072_Pwm_Demo.c: 402: }
  3676                           ;SC8F072_Pwm_Demo.c: 403: RAIF = 0;
  3677  0340  118D               	bcf	13,3	;volatile
  3678  0341                     i1l3450:	
  3679                           
  3680                           ;SC8F072_Pwm_Demo.c: 404: }
  3681                           ;SC8F072_Pwm_Demo.c: 405: if(RBIF)
  3682  0341  1C0B               	btfss	11,0	;volatile
  3683  0342  2B63               	goto	i1l3468
  3684                           
  3685                           ;SC8F072_Pwm_Demo.c: 406: {
  3686                           ;SC8F072_Pwm_Demo.c: 411: if (PORTB & 0x20)
  3687  0343  1E86               	btfss	6,5	;volatile
  3688  0344  2B62               	goto	i1l3466
  3689                           
  3690                           ;SC8F072_Pwm_Demo.c: 412: {
  3691                           ;SC8F072_Pwm_Demo.c: 413: if (long_press_counter >= 1000)
  3692  0345  3003               	movlw	3
  3693  0346  1683               	bsf	3,5	;RP0=1, select bank1
  3694  0347  0223               	subwf	(_long_press_counter+1)^(0+128),w	;volatile
  3695  0348  30E8               	movlw	232
  3696  0349  1903               	skipnz
  3697  034A  0222               	subwf	_long_press_counter^(0+128),w	;volatile
  3698  034B  1C03               	skipc
  3699  034C  2B50               	goto	i1l3458
  3700                           
  3701                           ;SC8F072_Pwm_Demo.c: 414: {
  3702                           ;SC8F072_Pwm_Demo.c: 415: button_lflag = 1;
  3703  034D  3001               	movlw	1
  3704  034E  00AC               	movwf	_button_lflag^(0+128)	;volatile
  3705                           
  3706                           ;SC8F072_Pwm_Demo.c: 416: }
  3707  034F  2B60               	goto	i1l3464
  3708  0350                     i1l3458:	
  3709                           
  3710                           ;SC8F072_Pwm_Demo.c: 417: else if(long_press_counter<=1000 && long_press_counter>=50)
  3711  0350  3003               	movlw	3
  3712  0351  0223               	subwf	(_long_press_counter+1)^(0+128),w	;volatile
  3713  0352  30E9               	movlw	233
  3714  0353  1903               	skipnz
  3715  0354  0222               	subwf	_long_press_counter^(0+128),w	;volatile
  3716  0355  1803               	skipnc
  3717  0356  2B60               	goto	i1l3464
  3718  0357  3000               	movlw	0
  3719  0358  0223               	subwf	(_long_press_counter+1)^(0+128),w	;volatile
  3720  0359  3032               	movlw	50
  3721  035A  1903               	skipnz
  3722  035B  0222               	subwf	_long_press_counter^(0+128),w	;volatile
  3723  035C  1C03               	skipc
  3724  035D  2B60               	goto	i1l3464
  3725                           
  3726                           ;SC8F072_Pwm_Demo.c: 418: {
  3727                           ;SC8F072_Pwm_Demo.c: 419: button_sflag = 1;
  3728  035E  3001               	movlw	1
  3729  035F  00AD               	movwf	_button_sflag^(0+128)	;volatile
  3730  0360                     i1l3464:	
  3731                           
  3732                           ;SC8F072_Pwm_Demo.c: 420: }
  3733                           ;SC8F072_Pwm_Demo.c: 421: long_press_counter = 0;
  3734  0360  01A2               	clrf	_long_press_counter^(0+128)	;volatile
  3735  0361  01A3               	clrf	(_long_press_counter+1)^(0+128)	;volatile
  3736  0362                     i1l3466:	
  3737                           
  3738                           ;SC8F072_Pwm_Demo.c: 422: }
  3739                           ;SC8F072_Pwm_Demo.c: 423: RBIF = 0;
  3740  0362  100B               	bcf	11,0	;volatile
  3741  0363                     i1l3468:	
  3742                           
  3743                           ;SC8F072_Pwm_Demo.c: 424: }
  3744                           ;SC8F072_Pwm_Demo.c: 425: if(T0IF)
  3745  0363  1D0B               	btfss	11,2	;volatile
  3746  0364  2B7E               	goto	i1l3484
  3747                           
  3748                           ;SC8F072_Pwm_Demo.c: 426: {
  3749                           ;SC8F072_Pwm_Demo.c: 427: if(T_flag)
  3750  0365  1683               	bsf	3,5	;RP0=1, select bank1
  3751  0366  082B               	movf	_T_flag^(0+128),w	;volatile
  3752  0367  1903               	btfsc	3,2
  3753  0368  2B6A               	goto	i1l3474
  3754                           
  3755                           ;SC8F072_Pwm_Demo.c: 428: {
  3756                           ;SC8F072_Pwm_Demo.c: 429: Display();
  3757  0369  2697               	fcall	_Display
  3758  036A                     i1l3474:	
  3759                           
  3760                           ;SC8F072_Pwm_Demo.c: 430: }
  3761                           ;SC8F072_Pwm_Demo.c: 431: TMR0 += 6;
  3762  036A  3006               	movlw	6
  3763  036B  0781               	addwf	1,f	;volatile
  3764                           
  3765                           ;SC8F072_Pwm_Demo.c: 432: T0IF = 0;
  3766  036C  110B               	bcf	11,2	;volatile
  3767                           
  3768                           ;SC8F072_Pwm_Demo.c: 434: if(ADC_delay > 0)
  3769  036D  0826               	movf	_ADC_delay^(0+128),w	;volatile
  3770  036E  0427               	iorwf	(_ADC_delay+1)^(0+128),w	;volatile
  3771  036F  1903               	btfsc	3,2
  3772  0370  2B78               	goto	i1l3482
  3773                           
  3774                           ;SC8F072_Pwm_Demo.c: 435: {
  3775                           ;SC8F072_Pwm_Demo.c: 436: ADC_delay--;
  3776  0371  3001               	movlw	1
  3777  0372  02A6               	subwf	_ADC_delay^(0+128),f	;volatile
  3778  0373  3000               	movlw	0
  3779  0374  1C03               	skipc
  3780  0375  03A7               	decf	(_ADC_delay+1)^(0+128),f	;volatile
  3781  0376  02A7               	subwf	(_ADC_delay+1)^(0+128),f	;volatile
  3782                           
  3783                           ;SC8F072_Pwm_Demo.c: 437: }
  3784  0377  2B7E               	goto	i1l3484
  3785  0378                     i1l3482:	
  3786                           
  3787                           ;SC8F072_Pwm_Demo.c: 438: else
  3788                           ;SC8F072_Pwm_Demo.c: 439: {
  3789                           ;SC8F072_Pwm_Demo.c: 440: ADC_delay=1000;
  3790  0378  30E8               	movlw	232
  3791  0379  00A6               	movwf	_ADC_delay^(0+128)	;volatile
  3792  037A  3003               	movlw	3
  3793  037B  00A7               	movwf	(_ADC_delay^(0+128)+1)	;volatile
  3794                           
  3795                           ;SC8F072_Pwm_Demo.c: 441: ADC_Flag=1;
  3796  037C  3001               	movlw	1
  3797  037D  00AF               	movwf	_ADC_Flag^(0+128)	;volatile
  3798  037E                     i1l3484:	
  3799                           
  3800                           ;SC8F072_Pwm_Demo.c: 442: }
  3801                           ;SC8F072_Pwm_Demo.c: 443: }
  3802                           ;SC8F072_Pwm_Demo.c: 444: if(TMR2IF)
  3803  037E  1283               	bcf	3,5	;RP0=0, select bank0
  3804  037F  1C8D               	btfss	13,1	;volatile
  3805  0380  2BA3               	goto	i1l743
  3806                           
  3807                           ;SC8F072_Pwm_Demo.c: 445: {
  3808                           ;SC8F072_Pwm_Demo.c: 446: TMR2IF = 0;
  3809  0381  108D               	bcf	13,1	;volatile
  3810                           
  3811                           ;SC8F072_Pwm_Demo.c: 465: if (!(PORTB & 0x20))
  3812  0382  1A86               	btfsc	6,5	;volatile
  3813  0383  2B91               	goto	i1l3496
  3814                           
  3815                           ;SC8F072_Pwm_Demo.c: 466: {
  3816                           ;SC8F072_Pwm_Demo.c: 467: if (debounce_counter < 15) debounce_counter++;
  3817  0384  300F               	movlw	15
  3818  0385  1683               	bsf	3,5	;RP0=1, select bank1
  3819  0386  022E               	subwf	_debounce_counter^(0+128),w	;volatile
  3820  0387  1C03               	btfss	3,0
  3821  0388  0AAE               	incf	_debounce_counter^(0+128),f	;volatile
  3822                           
  3823                           ;SC8F072_Pwm_Demo.c: 468: if (debounce_counter == 15) long_press_counter++;
  3824  0389  300F               	movlw	15
  3825  038A  062E               	xorwf	_debounce_counter^(0+128),w	;volatile
  3826  038B  1D03               	btfss	3,2
  3827  038C  2B93               	goto	i1l3498
  3828  038D  0AA2               	incf	_long_press_counter^(0+128),f	;volatile
  3829  038E  1903               	skipnz
  3830  038F  0AA3               	incf	(_long_press_counter+1)^(0+128),f	;volatile
  3831  0390  2B93               	goto	i1l3498
  3832  0391                     i1l3496:	
  3833                           
  3834                           ;SC8F072_Pwm_Demo.c: 470: else
  3835                           ;SC8F072_Pwm_Demo.c: 471: {
  3836                           ;SC8F072_Pwm_Demo.c: 472: debounce_counter = 0;
  3837  0391  1683               	bsf	3,5	;RP0=1, select bank1
  3838  0392  01AE               	clrf	_debounce_counter^(0+128)	;volatile
  3839  0393                     i1l3498:	
  3840                           
  3841                           ;SC8F072_Pwm_Demo.c: 473: }
  3842                           ;SC8F072_Pwm_Demo.c: 476: if(Time_delay > 0)
  3843  0393  0820               	movf	_Time_delay^(0+128),w	;volatile
  3844  0394  0421               	iorwf	(_Time_delay+1)^(0+128),w	;volatile
  3845  0395  1903               	btfsc	3,2
  3846  0396  2B9E               	goto	i1l739
  3847                           
  3848                           ;SC8F072_Pwm_Demo.c: 477: {
  3849                           ;SC8F072_Pwm_Demo.c: 478: Time_delay--;
  3850  0397  3001               	movlw	1
  3851  0398  02A0               	subwf	_Time_delay^(0+128),f	;volatile
  3852  0399  3000               	movlw	0
  3853  039A  1C03               	skipc
  3854  039B  03A1               	decf	(_Time_delay+1)^(0+128),f	;volatile
  3855  039C  02A1               	subwf	(_Time_delay+1)^(0+128),f	;volatile
  3856                           
  3857                           ;SC8F072_Pwm_Demo.c: 479: }
  3858  039D  2BA3               	goto	i1l743
  3859  039E                     i1l739:	
  3860                           
  3861                           ;SC8F072_Pwm_Demo.c: 480: else
  3862                           ;SC8F072_Pwm_Demo.c: 481: {
  3863                           ;SC8F072_Pwm_Demo.c: 482: if (!(PORTA & 0x20))
  3864  039E  1A86               	btfsc	6,5	;volatile
  3865  039F  2BA2               	goto	i1l3504
  3866                           
  3867                           ;SC8F072_Pwm_Demo.c: 483: {
  3868                           ;SC8F072_Pwm_Demo.c: 484: Charge_num();
  3869  03A0  2675               	fcall	_Charge_num
  3870                           
  3871                           ;SC8F072_Pwm_Demo.c: 485: }
  3872  03A1  2BA3               	goto	i1l743
  3873  03A2                     i1l3504:	
  3874                           
  3875                           ;SC8F072_Pwm_Demo.c: 486: else
  3876                           ;SC8F072_Pwm_Demo.c: 487: {
  3877                           ;SC8F072_Pwm_Demo.c: 488: Uncharge_num();
  3878  03A2  278E               	fcall	_Uncharge_num
  3879  03A3                     i1l743:	
  3880  03A3  087C               	movf	??_Isr_Timer+2,w
  3881  03A4  008A               	movwf	10
  3882  03A5  087B               	movf	??_Isr_Timer+1,w
  3883  03A6  0084               	movwf	4
  3884  03A7  0E7A               	swapf	??_Isr_Timer^(0+-128),w
  3885  03A8  0083               	movwf	3
  3886  03A9  0EFE               	swapf	126,f
  3887  03AA  0E7E               	swapf	126,w
  3888  03AB  0009               	retfie
  3889  03AC                     __end_of_Isr_Timer:	
  3890                           
  3891                           	psect	intentry
  3892  0004                     __pintentry:	
  3893                           ;incstack = 0
  3894                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3895                           
  3896  0004                     interrupt_function:	
  3897  007E                     saved_w	set	btemp
  3898  0004  00FE               	movwf	btemp
  3899  0005  0E03               	swapf	3,w
  3900  0006  00FA               	movwf	??_Isr_Timer
  3901  0007  0804               	movf	4,w
  3902  0008  00FB               	movwf	??_Isr_Timer+1
  3903  0009  080A               	movf	10,w
  3904  000A  00FC               	movwf	??_Isr_Timer+2
  3905  000B  2B35               	ljmp	_Isr_Timer
  3906                           
  3907                           	psect	text19
  3908  078E                     __ptext19:	
  3909 ;; *************** function _Uncharge_num *****************
  3910 ;; Defined at:
  3911 ;;		line 25 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_Demo\LED_188.c"
  3912 ;; Parameters:    Size  Location     Type
  3913 ;;		None
  3914 ;; Auto vars:     Size  Location     Type
  3915 ;;  hundred         1    9[COMMON] unsigned char 
  3916 ;; Return value:  Size  Location     Type
  3917 ;;                  1    wreg      void 
  3918 ;; Registers used:
  3919 ;;		wreg, status,2, status,0, pclath, cstack
  3920 ;; Tracked objects:
  3921 ;;		On entry : 100/100
  3922 ;;		On exit  : 100/0
  3923 ;;		Unchanged: 0/0
  3924 ;; Data sizes:     COMMON   BANK0   BANK1
  3925 ;;      Params:         0       0       0
  3926 ;;      Locals:         1       0       0
  3927 ;;      Temps:          0       0       0
  3928 ;;      Totals:         1       0       0
  3929 ;;Total ram usage:        1 bytes
  3930 ;; Hardware stack levels used:    1
  3931 ;; Hardware stack levels required when called:    1
  3932 ;; This function calls:
  3933 ;;		___lbdiv
  3934 ;;		___lbmod
  3935 ;; This function is called by:
  3936 ;;		_Isr_Timer
  3937 ;; This function uses a non-reentrant model
  3938 ;;
  3939                           
  3940                           
  3941                           ;psect for function _Uncharge_num
  3942  078E                     _Uncharge_num:	
  3943                           
  3944                           ;LED_188.c: 27: bool hundred = (bool)(power_percent / 100);
  3945                           
  3946                           ;incstack = 0
  3947                           ; Regs used in _Uncharge_num: [wreg+status,2+status,0+pclath+cstack]
  3948  078E  2692               	fcall	PL32	;call to abstracted procedure
  3949  078F  2744               	fcall	___lbdiv
  3950  0790  00F9               	movwf	Uncharge_num@hundred
  3951                           
  3952                           ;LED_188.c: 28: tens = (unsigned char)((power_percent % 100) / 10);
  3953  0791  2687               	fcall	PL24	;call to abstracted procedure
  3954  0792  2728               	fcall	___lbmod
  3955  0793  2744               	fcall	___lbdiv
  3956                           
  3957                           ;LED_188.c: 29: unit = (unsigned char)(power_percent % 10);
  3958  0794  268D               	fcall	PL30	;call to abstracted procedure
  3959  0795  2728               	fcall	___lbmod
  3960  0796  00EE               	movwf	_unit	;volatile
  3961                           
  3962                           ;LED_188.c: 30: if(hundred)
  3963  0797  0879               	movf	Uncharge_num@hundred,w
  3964  0798  1903               	btfsc	3,2
  3965  0799  2F9D               	goto	i1l3390
  3966                           
  3967                           ;LED_188.c: 31: {
  3968                           ;LED_188.c: 32: hundreds = 3;
  3969  079A  3003               	movlw	3
  3970  079B  00EF               	movwf	_hundreds	;volatile
  3971                           
  3972                           ;LED_188.c: 33: }
  3973  079C  0008               	return
  3974  079D                     i1l3390:	
  3975                           
  3976                           ;LED_188.c: 34: else
  3977                           ;LED_188.c: 35: {
  3978                           ;LED_188.c: 36: hundreds = 1;
  3979  079D  3001               	movlw	1
  3980  079E  00EF               	movwf	_hundreds	;volatile
  3981  079F  0008               	return
  3982  07A0                     __end_of_Uncharge_num:	
  3983                           
  3984                           	psect	text20
  3985  0697                     __ptext20:	
  3986 ;; *************** function _Display *****************
  3987 ;; Defined at:
  3988 ;;		line 170 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_Demo\LED_188.c"
  3989 ;; Parameters:    Size  Location     Type
  3990 ;;		None
  3991 ;; Auto vars:     Size  Location     Type
  3992 ;;		None
  3993 ;; Return value:  Size  Location     Type
  3994 ;;                  1    wreg      void 
  3995 ;; Registers used:
  3996 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3997 ;; Tracked objects:
  3998 ;;		On entry : 100/100
  3999 ;;		On exit  : 100/100
  4000 ;;		Unchanged: 0/0
  4001 ;; Data sizes:     COMMON   BANK0   BANK1
  4002 ;;      Params:         0       0       0
  4003 ;;      Locals:         0       0       0
  4004 ;;      Temps:          0       0       0
  4005 ;;      Totals:         0       0       0
  4006 ;;Total ram usage:        0 bytes
  4007 ;; Hardware stack levels used:    1
  4008 ;; Hardware stack levels required when called:    1
  4009 ;; This function calls:
  4010 ;;		_Display_Scan1
  4011 ;;		_Display_Scan2
  4012 ;;		_Display_Scan3
  4013 ;;		_Display_Scan4
  4014 ;;		_Display_Scan5
  4015 ;;		_Set_AllPin_INPUT
  4016 ;; This function is called by:
  4017 ;;		_Isr_Timer
  4018 ;; This function uses a non-reentrant model
  4019 ;;
  4020                           
  4021                           
  4022                           ;psect for function _Display
  4023  0697                     _Display:	
  4024                           
  4025                           ;LED_188.c: 172: static unsigned char scan_cnt;
  4026                           ;LED_188.c: 173: Set_AllPin_INPUT();
  4027                           
  4028                           ;incstack = 0
  4029                           ; Regs used in _Display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4030  0697  27E1               	fcall	_Set_AllPin_INPUT
  4031                           
  4032                           ;LED_188.c: 175: switch(scan_cnt)
  4033  0698  2EA7               	goto	i1l3418
  4034  0699                     i1l3394:	
  4035  0699  270B               	fcall	_Display_Scan1
  4036  069A                     i1l3396:	
  4037  069A  1683               	bsf	3,5	;RP0=1, select bank1
  4038  069B  0AAA               	incf	Display@scan_cnt^(0+128),f
  4039  069C  0008               	return
  4040  069D                     i1l3398:	
  4041  069D  26EE               	fcall	_Display_Scan2
  4042  069E  2E9A               	goto	i1l3396
  4043  069F                     i1l3402:	
  4044  069F  26D1               	fcall	_Display_Scan3
  4045  06A0  2E9A               	goto	i1l3396
  4046  06A1                     i1l3406:	
  4047  06A1  26B4               	fcall	_Display_Scan4
  4048  06A2  2E9A               	goto	i1l3396
  4049  06A3                     i1l3410:	
  4050  06A3  27A0               	fcall	_Display_Scan5
  4051  06A4                     i1l3412:	
  4052  06A4  1683               	bsf	3,5	;RP0=1, select bank1
  4053  06A5  01AA               	clrf	Display@scan_cnt^(0+128)
  4054  06A6  0008               	return
  4055  06A7                     i1l3418:	
  4056  06A7  1683               	bsf	3,5	;RP0=1, select bank1
  4057  06A8  082A               	movf	Display@scan_cnt^(0+128),w
  4058                           
  4059                           ; Switch size 1, requested type "space"
  4060                           ; Number of cases is 5, Range of values is 0 to 4
  4061                           ; switch strategies available:
  4062                           ; Name         Instructions Cycles
  4063                           ; direct_byte           11     6 (fixed)
  4064                           ; simple_byte           16     9 (average)
  4065                           ; jumptable            260     6 (fixed)
  4066                           ;	Chosen strategy is direct_byte
  4067  06A9  0084               	movwf	4
  4068  06AA  3005               	movlw	5
  4069  06AB  0204               	subwf	4,w
  4070  06AC  1803               	skipnc
  4071  06AD  2EA4               	goto	i1l3412
  4072  06AE  3007               	movlw	high i1S3580
  4073  06AF  008A               	movwf	10
  4074  06B0  30FA               	movlw	low i1S3580
  4075  06B1  0704               	addwf	4,w
  4076  06B2  0082               	movwf	2
  4077  06B3  0008               	return
  4078  06B4                     __end_of_Display:	
  4079                           
  4080                           	psect	swtext3
  4081  07FA                     __pswtext3:	
  4082  07FA                     i1S3580:	
  4083  07FA  2E99               	ljmp	i1l3394
  4084  07FB  2E9D               	ljmp	i1l3398
  4085  07FC  2E9F               	ljmp	i1l3402
  4086  07FD  2EA1               	ljmp	i1l3406
  4087  07FE  2EA3               	ljmp	i1l3410
  4088                           
  4089                           	psect	text21
  4090  07E1                     __ptext21:	
  4091 ;; *************** function _Set_AllPin_INPUT *****************
  4092 ;; Defined at:
  4093 ;;		line 85 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_Demo\LED_188.c"
  4094 ;; Parameters:    Size  Location     Type
  4095 ;;		None
  4096 ;; Auto vars:     Size  Location     Type
  4097 ;;		None
  4098 ;; Return value:  Size  Location     Type
  4099 ;;                  1    wreg      void 
  4100 ;; Registers used:
  4101 ;;		None
  4102 ;; Tracked objects:
  4103 ;;		On entry : 100/100
  4104 ;;		On exit  : 100/0
  4105 ;;		Unchanged: 0/0
  4106 ;; Data sizes:     COMMON   BANK0   BANK1
  4107 ;;      Params:         0       0       0
  4108 ;;      Locals:         0       0       0
  4109 ;;      Temps:          0       0       0
  4110 ;;      Totals:         0       0       0
  4111 ;;Total ram usage:        0 bytes
  4112 ;; Hardware stack levels used:    1
  4113 ;; This function calls:
  4114 ;;		Nothing
  4115 ;; This function is called by:
  4116 ;;		_Display
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           
  4121                           ;psect for function _Set_AllPin_INPUT
  4122  07E1                     _Set_AllPin_INPUT:	
  4123                           
  4124                           ;LED_188.c: 87: TRISB0 = 1;;
  4125                           
  4126                           ;incstack = 0
  4127                           ; Regs used in _Set_AllPin_INPUT: []
  4128                           
  4129                           ;LED_188.c: 88: TRISB1 = 1;;
  4130                           
  4131                           ;LED_188.c: 89: TRISB2 = 1;;
  4132                           
  4133                           ;LED_188.c: 90: TRISB3 = 1;;
  4134                           
  4135                           ;LED_188.c: 91: TRISB4 = 1;;
  4136  07E1  2FE2               	ljmp	PL14	;call to abstracted procedure
  4137  07E2                     __end_of_Set_AllPin_INPUT:	
  4138  07E2                     PL14:	
  4139  07E2  1283               	bcf	3,5	;RP0=0, select bank0
  4140  07E3  1405               	bsf	5,0	;volatile
  4141  07E4  1485               	bsf	5,1	;volatile
  4142  07E5  1505               	bsf	5,2	;volatile
  4143  07E6  1585               	bsf	5,3	;volatile
  4144  07E7  1605               	bsf	5,4	;volatile
  4145  07E8  0008               	return
  4146  07E9                     __end_ofPL14:	
  4147                           
  4148                           	psect	text22
  4149  07A0                     __ptext22:	
  4150 ;; *************** function _Display_Scan5 *****************
  4151 ;; Defined at:
  4152 ;;		line 161 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_Demo\LED_188.c"
  4153 ;; Parameters:    Size  Location     Type
  4154 ;;		None
  4155 ;; Auto vars:     Size  Location     Type
  4156 ;;		None
  4157 ;; Return value:  Size  Location     Type
  4158 ;;                  1    wreg      void 
  4159 ;; Registers used:
  4160 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4161 ;; Tracked objects:
  4162 ;;		On entry : 100/100
  4163 ;;		On exit  : 900/0
  4164 ;;		Unchanged: 0/0
  4165 ;; Data sizes:     COMMON   BANK0   BANK1
  4166 ;;      Params:         0       0       0
  4167 ;;      Locals:         0       0       0
  4168 ;;      Temps:          0       0       0
  4169 ;;      Totals:         0       0       0
  4170 ;;Total ram usage:        0 bytes
  4171 ;; Hardware stack levels used:    1
  4172 ;; This function calls:
  4173 ;;		Nothing
  4174 ;; This function is called by:
  4175 ;;		_Display
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179                           
  4180                           ;psect for function _Display_Scan5
  4181  07A0                     _Display_Scan5:	
  4182                           
  4183                           ;LED_188.c: 163: TRISB4 = 0;RB4 = 0;;
  4184                           
  4185                           ;incstack = 0
  4186                           ; Regs used in _Display_Scan5: [wreg-fsr0h+status,2+status,0]
  4187  07A0  1283               	bcf	3,5	;RP0=0, select bank0
  4188  07A1  1205               	bcf	5,4	;volatile
  4189  07A2  1206               	bcf	6,4	;volatile
  4190                           
  4191                           ;LED_188.c: 164: if(num_hund[hundreds] & 0x02)
  4192  07A3  086F               	movf	_hundreds,w
  4193  07A4  3EBF               	addlw	(low (_num_hund| 0))& (0+255)
  4194  07A5  0084               	movwf	4
  4195  07A6  1383               	bcf	3,7	;select IRP bank1
  4196  07A7  1880               	btfsc	0,1
  4197                           
  4198                           ;LED_188.c: 165: TRISB2 = 0;RB2 = 1;;
  4199  07A8  1105               	bcf	5,2	;volatile
  4200  07A9  1506               	bsf	6,2	;volatile
  4201                           
  4202                           ;LED_188.c: 166: if(num_hund[hundreds] & 0x01)
  4203  07AA  086F               	movf	_hundreds,w
  4204  07AB  3EBF               	addlw	(low (_num_hund| 0))& (0+255)
  4205  07AC  0084               	movwf	4
  4206  07AD  1800               	btfsc	0,0
  4207                           
  4208                           ;LED_188.c: 167: TRISB1 = 0;RB1 = 1;;
  4209  07AE  1085               	bcf	5,1	;volatile
  4210  07AF  1486               	bsf	6,1	;volatile
  4211  07B0  0008               	return
  4212  07B1                     __end_of_Display_Scan5:	
  4213                           
  4214                           	psect	text23
  4215  06B4                     __ptext23:	
  4216 ;; *************** function _Display_Scan4 *****************
  4217 ;; Defined at:
  4218 ;;		line 147 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_Demo\LED_188.c"
  4219 ;; Parameters:    Size  Location     Type
  4220 ;;		None
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;		None
  4223 ;; Return value:  Size  Location     Type
  4224 ;;                  1    wreg      void 
  4225 ;; Registers used:
  4226 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4227 ;; Tracked objects:
  4228 ;;		On entry : 100/100
  4229 ;;		On exit  : 900/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMMON   BANK0   BANK1
  4232 ;;      Params:         0       0       0
  4233 ;;      Locals:         0       0       0
  4234 ;;      Temps:          0       0       0
  4235 ;;      Totals:         0       0       0
  4236 ;;Total ram usage:        0 bytes
  4237 ;; Hardware stack levels used:    1
  4238 ;; This function calls:
  4239 ;;		Nothing
  4240 ;; This function is called by:
  4241 ;;		_Display
  4242 ;; This function uses a non-reentrant model
  4243 ;;
  4244                           
  4245                           
  4246                           ;psect for function _Display_Scan4
  4247  06B4                     _Display_Scan4:	
  4248                           
  4249                           ;LED_188.c: 149: TRISB3 = 0;RB3 = 0;;
  4250                           
  4251                           ;incstack = 0
  4252                           ; Regs used in _Display_Scan4: [wreg-fsr0h+status,2+status,0]
  4253  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  4254  06B5  1185               	bcf	5,3	;volatile
  4255  06B6  1186               	bcf	6,3	;volatile
  4256                           
  4257                           ;LED_188.c: 150: if(nums[unit] & 0x04)
  4258  06B7  086E               	movf	_unit,w
  4259  06B8  3EB3               	addlw	(low (_nums| 0))& (0+255)
  4260  06B9  0084               	movwf	4
  4261  06BA  1383               	bcf	3,7	;select IRP bank1
  4262  06BB  1900               	btfsc	0,2
  4263                           
  4264                           ;LED_188.c: 151: TRISB0 = 0;RB0 = 1;;
  4265  06BC  1005               	bcf	5,0	;volatile
  4266  06BD  1406               	bsf	6,0	;volatile
  4267                           
  4268                           ;LED_188.c: 152: if(num_hund[hundreds] & 0x04)
  4269  06BE  086F               	movf	_hundreds,w
  4270  06BF  3EBF               	addlw	(low (_num_hund| 0))& (0+255)
  4271  06C0  0084               	movwf	4
  4272  06C1  1900               	btfsc	0,2
  4273                           
  4274                           ;LED_188.c: 153: TRISB1 = 0;RB1 = 1;;
  4275  06C2  1085               	bcf	5,1	;volatile
  4276  06C3  1486               	bsf	6,1	;volatile
  4277                           
  4278                           ;LED_188.c: 154: if(num_hund[hundreds] & 0x08)
  4279  06C4  086F               	movf	_hundreds,w
  4280  06C5  3EBF               	addlw	(low (_num_hund| 0))& (0+255)
  4281  06C6  0084               	movwf	4
  4282  06C7  1980               	btfsc	0,3
  4283                           
  4284                           ;LED_188.c: 155: TRISB2 = 0;RB2 = 1;;
  4285  06C8  1105               	bcf	5,2	;volatile
  4286  06C9  1506               	bsf	6,2	;volatile
  4287                           
  4288                           ;LED_188.c: 156: if(nums[tens] & 0x01)
  4289  06CA  087D               	movf	_tens,w
  4290  06CB  3EB3               	addlw	(low (_nums| 0))& (0+255)
  4291  06CC  0084               	movwf	4
  4292  06CD  1800               	btfsc	0,0
  4293                           
  4294                           ;LED_188.c: 157: TRISB4 = 0;RB4 = 1;;
  4295  06CE  1205               	bcf	5,4	;volatile
  4296  06CF  1606               	bsf	6,4	;volatile
  4297  06D0  0008               	return
  4298  06D1                     __end_of_Display_Scan4:	
  4299                           
  4300                           	psect	text24
  4301  06D1                     __ptext24:	
  4302 ;; *************** function _Display_Scan3 *****************
  4303 ;; Defined at:
  4304 ;;		line 133 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_Demo\LED_188.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;		None
  4307 ;; Auto vars:     Size  Location     Type
  4308 ;;		None
  4309 ;; Return value:  Size  Location     Type
  4310 ;;                  1    wreg      void 
  4311 ;; Registers used:
  4312 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4313 ;; Tracked objects:
  4314 ;;		On entry : 100/100
  4315 ;;		On exit  : 900/0
  4316 ;;		Unchanged: 0/0
  4317 ;; Data sizes:     COMMON   BANK0   BANK1
  4318 ;;      Params:         0       0       0
  4319 ;;      Locals:         0       0       0
  4320 ;;      Temps:          0       0       0
  4321 ;;      Totals:         0       0       0
  4322 ;;Total ram usage:        0 bytes
  4323 ;; Hardware stack levels used:    1
  4324 ;; This function calls:
  4325 ;;		Nothing
  4326 ;; This function is called by:
  4327 ;;		_Display
  4328 ;; This function uses a non-reentrant model
  4329 ;;
  4330                           
  4331                           
  4332                           ;psect for function _Display_Scan3
  4333  06D1                     _Display_Scan3:	
  4334                           
  4335                           ;LED_188.c: 135: TRISB2 = 0;RB2 = 0;;
  4336                           
  4337                           ;incstack = 0
  4338                           ; Regs used in _Display_Scan3: [wreg-fsr0h+status,2+status,0]
  4339  06D1  1283               	bcf	3,5	;RP0=0, select bank0
  4340  06D2  1105               	bcf	5,2	;volatile
  4341  06D3  1106               	bcf	6,2	;volatile
  4342                           
  4343                           ;LED_188.c: 136: if(nums[unit] & 0x10)
  4344  06D4  086E               	movf	_unit,w
  4345  06D5  3EB3               	addlw	(low (_nums| 0))& (0+255)
  4346  06D6  0084               	movwf	4
  4347  06D7  1383               	bcf	3,7	;select IRP bank1
  4348  06D8  1A00               	btfsc	0,4
  4349                           
  4350                           ;LED_188.c: 137: TRISB0 = 0;RB0 = 1;;
  4351  06D9  1005               	bcf	5,0	;volatile
  4352  06DA  1406               	bsf	6,0	;volatile
  4353                           
  4354                           ;LED_188.c: 138: if(nums[tens] & 0x40)
  4355  06DB  087D               	movf	_tens,w
  4356  06DC  3EB3               	addlw	(low (_nums| 0))& (0+255)
  4357  06DD  0084               	movwf	4
  4358  06DE  1B00               	btfsc	0,6
  4359                           
  4360                           ;LED_188.c: 139: TRISB1 = 0;RB1 = 1;;
  4361  06DF  1085               	bcf	5,1	;volatile
  4362  06E0  1486               	bsf	6,1	;volatile
  4363                           
  4364                           ;LED_188.c: 140: if(nums[tens] & 0x10)
  4365  06E1  087D               	movf	_tens,w
  4366  06E2  3EB3               	addlw	(low (_nums| 0))& (0+255)
  4367  06E3  0084               	movwf	4
  4368  06E4  1A00               	btfsc	0,4
  4369                           
  4370                           ;LED_188.c: 141: TRISB3 = 0;RB3 = 1;;
  4371  06E5  1185               	bcf	5,3	;volatile
  4372  06E6  1586               	bsf	6,3	;volatile
  4373                           
  4374                           ;LED_188.c: 142: if(nums[tens] & 0x02)
  4375  06E7  087D               	movf	_tens,w
  4376  06E8  3EB3               	addlw	(low (_nums| 0))& (0+255)
  4377  06E9  0084               	movwf	4
  4378  06EA  1880               	btfsc	0,1
  4379                           
  4380                           ;LED_188.c: 143: TRISB4 = 0;RB4 = 1;;
  4381  06EB  1205               	bcf	5,4	;volatile
  4382  06EC  1606               	bsf	6,4	;volatile
  4383  06ED  0008               	return
  4384  06EE                     __end_of_Display_Scan3:	
  4385                           
  4386                           	psect	text25
  4387  06EE                     __ptext25:	
  4388 ;; *************** function _Display_Scan2 *****************
  4389 ;; Defined at:
  4390 ;;		line 119 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_Demo\LED_188.c"
  4391 ;; Parameters:    Size  Location     Type
  4392 ;;		None
  4393 ;; Auto vars:     Size  Location     Type
  4394 ;;		None
  4395 ;; Return value:  Size  Location     Type
  4396 ;;                  1    wreg      void 
  4397 ;; Registers used:
  4398 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4399 ;; Tracked objects:
  4400 ;;		On entry : 100/100
  4401 ;;		On exit  : 900/0
  4402 ;;		Unchanged: 0/0
  4403 ;; Data sizes:     COMMON   BANK0   BANK1
  4404 ;;      Params:         0       0       0
  4405 ;;      Locals:         0       0       0
  4406 ;;      Temps:          0       0       0
  4407 ;;      Totals:         0       0       0
  4408 ;;Total ram usage:        0 bytes
  4409 ;; Hardware stack levels used:    1
  4410 ;; This function calls:
  4411 ;;		Nothing
  4412 ;; This function is called by:
  4413 ;;		_Display
  4414 ;; This function uses a non-reentrant model
  4415 ;;
  4416                           
  4417                           
  4418                           ;psect for function _Display_Scan2
  4419  06EE                     _Display_Scan2:	
  4420                           
  4421                           ;LED_188.c: 121: TRISB1 = 0;RB1 = 0;;
  4422                           
  4423                           ;incstack = 0
  4424                           ; Regs used in _Display_Scan2: [wreg-fsr0h+status,2+status,0]
  4425  06EE  1283               	bcf	3,5	;RP0=0, select bank0
  4426  06EF  1085               	bcf	5,1	;volatile
  4427  06F0  1086               	bcf	6,1	;volatile
  4428                           
  4429                           ;LED_188.c: 122: if(nums[unit] &0x40)
  4430  06F1  086E               	movf	_unit,w
  4431  06F2  3EB3               	addlw	(low (_nums| 0))& (0+255)
  4432  06F3  0084               	movwf	4
  4433  06F4  1383               	bcf	3,7	;select IRP bank1
  4434  06F5  1B00               	btfsc	0,6
  4435                           
  4436                           ;LED_188.c: 123: TRISB0 = 0;RB0 = 1;;
  4437  06F6  1005               	bcf	5,0	;volatile
  4438  06F7  1406               	bsf	6,0	;volatile
  4439                           
  4440                           ;LED_188.c: 124: if(nums[tens] & 0x20)
  4441  06F8  087D               	movf	_tens,w
  4442  06F9  3EB3               	addlw	(low (_nums| 0))& (0+255)
  4443  06FA  0084               	movwf	4
  4444  06FB  1A80               	btfsc	0,5
  4445                           
  4446                           ;LED_188.c: 125: TRISB2 = 0;RB2 = 1;;
  4447  06FC  1105               	bcf	5,2	;volatile
  4448  06FD  1506               	bsf	6,2	;volatile
  4449                           
  4450                           ;LED_188.c: 126: if(nums[tens] & 0x08)
  4451  06FE  087D               	movf	_tens,w
  4452  06FF  3EB3               	addlw	(low (_nums| 0))& (0+255)
  4453  0700  0084               	movwf	4
  4454  0701  1980               	btfsc	0,3
  4455                           
  4456                           ;LED_188.c: 127: TRISB3 = 0;RB3 = 1;;
  4457  0702  1185               	bcf	5,3	;volatile
  4458  0703  1586               	bsf	6,3	;volatile
  4459                           
  4460                           ;LED_188.c: 128: if(nums[tens] & 0x04)
  4461  0704  087D               	movf	_tens,w
  4462  0705  3EB3               	addlw	(low (_nums| 0))& (0+255)
  4463  0706  0084               	movwf	4
  4464  0707  1900               	btfsc	0,2
  4465                           
  4466                           ;LED_188.c: 129: TRISB4 = 0;RB4 = 1;;
  4467  0708  1205               	bcf	5,4	;volatile
  4468  0709  1606               	bsf	6,4	;volatile
  4469  070A  0008               	return
  4470  070B                     __end_of_Display_Scan2:	
  4471                           
  4472                           	psect	text26
  4473  070B                     __ptext26:	
  4474 ;; *************** function _Display_Scan1 *****************
  4475 ;; Defined at:
  4476 ;;		line 105 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_Demo\LED_188.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;		None
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;		None
  4481 ;; Return value:  Size  Location     Type
  4482 ;;                  1    wreg      void 
  4483 ;; Registers used:
  4484 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4485 ;; Tracked objects:
  4486 ;;		On entry : 100/100
  4487 ;;		On exit  : 900/0
  4488 ;;		Unchanged: 0/0
  4489 ;; Data sizes:     COMMON   BANK0   BANK1
  4490 ;;      Params:         0       0       0
  4491 ;;      Locals:         0       0       0
  4492 ;;      Temps:          0       0       0
  4493 ;;      Totals:         0       0       0
  4494 ;;Total ram usage:        0 bytes
  4495 ;; Hardware stack levels used:    1
  4496 ;; This function calls:
  4497 ;;		Nothing
  4498 ;; This function is called by:
  4499 ;;		_Display
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           
  4504                           ;psect for function _Display_Scan1
  4505  070B                     _Display_Scan1:	
  4506                           
  4507                           ;LED_188.c: 107: TRISB0 = 0;RB0 = 0;;
  4508                           
  4509                           ;incstack = 0
  4510                           ; Regs used in _Display_Scan1: [wreg-fsr0h+status,2+status,0]
  4511  070B  1283               	bcf	3,5	;RP0=0, select bank0
  4512  070C  1005               	bcf	5,0	;volatile
  4513  070D  1006               	bcf	6,0	;volatile
  4514                           
  4515                           ;LED_188.c: 108: if(nums[unit] & 0x20)
  4516  070E  086E               	movf	_unit,w
  4517  070F  3EB3               	addlw	(low (_nums| 0))& (0+255)
  4518  0710  0084               	movwf	4
  4519  0711  1383               	bcf	3,7	;select IRP bank1
  4520  0712  1A80               	btfsc	0,5
  4521                           
  4522                           ;LED_188.c: 109: TRISB1 = 0;RB1 = 1;;
  4523  0713  1085               	bcf	5,1	;volatile
  4524  0714  1486               	bsf	6,1	;volatile
  4525                           
  4526                           ;LED_188.c: 110: if(nums[unit] & 0x08)
  4527  0715  086E               	movf	_unit,w
  4528  0716  3EB3               	addlw	(low (_nums| 0))& (0+255)
  4529  0717  0084               	movwf	4
  4530  0718  1980               	btfsc	0,3
  4531                           
  4532                           ;LED_188.c: 111: TRISB2 = 0;RB2 = 1;;
  4533  0719  1105               	bcf	5,2	;volatile
  4534  071A  1506               	bsf	6,2	;volatile
  4535                           
  4536                           ;LED_188.c: 112: if(nums[unit] & 0x02)
  4537  071B  086E               	movf	_unit,w
  4538  071C  3EB3               	addlw	(low (_nums| 0))& (0+255)
  4539  071D  0084               	movwf	4
  4540  071E  1880               	btfsc	0,1
  4541                           
  4542                           ;LED_188.c: 113: TRISB3 = 0;RB3 = 1;;
  4543  071F  1185               	bcf	5,3	;volatile
  4544  0720  1586               	bsf	6,3	;volatile
  4545                           
  4546                           ;LED_188.c: 114: if(nums[unit] &0x01)
  4547  0721  086E               	movf	_unit,w
  4548  0722  3EB3               	addlw	(low (_nums| 0))& (0+255)
  4549  0723  0084               	movwf	4
  4550  0724  1800               	btfsc	0,0
  4551                           
  4552                           ;LED_188.c: 115: TRISB4 = 0;RB4 = 1;;
  4553  0725  1205               	bcf	5,4	;volatile
  4554  0726  1606               	bsf	6,4	;volatile
  4555  0727  0008               	return
  4556  0728                     __end_of_Display_Scan1:	
  4557                           
  4558                           	psect	text27
  4559  0675                     __ptext27:	
  4560 ;; *************** function _Charge_num *****************
  4561 ;; Defined at:
  4562 ;;		line 11 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\project\SC8F072_Pwm_Demo\LED_188.c"
  4563 ;; Parameters:    Size  Location     Type
  4564 ;;		None
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;  hundred         1    9[COMMON] unsigned char 
  4567 ;; Return value:  Size  Location     Type
  4568 ;;                  1    wreg      void 
  4569 ;; Registers used:
  4570 ;;		wreg, status,2, status,0, pclath, cstack
  4571 ;; Tracked objects:
  4572 ;;		On entry : 100/100
  4573 ;;		On exit  : 100/0
  4574 ;;		Unchanged: 0/0
  4575 ;; Data sizes:     COMMON   BANK0   BANK1
  4576 ;;      Params:         0       0       0
  4577 ;;      Locals:         1       0       0
  4578 ;;      Temps:          0       0       0
  4579 ;;      Totals:         1       0       0
  4580 ;;Total ram usage:        1 bytes
  4581 ;; Hardware stack levels used:    1
  4582 ;; Hardware stack levels required when called:    1
  4583 ;; This function calls:
  4584 ;;		___lbdiv
  4585 ;;		___lbmod
  4586 ;; This function is called by:
  4587 ;;		_Isr_Timer
  4588 ;; This function uses a non-reentrant model
  4589 ;;
  4590                           
  4591                           
  4592                           ;psect for function _Charge_num
  4593  0675                     _Charge_num:	
  4594                           
  4595                           ;LED_188.c: 13: bool hundred = (bool)(power_percent / 100);
  4596                           
  4597                           ;incstack = 0
  4598                           ; Regs used in _Charge_num: [wreg+status,2+status,0+pclath+cstack]
  4599  0675  2692               	fcall	PL32	;call to abstracted procedure
  4600  0676  2744               	fcall	___lbdiv
  4601  0677  00F9               	movwf	Charge_num@hundred
  4602                           
  4603                           ;LED_188.c: 14: tens = (unsigned char)((power_percent % 100) / 10);
  4604  0678  2687               	fcall	PL24	;call to abstracted procedure
  4605  0679  2728               	fcall	___lbmod
  4606  067A  2744               	fcall	___lbdiv
  4607                           
  4608                           ;LED_188.c: 15: unit = (unsigned char)(power_percent % 10);
  4609  067B  268D               	fcall	PL30	;call to abstracted procedure
  4610  067C  2728               	fcall	___lbmod
  4611  067D  00EE               	movwf	_unit	;volatile
  4612                           
  4613                           ;LED_188.c: 16: if(hundred)
  4614  067E  0879               	movf	Charge_num@hundred,w
  4615  067F  1903               	btfsc	3,2
  4616  0680  2E84               	goto	i1l3382
  4617                           
  4618                           ;LED_188.c: 17: {
  4619                           ;LED_188.c: 18: hundreds = 4;
  4620  0681  3004               	movlw	4
  4621  0682  00EF               	movwf	_hundreds	;volatile
  4622                           
  4623                           ;LED_188.c: 19: }
  4624  0683  0008               	return
  4625  0684                     i1l3382:	
  4626                           
  4627                           ;LED_188.c: 20: else
  4628                           ;LED_188.c: 21: {
  4629                           ;LED_188.c: 22: hundreds = 2;
  4630  0684  3002               	movlw	2
  4631  0685  00EF               	movwf	_hundreds	;volatile
  4632  0686  0008               	return
  4633  0687                     __end_of_Charge_num:	
  4634  0687                     PL24:	
  4635  0687  300A               	movlw	10
  4636  0688  00F5               	movwf	___lbdiv@divisor
  4637  0689  3064               	movlw	100
  4638  068A  00F0               	movwf	___lbmod@divisor
  4639  068B  086D               	movf	_power_percent,w	;volatile
  4640  068C  0008               	return
  4641  068D                     __end_ofPL24:	
  4642  068D                     PL30:	
  4643  068D  00FD               	movwf	_tens	;volatile
  4644  068E  300A               	movlw	10
  4645  068F  00F0               	movwf	___lbmod@divisor
  4646  0690  086D               	movf	_power_percent,w	;volatile
  4647  0691  0008               	return
  4648  0692                     __end_ofPL30:	
  4649  0692                     PL32:	
  4650  0692  3064               	movlw	100
  4651  0693  00F5               	movwf	___lbdiv@divisor
  4652  0694  1283               	bcf	3,5	;RP0=0, select bank0
  4653  0695  086D               	movf	_power_percent,w	;volatile
  4654  0696  0008               	return
  4655  0697                     __end_ofPL32:	
  4656                           
  4657                           	psect	text28
  4658  0728                     __ptext28:	
  4659 ;; *************** function ___lbmod *****************
  4660 ;; Defined at:
  4661 ;;		line 4 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\lbmod.c"
  4662 ;; Parameters:    Size  Location     Type
  4663 ;;  dividend        1    wreg     unsigned char 
  4664 ;;  divisor         1    0[COMMON] unsigned char 
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;  dividend        1    2[COMMON] unsigned char 
  4667 ;;  rem             1    4[COMMON] unsigned char 
  4668 ;;  counter         1    3[COMMON] unsigned char 
  4669 ;; Return value:  Size  Location     Type
  4670 ;;                  1    wreg      unsigned char 
  4671 ;; Registers used:
  4672 ;;		wreg, status,2, status,0
  4673 ;; Tracked objects:
  4674 ;;		On entry : 100/0
  4675 ;;		On exit  : 100/0
  4676 ;;		Unchanged: 100/0
  4677 ;; Data sizes:     COMMON   BANK0   BANK1
  4678 ;;      Params:         1       0       0
  4679 ;;      Locals:         3       0       0
  4680 ;;      Temps:          1       0       0
  4681 ;;      Totals:         5       0       0
  4682 ;;Total ram usage:        5 bytes
  4683 ;; Hardware stack levels used:    1
  4684 ;; This function calls:
  4685 ;;		Nothing
  4686 ;; This function is called by:
  4687 ;;		_Charge_num
  4688 ;;		_Uncharge_num
  4689 ;; This function uses a non-reentrant model
  4690 ;;
  4691                           
  4692                           
  4693                           ;psect for function ___lbmod
  4694  0728                     ___lbmod:	
  4695                           
  4696                           ;incstack = 0
  4697                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  4698                           ;___lbmod@dividend stored from wreg
  4699  0728  00F2               	movwf	___lbmod@dividend
  4700  0729  3008               	movlw	8
  4701  072A  00F3               	movwf	___lbmod@counter
  4702  072B  01F4               	clrf	___lbmod@rem
  4703  072C                     i1l3232:	
  4704  072C  0872               	movf	___lbmod@dividend,w
  4705  072D  00F1               	movwf	??___lbmod
  4706  072E  3007               	movlw	7
  4707  072F  1003               	clrc
  4708  0730                     L9:	
  4709  0730  0CF1               	rrf	??___lbmod,f
  4710  0731  3EFF               	addlw	-1
  4711  0732  1003               	clrc
  4712  0733  1D03               	skipz
  4713  0734  2F30               	goto	L9
  4714  0735  0D74               	rlf	___lbmod@rem,w
  4715  0736  0471               	iorwf	??___lbmod,w
  4716  0737  00F4               	movwf	___lbmod@rem
  4717  0738  1003               	clrc
  4718  0739  0DF2               	rlf	___lbmod@dividend,f
  4719  073A  0870               	movf	___lbmod@divisor,w
  4720  073B  0274               	subwf	___lbmod@rem,w
  4721  073C  1C03               	skipc
  4722  073D  2F40               	goto	i1l3240
  4723  073E  0870               	movf	___lbmod@divisor,w
  4724  073F  02F4               	subwf	___lbmod@rem,f
  4725  0740                     i1l3240:	
  4726  0740  0BF3               	decfsz	___lbmod@counter,f
  4727  0741  2F2C               	goto	i1l3232
  4728  0742  0874               	movf	___lbmod@rem,w
  4729  0743  0008               	return
  4730  0744                     __end_of___lbmod:	
  4731                           
  4732                           	psect	text29
  4733  0744                     __ptext29:	
  4734 ;; *************** function ___lbdiv *****************
  4735 ;; Defined at:
  4736 ;;		line 4 in file "C:\Users\86135\Desktop\ÏîÄ¿Êµ¼ù\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\common\lbdiv.c"
  4737 ;; Parameters:    Size  Location     Type
  4738 ;;  dividend        1    wreg     unsigned char 
  4739 ;;  divisor         1    5[COMMON] unsigned char 
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;  dividend        1    6[COMMON] unsigned char 
  4742 ;;  quotient        1    8[COMMON] unsigned char 
  4743 ;;  counter         1    7[COMMON] unsigned char 
  4744 ;; Return value:  Size  Location     Type
  4745 ;;                  1    wreg      unsigned char 
  4746 ;; Registers used:
  4747 ;;		wreg, status,2, status,0
  4748 ;; Tracked objects:
  4749 ;;		On entry : 100/0
  4750 ;;		On exit  : 100/0
  4751 ;;		Unchanged: 100/0
  4752 ;; Data sizes:     COMMON   BANK0   BANK1
  4753 ;;      Params:         1       0       0
  4754 ;;      Locals:         3       0       0
  4755 ;;      Temps:          0       0       0
  4756 ;;      Totals:         4       0       0
  4757 ;;Total ram usage:        4 bytes
  4758 ;; Hardware stack levels used:    1
  4759 ;; This function calls:
  4760 ;;		Nothing
  4761 ;; This function is called by:
  4762 ;;		_Charge_num
  4763 ;;		_Uncharge_num
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           
  4768                           ;psect for function ___lbdiv
  4769  0744                     ___lbdiv:	
  4770                           
  4771                           ;incstack = 0
  4772                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  4773                           ;___lbdiv@dividend stored from wreg
  4774  0744  00F6               	movwf	___lbdiv@dividend
  4775  0745  01F8               	clrf	___lbdiv@quotient
  4776  0746  0875               	movf	___lbdiv@divisor,w
  4777  0747  1903               	btfsc	3,2
  4778  0748  2F5D               	goto	i1l3224
  4779  0749  01F7               	clrf	___lbdiv@counter
  4780  074A                     i1l3210:	
  4781  074A  0AF7               	incf	___lbdiv@counter,f
  4782  074B  1BF5               	btfsc	___lbdiv@divisor,7
  4783  074C  2F50               	goto	i1l1684
  4784  074D  1003               	clrc
  4785  074E  0DF5               	rlf	___lbdiv@divisor,f
  4786  074F  2F4A               	goto	i1l3210
  4787  0750                     i1l1684:	
  4788  0750  1003               	clrc
  4789  0751  0DF8               	rlf	___lbdiv@quotient,f
  4790  0752  0875               	movf	___lbdiv@divisor,w
  4791  0753  0276               	subwf	___lbdiv@dividend,w
  4792  0754  1C03               	skipc
  4793  0755  2F5A               	goto	L10
  4794  0756  0875               	movf	___lbdiv@divisor,w
  4795  0757  02F6               	subwf	___lbdiv@dividend,f
  4796  0758  1478               	bsf	___lbdiv@quotient,0
  4797  0759  1003               	clrc
  4798  075A                     L10:	
  4799  075A  0CF5               	rrf	___lbdiv@divisor,f
  4800  075B  0BF7               	decfsz	___lbdiv@counter,f
  4801  075C  2F50               	goto	i1l1684
  4802  075D                     i1l3224:	
  4803  075D  0878               	movf	___lbdiv@quotient,w
  4804  075E  0008               	return
  4805  075F                     __end_of___lbdiv:	
  4806  007E                     btemp	set	126	;btemp
  4807  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    6
    Data        20
    BSS         21
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     76      80
    BANK1            80     13      49

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Isr_Timer in COMMON

    _Isr_Timer->_Charge_num
    _Isr_Timer->_Uncharge_num
    _Uncharge_num->___lbdiv
    _Charge_num->___lbdiv
    ___lbdiv->___lbmod

Critical Paths under _main in BANK0

    _main->_ADC_read
    _Button_response->_Set_PWM
    _Set_PWM->___awdiv
    ___awdiv->___wmul
    _ADC_read->_ADC_Sample
    ___ftdiv->___ftadd
    _ADC_Sample->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftmul->___lwtoft
    ___ftadd->___ftmul

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _ADC_read->_ADC_Sample

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   17912
                           _ADC_read
                    _Button_response
                        _Init_System
                      _Led_Gpio_Init
                           _PWM_Init
 ---------------------------------------------------------------------------------
 (1) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Led_Gpio_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Button_response                                      1     1      0    2455
                                             17 BANK0      1     1      0
                          _Motor_num
                            _Set_PWM
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _Set_PWM                                              3     2      1    2031
                                             14 BANK0      3     2      1
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     198
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     406
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _Motor_num                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_read                                             5     5      0   15457
                                             71 BANK0      5     5      0
                         _ADC_Sample
                            ___ftadd
                            ___ftdiv
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2201
                                             38 BANK0     15     9      6
                            ___ftadd (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1    8042
                                             66 BANK0      5     4      1
                                              0 BANK1     13    13      0
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    1941
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     411
                                             53 BANK0     13     9      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    2247
                                             11 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    2839
                                             26 BANK0     12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1707
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Isr_Timer                                            3     3      0    1536
                                             10 COMMON     3     3      0
                         _Charge_num
                            _Display
                       _Uncharge_num
 ---------------------------------------------------------------------------------
 (6) _Uncharge_num                                         1     1      0     768
                                              9 COMMON     1     1      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (6) _Display                                              0     0      0       0
                      _Display_Scan1
                      _Display_Scan2
                      _Display_Scan3
                      _Display_Scan4
                      _Display_Scan5
                   _Set_AllPin_INPUT
 ---------------------------------------------------------------------------------
 (7) _Set_AllPin_INPUT                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Display_Scan5                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Display_Scan4                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Display_Scan3                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Display_Scan2                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Display_Scan1                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Charge_num                                           1     1      0     768
                                              9 COMMON     1     1      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (7) ___lbmod                                              5     4      1     371
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (7) ___lbdiv                                              4     3      1     374
                                              5 COMMON     4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_read
     _ADC_Sample
       ___ftadd
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _Button_response
     _Motor_num
     _Set_PWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
     ___awmod
   _Init_System
   _Led_Gpio_Init
   _PWM_Init

 _Isr_Timer (ROOT)
   _Charge_num
     ___lbdiv
       ___lbmod (ARG)
     ___lbmod
   _Display
     _Display_Scan1
     _Display_Scan2
     _Display_Scan3
     _Display_Scan4
     _Display_Scan5
     _Set_AllPin_INPUT
   _Uncharge_num
     ___lbdiv
       ___lbmod (ARG)
     ___lbmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK1               50      D      31       6       61.3%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4C      50       4      100.0%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      8F       8        0.0%
ABS                  0      0      8F       7        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Dec 10 21:25:44 2024

                        pc 0002                         PL2 0140                         PL4 0160  
                       PL6 0407                         PL8 017E               ___awdiv@sign 002B  
                       fsr 0004        ___wmul@multiplicand 0022               ___ftadd@exp1 0045  
             ___ftadd@exp2 0044                        PL10 0272                        PL20 0542  
                      PL12 0186                        PL30 068D                        PL22 047E  
                      PL14 07E2                        PL40 04E7                        PL32 0692  
                      PL24 0687                        PL16 0476                        PL34 0418  
                      PL26 032F                        PL18 018F                        PL36 0196  
                      PL28 0412                        PL38 05CA               ___ftadd@sign 0043  
                      l657 07D0                        l658 07D7                        l692 00A8  
                      l686 0071                        l696 00F8                        _GIE 005F  
                      _RB0 0030                        _RB1 0031                        _RB2 0032  
                      _RB3 0033                        _RB4 0034                        _PR2 0011  
      __size_of_ADC_Sample 0103                        fsr0 0004                        indf 0000  
             ___awmod@sign 0025                        stop 026F                       S3576 07F0  
                     S3578 07F5               ___ftdiv@cntr 004F               ___ftdiv@sign 0054  
                     l3002 0092                       l3006 009C                       l3008 00A4  
                     l3026 0137                       l3018 00FC                       l3140 05E0  
                     l1614 02F3                       l1632 04A1                       l3160 0607  
                     l3136 05D9                       l3320 01AA                       l3322 01C5  
                     l3148 05EC                       l3156 05FF                       l3324 01DE  
                     l3332 0224                       l3340 0245                       l1590 05B8  
                     l3190 04B4                       l3326 01F7                       l3334 0230  
                     l2800 02CD                       l3168 0493                       l2712 0769  
                     l3328 020D                       l1578 0596                       l2802 02D2  
                     l3370 046B                       l2730 0553                       l2820 02FE  
                     l2812 02EA                       l2804 02D7                       l2708 0761  
                     l2814 02EF                       l2806 02DB                       l3374 0473  
                     l2736 055C                       l2690 05A1                       l2826 0305  
                     l2850 03C8                       l2930 0539                       l2914 0515  
                     l2762 0589                       l2746 056A                       l2692 05A8  
                     l2772 029A                       l2924 0521                       l2940 0658  
                     l2686 059A                       l2838 031D                       l2782 02B0  
                     l2846 03BA                       l2926 052B                       l2918 051D  
                     l2758 0581                       l2942 065B                       l2696 05B6  
                     l2688 059C                       l2776 02A1                       l2880 03E8  
                     l2872 03E0                       l2944 065E                       l2952 0669  
                     l2698 05AD                       l2794 02BE                       l2970 0055  
                     l2946 0662                       l2884 03EF                       l2868 03D9  
                     l2948 0666                       l2896 04F3                       l2984 005C  
                     l2968 0051                       l2898 04F8                       l2994 007B  
                     l2978 005B                       _CHS4 04B6                       _T0IE 005D  
                     _T0IF 005A                       _IOCA 0089                       _IOCB 0009  
                     u2215 05F2                       u1435 0573                       u2265 04C2  
                     u1905 00A2                       u1930 015D                       u1755 04FA  
                     u1935 014B                       u1936 014D                       u1945 00F3  
                     u1937 0153                       u2577 01A4                       u1938 0155  
                     u1939 015B                       u2587 0470                       _RAIE 0073  
                     _RAIF 006B                       u2597 004D                       u1975 0170  
                     u1895 0098                       _RBIE 005B                       _RBIF 0058  
                     _TMR0 0081                       _WPDA 0087                       _WPDB 0007  
                     _WPUA 0088                       _WPUB 0008                 _Charge_num 0675  
                     _main 07CD               ___ftpack@arg 0020               ___ftpack@exp 0023  
                     _tens 007D                       _nums 00B3                       _unit 006E  
                     btemp 007E                       start 000C           __end_of_ADC_read 0476  
             ___ftmul@cntr 0038            __end_of_Display 06B4               ___ftmul@sign 0039  
             ___fttol@exp1 0061              ??_Init_System 0020               ___fttol@lval 005D  
          __end_of_Set_PWM 0675                      ?_main 0070           _Set_AllPin_INPUT 07E1  
          __end_of___awdiv 058E            __end_of___lbdiv 075F            __end_of___ftadd 032F  
          __end_of___awmod 060C            __end_of___lbmod 0744            __end_of___ftdiv 04E7  
          __end_of___ftmul 0407            ___awdiv@divisor 0026            __end_of___fttol 0542  
                    _T2CON 0013                      i1l743 03A3                      i1l739 039E  
          ___awdiv@counter 002A                      _PORTA 0086                      _PORTB 0006  
                    _TRISA 0085                      _TRISB 0005                      _PWMTH 0018  
                    _PWMTL 0017              ___ftpack@sign 0024                      pclath 000A  
         __end_of_PWM_Init 078E                      status 0003                      wtemp0 007E  
          ___lbdiv@divisor 0075            ___lbdiv@counter 0077            __initialization 000D  
             __end_of_main 07D9                     ??_main 006C              ___fttol@sign1 005C  
      __end_of_Init_System 0645                     _ADCON0 0095                     _ADCON1 0096  
                   i1S3580 07FA                     _ADRESH 0099                     _ADRESL 0098  
         ___awdiv@dividend 0028           __end_of___ftpack 05CA                     _GODONE 04A9  
                   i1l3210 074A                     i1l3224 075D                     i1l3240 0740  
                   i1l3232 072C                     i1l3410 06A3                     i1l3402 069F  
                   i1l3412 06A4                     i1l3406 06A1                     i1l3504 03A2  
                   i1l3418 06A7                     i1l3450 0341                     i1l1684 0750  
                   i1l3382 0684                     i1l3390 079D                     i1l3446 033F  
                   i1l3464 0360                     i1l3448 0340                     i1l3394 0699  
                   i1l3482 0378                     i1l3474 036A                     i1l3458 0350  
                   i1l3466 0362                     i1l3396 069A                     i1l3484 037E  
                   i1l3468 0363                     i1l3398 069D                     i1l3496 0391  
                   i1l3498 0393                     _LDO_EN 04B2                     _INTCON 000B  
         __end_of___lwtoft 07C1                ?_Charge_num 0070                     _OSCCON 0014  
                   _TMR2IE 0071                     _TMR2IF 0069                     _PWMD0L 0019  
                   _PWMD1L 001A                     _PWMD2L 009B                     _PWMD3L 009C  
                   _PWMD4L 001B               ??_ADC_Sample 0063                     _PWMT4L 001C  
                   _TRISB0 0028                     _TRISB1 0029                     _TRISB2 002A  
                   _TRISB3 002B                     _TRISB4 002C                  ??_Display 0070  
       __size_of_Isr_Timer 0077                  ??_Set_PWM 002F                     _T_flag 00AB  
               _Time_delay 00A0                     ___wmul 075F                  ??___awdiv 002A  
                ??___lbdiv 0076                  ??___ftadd 0040                  ??___awmod 0024  
                ??___lbmod 0071                  ??___ftdiv 004C                  ??___ftmul 0031  
                ??___fttol 0059      __end_of_Led_Gpio_Init 0800           ___awdiv@quotient 002C  
          ___awmod@divisor 0020            ___awmod@counter 0024         __size_of_Motor_num 0007  
    ___ftmul@f3_as_product 0035               __pdataCOMMON 007D         __end_of_ADC_Sample 0140  
                   saved_w 007E                  ?_ADC_read 0070           ___lbdiv@dividend 0076  
 __size_of_Button_response 00D7            ___lbmod@divisor 0070                Set_PWM@duty 002E  
  __end_of__initialization 003B            ___lbmod@counter 0073                 ___ftadd@f1 003A  
               ___ftadd@f2 003D                 ___ftdiv@f1 0049                 ___ftdiv@f2 0046  
               ___ftdiv@f3 0050                 ___ftmul@f1 002B                 ___ftmul@f2 002E  
               ___fttol@f1 0055             __pcstackCOMMON 0070               __pidataBANK0 0000  
             __pidataBANK1 0000                _Init_System 060C         Set_PWM@pulse_width 0030  
               __end_ofPL2 0160                 __end_ofPL4 017E                 __end_ofPL6 0412  
               __end_ofPL8 0186           ___lbdiv@quotient 0078                 ___lwtoft@c 0028  
                ?_PWM_Init 0070        __size_of_Charge_num 0012          __end_of_Isr_Timer 03AC  
               ??_ADC_read 0067                 __pbssBANK0 006C                 __pbssBANK1 00A0  
 __end_of_Set_AllPin_INPUT 07E2         _long_press_counter 00A2          __end_of_Motor_num 07F0  
               __pmaintext 07CD      __end_of_Display_Scan1 0728      __end_of_Display_Scan2 070B  
    __end_of_Display_Scan3 06EE      __end_of_Display_Scan4 06D1      __end_of_Display_Scan5 07B1  
                  ?___wmul 0020                 __pintentry 0004                  ?___ftpack 0020  
               ??_PWM_Init 0020                  ?___lwtoft 0028                    _PWMD01H 001E  
                  _PWMD23H 009E                    _PWMCON0 0015                    _PWMCON1 0016  
                  _PWMCON2 001D                 __stringtab 07C1                    _Display 0697  
                  _Set_PWM 0645          ??_Button_response 0031                  _ADC_delay 00A6  
          ADC_Sample@adldo 0062            ADC_Sample@admax 00C9            ADC_Sample@admin 00C7  
          ADC_Sample@adsum 00CB                    ___awdiv 0549                    ___lbdiv 0744  
                  ___ftadd 0277                    ___awmod 05CF                    ___lbmod 0728  
                  ___ftdiv 0485            __size_of___wmul 0019                    ___ftmul 03AC  
                  ___fttol 04EB                 ??___ftpack 0025              ?_Uncharge_num 0070  
                  __ptext1 0778                    __ptext2 07FF                    __ptext3 060C  
                  __ptext4 019B                    __ptext5 05CF                    __ptext6 0645  
                  __ptext7 075F                    __ptext8 0549                    __ptext9 07E9  
               ??___lwtoft 002B           ___awmod@dividend 0022                 _duty_steps 07C7  
                  clrloop0 07DA       end_of_initialization 003B               ??_Charge_num 0079  
          Display@scan_cnt 00AA             ??_Uncharge_num 0079         __end_of_Charge_num 0687  
         ___lbmod@dividend 0072          __size_of_ADC_read 005A                ___lbmod@rem 0074  
              ___ftdiv@exp 0053                ___ftmul@exp 0034         ADC_read@power_temp 0068  
             ?_Init_System 0070             __end_of___wmul 0778              __pidataCOMMON 0000  
              __end_ofPL10 0277                __end_ofPL20 0549                __end_ofPL12 018F  
              __end_ofPL30 0692                __end_ofPL22 0485                __end_ofPL14 07E9  
              __end_ofPL40 04EB                __end_ofPL32 0697                __end_ofPL24 068D  
              __end_ofPL16 047E                __end_ofPL34 041C                __end_ofPL26 0335  
              __end_ofPL18 0196                __end_ofPL36 019B                __end_ofPL28 0418  
              __end_ofPL38 05CF          __size_of_PWM_Init 0016        start_initialization 000D  
                _Isr_Timer 0335     __size_of_Led_Gpio_Init 0001          ?_Set_AllPin_INPUT 0070  
       ??_Set_AllPin_INPUT 0070                  _Motor_num 07E9                   ??___wmul 0024  
        ADC_Sample@ad_temp 00CF                __pdataBANK0 006E                __pdataBANK1 00B3  
        __size_of___ftpack 003C                  ___latbits 0000          __size_of___lwtoft 0010  
            __pcstackBANK0 0020              __pcstackBANK1 00C4            _Button_response 019B  
               ?_Isr_Timer 0070        Uncharge_num@hundred 0079       __end_of_Uncharge_num 07A0  
                 ?_Display 0070               _button_lflag 00AC               _button_sflag 00AD  
                 ?_Set_PWM 002E                 ?_Motor_num 0070                   ?___awdiv 0026  
                 ?___lbdiv 0075                   ?___ftadd 003A                   ?___awmod 0020  
                 ?___lbmod 0070                   ?___ftdiv 0046                   ?___ftmul 002B  
                 ?___fttol 0055              _Led_Gpio_Init 07FF                  __pstrings 07C1  
                __pswtext1 07F0                  __pswtext2 07F5                  __pswtext3 07FA  
                 _ADC_Flag 00AF                   _ADC_read 041C             ADC_Sample@adch 00C5  
   __size_of_Display_Scan1 001D     __size_of_Display_Scan2 001D     __size_of_Display_Scan3 001D  
   __size_of_Display_Scan4 001D     __size_of_Display_Scan5 0011                ADC_Sample@i 00C6  
              ADC_Sample@j 00C4          interrupt_function 0004             ___wmul@product 0024  
                clear_ram0 07D9           _debounce_counter 00AE             ?_Led_Gpio_Init 0070  
              __stringbase 07C6                   _PWM_Init 0778          ___wmul@multiplier 0020  
     __size_of_Init_System 0039    __end_of_Button_response 0272                ??_Isr_Timer 007A  
               _ADC_Sample 003D           __size_of_Display 001D           __size_of_Set_PWM 0030  
              ??_Motor_num 0020              _Display_Scan1 070B              _Display_Scan2 06EE  
            _Display_Scan3 06D1              _Display_Scan4 06B4              _Display_Scan5 07A0  
         __size_of___awdiv 0045           __size_of___lbdiv 001B           __size_of___ftadd 00B8  
         __size_of___awmod 003D           __size_of___lbmod 001C           __size_of___ftdiv 0062  
         __size_of___ftmul 005B           __size_of___fttol 0057                   ___ftpack 058E  
       __end_of__stringtab 07C7                   _adc_last 00A4                   ___lwtoft 07B1  
                 _adresult 00B1      __size_of_Uncharge_num 0012                   __ptext10 041C  
                 __ptext11 0485                   __ptext20 0697                   __ptext12 003D  
                 __ptext21 07E1                   __ptext13 07B1                   __ptext22 07A0  
                 __ptext14 04EB                   __ptext23 06B4                   __ptext15 03AC  
                 __ptext24 06D1                   __ptext16 0277                   __ptext25 06EE  
                 __ptext17 058E                   __ptext26 070B                   __ptext18 0335  
                 __ptext27 0675                   __ptext19 078E                   __ptext28 0728  
                 __ptext29 0744              __size_of_main 000C                   _hundreds 006F  
           ?_Display_Scan1 0070                   _num_hund 00BF             ?_Display_Scan2 0070  
           ?_Display_Scan3 0070             ?_Display_Scan4 0070             ?_Display_Scan5 0070  
                 _test_adc 00B0            ??_Led_Gpio_Init 0020                   _power_ad 00A8  
       __end_of_duty_steps 07CD                   _pwm_duty 006C               _Uncharge_num 078E  
__size_of_Set_AllPin_INPUT 0001           ?_Button_response 0070                   intlevel1 0000  
              ?_ADC_Sample 0062                  stringcode 07C1          Charge_num@hundred 0079  
               _OPTION_REG 0001                   stringdir 07C1                   stringtab 07C1  
            _power_percent 006D             Set_PWM@channel 002F            ??_Display_Scan1 0070  
          ??_Display_Scan2 0070            ??_Display_Scan3 0070            ??_Display_Scan4 0070  
          ??_Display_Scan5 0070  
